$date
	Thu Mar 28 12:37:57 2019
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_bench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemData [15] $end
$var wire 1 h MemData [14] $end
$var wire 1 i MemData [13] $end
$var wire 1 j MemData [12] $end
$var wire 1 k MemData [11] $end
$var wire 1 l MemData [10] $end
$var wire 1 m MemData [9] $end
$var wire 1 n MemData [8] $end
$var wire 1 o MemData [7] $end
$var wire 1 p MemData [6] $end
$var wire 1 q MemData [5] $end
$var wire 1 r MemData [4] $end
$var wire 1 s MemData [3] $end
$var wire 1 t MemData [2] $end
$var wire 1 u MemData [1] $end
$var wire 1 v MemData [0] $end
$var wire 1 w Halt $end
$var integer 32 x inst_count $end
$var integer 32 y trace_file $end
$var integer 32 z sim_log_file $end

$scope module DUT $end
$var wire 1 { clk $end
$var wire 1 | err $end
$var wire 1 } rst $end

$scope module c0 $end
$var reg 1 ~ clk $end
$var reg 1 !! rst $end
$var wire 1 | err $end
$var integer 32 "! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 | err $end
$var wire 1 #! updatedPC [15] $end
$var wire 1 $! updatedPC [14] $end
$var wire 1 %! updatedPC [13] $end
$var wire 1 &! updatedPC [12] $end
$var wire 1 '! updatedPC [11] $end
$var wire 1 (! updatedPC [10] $end
$var wire 1 )! updatedPC [9] $end
$var wire 1 *! updatedPC [8] $end
$var wire 1 +! updatedPC [7] $end
$var wire 1 ,! updatedPC [6] $end
$var wire 1 -! updatedPC [5] $end
$var wire 1 .! updatedPC [4] $end
$var wire 1 /! updatedPC [3] $end
$var wire 1 0! updatedPC [2] $end
$var wire 1 1! updatedPC [1] $end
$var wire 1 2! updatedPC [0] $end
$var wire 1 3! next_PC_normal [15] $end
$var wire 1 4! next_PC_normal [14] $end
$var wire 1 5! next_PC_normal [13] $end
$var wire 1 6! next_PC_normal [12] $end
$var wire 1 7! next_PC_normal [11] $end
$var wire 1 8! next_PC_normal [10] $end
$var wire 1 9! next_PC_normal [9] $end
$var wire 1 :! next_PC_normal [8] $end
$var wire 1 ;! next_PC_normal [7] $end
$var wire 1 <! next_PC_normal [6] $end
$var wire 1 =! next_PC_normal [5] $end
$var wire 1 >! next_PC_normal [4] $end
$var wire 1 ?! next_PC_normal [3] $end
$var wire 1 @! next_PC_normal [2] $end
$var wire 1 A! next_PC_normal [1] $end
$var wire 1 B! next_PC_normal [0] $end
$var wire 1 C! instruction [15] $end
$var wire 1 D! instruction [14] $end
$var wire 1 E! instruction [13] $end
$var wire 1 F! instruction [12] $end
$var wire 1 G! instruction [11] $end
$var wire 1 H! instruction [10] $end
$var wire 1 I! instruction [9] $end
$var wire 1 J! instruction [8] $end
$var wire 1 K! instruction [7] $end
$var wire 1 L! instruction [6] $end
$var wire 1 M! instruction [5] $end
$var wire 1 N! instruction [4] $end
$var wire 1 O! instruction [3] $end
$var wire 1 P! instruction [2] $end
$var wire 1 Q! instruction [1] $end
$var wire 1 R! instruction [0] $end
$var wire 1 S! readData [15] $end
$var wire 1 T! readData [14] $end
$var wire 1 U! readData [13] $end
$var wire 1 V! readData [12] $end
$var wire 1 W! readData [11] $end
$var wire 1 X! readData [10] $end
$var wire 1 Y! readData [9] $end
$var wire 1 Z! readData [8] $end
$var wire 1 [! readData [7] $end
$var wire 1 \! readData [6] $end
$var wire 1 ]! readData [5] $end
$var wire 1 ^! readData [4] $end
$var wire 1 _! readData [3] $end
$var wire 1 `! readData [2] $end
$var wire 1 a! readData [1] $end
$var wire 1 b! readData [0] $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 s! aluOutput [15] $end
$var wire 1 t! aluOutput [14] $end
$var wire 1 u! aluOutput [13] $end
$var wire 1 v! aluOutput [12] $end
$var wire 1 w! aluOutput [11] $end
$var wire 1 x! aluOutput [10] $end
$var wire 1 y! aluOutput [9] $end
$var wire 1 z! aluOutput [8] $end
$var wire 1 {! aluOutput [7] $end
$var wire 1 |! aluOutput [6] $end
$var wire 1 }! aluOutput [5] $end
$var wire 1 ~! aluOutput [4] $end
$var wire 1 !" aluOutput [3] $end
$var wire 1 "" aluOutput [2] $end
$var wire 1 #" aluOutput [1] $end
$var wire 1 $" aluOutput [0] $end
$var wire 1 %" alu_A [15] $end
$var wire 1 &" alu_A [14] $end
$var wire 1 '" alu_A [13] $end
$var wire 1 (" alu_A [12] $end
$var wire 1 )" alu_A [11] $end
$var wire 1 *" alu_A [10] $end
$var wire 1 +" alu_A [9] $end
$var wire 1 ," alu_A [8] $end
$var wire 1 -" alu_A [7] $end
$var wire 1 ." alu_A [6] $end
$var wire 1 /" alu_A [5] $end
$var wire 1 0" alu_A [4] $end
$var wire 1 1" alu_A [3] $end
$var wire 1 2" alu_A [2] $end
$var wire 1 3" alu_A [1] $end
$var wire 1 4" alu_A [0] $end
$var wire 1 5" alu_B [15] $end
$var wire 1 6" alu_B [14] $end
$var wire 1 7" alu_B [13] $end
$var wire 1 8" alu_B [12] $end
$var wire 1 9" alu_B [11] $end
$var wire 1 :" alu_B [10] $end
$var wire 1 ;" alu_B [9] $end
$var wire 1 <" alu_B [8] $end
$var wire 1 =" alu_B [7] $end
$var wire 1 >" alu_B [6] $end
$var wire 1 ?" alu_B [5] $end
$var wire 1 @" alu_B [4] $end
$var wire 1 A" alu_B [3] $end
$var wire 1 B" alu_B [2] $end
$var wire 1 C" alu_B [1] $end
$var wire 1 D" alu_B [0] $end
$var wire 1 E" createDump $end
$var wire 1 F" errDecode $end
$var wire 1 G" JAL_en $end
$var wire 1 H" Cin $end

$scope module instructionFetch $end
$var wire 1 #! PC_In [15] $end
$var wire 1 $! PC_In [14] $end
$var wire 1 %! PC_In [13] $end
$var wire 1 &! PC_In [12] $end
$var wire 1 '! PC_In [11] $end
$var wire 1 (! PC_In [10] $end
$var wire 1 )! PC_In [9] $end
$var wire 1 *! PC_In [8] $end
$var wire 1 +! PC_In [7] $end
$var wire 1 ,! PC_In [6] $end
$var wire 1 -! PC_In [5] $end
$var wire 1 .! PC_In [4] $end
$var wire 1 /! PC_In [3] $end
$var wire 1 0! PC_In [2] $end
$var wire 1 1! PC_In [1] $end
$var wire 1 2! PC_In [0] $end
$var wire 1 { clk $end
$var wire 1 E" dump $end
$var wire 1 } rst $end
$var wire 1 3! PC_Next [15] $end
$var wire 1 4! PC_Next [14] $end
$var wire 1 5! PC_Next [13] $end
$var wire 1 6! PC_Next [12] $end
$var wire 1 7! PC_Next [11] $end
$var wire 1 8! PC_Next [10] $end
$var wire 1 9! PC_Next [9] $end
$var wire 1 :! PC_Next [8] $end
$var wire 1 ;! PC_Next [7] $end
$var wire 1 <! PC_Next [6] $end
$var wire 1 =! PC_Next [5] $end
$var wire 1 >! PC_Next [4] $end
$var wire 1 ?! PC_Next [3] $end
$var wire 1 @! PC_Next [2] $end
$var wire 1 A! PC_Next [1] $end
$var wire 1 B! PC_Next [0] $end
$var wire 1 C! instruction [15] $end
$var wire 1 D! instruction [14] $end
$var wire 1 E! instruction [13] $end
$var wire 1 F! instruction [12] $end
$var wire 1 G! instruction [11] $end
$var wire 1 H! instruction [10] $end
$var wire 1 I! instruction [9] $end
$var wire 1 J! instruction [8] $end
$var wire 1 K! instruction [7] $end
$var wire 1 L! instruction [6] $end
$var wire 1 M! instruction [5] $end
$var wire 1 N! instruction [4] $end
$var wire 1 O! instruction [3] $end
$var wire 1 P! instruction [2] $end
$var wire 1 Q! instruction [1] $end
$var wire 1 R! instruction [0] $end
$var wire 1 I" currentPC [15] $end
$var wire 1 J" currentPC [14] $end
$var wire 1 K" currentPC [13] $end
$var wire 1 L" currentPC [12] $end
$var wire 1 M" currentPC [11] $end
$var wire 1 N" currentPC [10] $end
$var wire 1 O" currentPC [9] $end
$var wire 1 P" currentPC [8] $end
$var wire 1 Q" currentPC [7] $end
$var wire 1 R" currentPC [6] $end
$var wire 1 S" currentPC [5] $end
$var wire 1 T" currentPC [4] $end
$var wire 1 U" currentPC [3] $end
$var wire 1 V" currentPC [2] $end
$var wire 1 W" currentPC [1] $end
$var wire 1 X" currentPC [0] $end
$var wire 1 Y" c_out $end

$scope module PC_Register $end
$var wire 1 I" readData [15] $end
$var wire 1 J" readData [14] $end
$var wire 1 K" readData [13] $end
$var wire 1 L" readData [12] $end
$var wire 1 M" readData [11] $end
$var wire 1 N" readData [10] $end
$var wire 1 O" readData [9] $end
$var wire 1 P" readData [8] $end
$var wire 1 Q" readData [7] $end
$var wire 1 R" readData [6] $end
$var wire 1 S" readData [5] $end
$var wire 1 T" readData [4] $end
$var wire 1 U" readData [3] $end
$var wire 1 V" readData [2] $end
$var wire 1 W" readData [1] $end
$var wire 1 X" readData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 Z" writeEnable $end
$var wire 1 #! writeData [15] $end
$var wire 1 $! writeData [14] $end
$var wire 1 %! writeData [13] $end
$var wire 1 &! writeData [12] $end
$var wire 1 '! writeData [11] $end
$var wire 1 (! writeData [10] $end
$var wire 1 )! writeData [9] $end
$var wire 1 *! writeData [8] $end
$var wire 1 +! writeData [7] $end
$var wire 1 ,! writeData [6] $end
$var wire 1 -! writeData [5] $end
$var wire 1 .! writeData [4] $end
$var wire 1 /! writeData [3] $end
$var wire 1 0! writeData [2] $end
$var wire 1 1! writeData [1] $end
$var wire 1 2! writeData [0] $end
$var wire 1 [" in [15] $end
$var wire 1 \" in [14] $end
$var wire 1 ]" in [13] $end
$var wire 1 ^" in [12] $end
$var wire 1 _" in [11] $end
$var wire 1 `" in [10] $end
$var wire 1 a" in [9] $end
$var wire 1 b" in [8] $end
$var wire 1 c" in [7] $end
$var wire 1 d" in [6] $end
$var wire 1 e" in [5] $end
$var wire 1 f" in [4] $end
$var wire 1 g" in [3] $end
$var wire 1 h" in [2] $end
$var wire 1 i" in [1] $end
$var wire 1 j" in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 I" q $end
$var wire 1 [" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k" state $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 J" q $end
$var wire 1 \" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l" state $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 K" q $end
$var wire 1 ]" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m" state $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 L" q $end
$var wire 1 ^" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n" state $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 M" q $end
$var wire 1 _" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 o" state $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 N" q $end
$var wire 1 `" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 p" state $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 O" q $end
$var wire 1 a" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 q" state $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 P" q $end
$var wire 1 b" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 r" state $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 Q" q $end
$var wire 1 c" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 s" state $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 R" q $end
$var wire 1 d" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 t" state $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 S" q $end
$var wire 1 e" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 u" state $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 T" q $end
$var wire 1 f" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 v" state $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 U" q $end
$var wire 1 g" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 w" state $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 V" q $end
$var wire 1 h" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 x" state $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 W" q $end
$var wire 1 i" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 y" state $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 X" q $end
$var wire 1 j" d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 z" state $end
$upscope $end
$upscope $end

$scope module instructionMemory $end
$var wire 1 C! data_out [15] $end
$var wire 1 D! data_out [14] $end
$var wire 1 E! data_out [13] $end
$var wire 1 F! data_out [12] $end
$var wire 1 G! data_out [11] $end
$var wire 1 H! data_out [10] $end
$var wire 1 I! data_out [9] $end
$var wire 1 J! data_out [8] $end
$var wire 1 K! data_out [7] $end
$var wire 1 L! data_out [6] $end
$var wire 1 M! data_out [5] $end
$var wire 1 N! data_out [4] $end
$var wire 1 O! data_out [3] $end
$var wire 1 P! data_out [2] $end
$var wire 1 Q! data_out [1] $end
$var wire 1 R! data_out [0] $end
$var wire 1 {" data_in [15] $end
$var wire 1 |" data_in [14] $end
$var wire 1 }" data_in [13] $end
$var wire 1 ~" data_in [12] $end
$var wire 1 !# data_in [11] $end
$var wire 1 "# data_in [10] $end
$var wire 1 ## data_in [9] $end
$var wire 1 $# data_in [8] $end
$var wire 1 %# data_in [7] $end
$var wire 1 &# data_in [6] $end
$var wire 1 '# data_in [5] $end
$var wire 1 (# data_in [4] $end
$var wire 1 )# data_in [3] $end
$var wire 1 *# data_in [2] $end
$var wire 1 +# data_in [1] $end
$var wire 1 ,# data_in [0] $end
$var wire 1 I" addr [15] $end
$var wire 1 J" addr [14] $end
$var wire 1 K" addr [13] $end
$var wire 1 L" addr [12] $end
$var wire 1 M" addr [11] $end
$var wire 1 N" addr [10] $end
$var wire 1 O" addr [9] $end
$var wire 1 P" addr [8] $end
$var wire 1 Q" addr [7] $end
$var wire 1 R" addr [6] $end
$var wire 1 S" addr [5] $end
$var wire 1 T" addr [4] $end
$var wire 1 U" addr [3] $end
$var wire 1 V" addr [2] $end
$var wire 1 W" addr [1] $end
$var wire 1 X" addr [0] $end
$var wire 1 -# enable $end
$var wire 1 .# wr $end
$var wire 1 E" createdump $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /# loaded $end
$var reg 17 0# largest [16:0] $end
$var integer 32 1# mcd $end
$var integer 32 2# i $end
$upscope $end

$scope module PC_Adder $end
$var wire 1 I" A [15] $end
$var wire 1 J" A [14] $end
$var wire 1 K" A [13] $end
$var wire 1 L" A [12] $end
$var wire 1 M" A [11] $end
$var wire 1 N" A [10] $end
$var wire 1 O" A [9] $end
$var wire 1 P" A [8] $end
$var wire 1 Q" A [7] $end
$var wire 1 R" A [6] $end
$var wire 1 S" A [5] $end
$var wire 1 T" A [4] $end
$var wire 1 U" A [3] $end
$var wire 1 V" A [2] $end
$var wire 1 W" A [1] $end
$var wire 1 X" A [0] $end
$var wire 1 3# B [15] $end
$var wire 1 4# B [14] $end
$var wire 1 5# B [13] $end
$var wire 1 6# B [12] $end
$var wire 1 7# B [11] $end
$var wire 1 8# B [10] $end
$var wire 1 9# B [9] $end
$var wire 1 :# B [8] $end
$var wire 1 ;# B [7] $end
$var wire 1 <# B [6] $end
$var wire 1 =# B [5] $end
$var wire 1 ># B [4] $end
$var wire 1 ?# B [3] $end
$var wire 1 @# B [2] $end
$var wire 1 A# B [1] $end
$var wire 1 B# B [0] $end
$var wire 1 C# C_in $end
$var wire 1 3! S [15] $end
$var wire 1 4! S [14] $end
$var wire 1 5! S [13] $end
$var wire 1 6! S [12] $end
$var wire 1 7! S [11] $end
$var wire 1 8! S [10] $end
$var wire 1 9! S [9] $end
$var wire 1 :! S [8] $end
$var wire 1 ;! S [7] $end
$var wire 1 <! S [6] $end
$var wire 1 =! S [5] $end
$var wire 1 >! S [4] $end
$var wire 1 ?! S [3] $end
$var wire 1 @! S [2] $end
$var wire 1 A! S [1] $end
$var wire 1 B! S [0] $end
$var wire 1 Y" C_out $end
$var wire 1 D# C_in1 $end
$var wire 1 E# C_in2 $end
$var wire 1 F# C_in3 $end

$scope module rcaBit3_0 $end
$var parameter 32 G# N $end
$var wire 1 U" A [3] $end
$var wire 1 V" A [2] $end
$var wire 1 W" A [1] $end
$var wire 1 X" A [0] $end
$var wire 1 ?# B [3] $end
$var wire 1 @# B [2] $end
$var wire 1 A# B [1] $end
$var wire 1 B# B [0] $end
$var wire 1 C# C_in $end
$var wire 1 ?! S [3] $end
$var wire 1 @! S [2] $end
$var wire 1 A! S [1] $end
$var wire 1 B! S [0] $end
$var wire 1 D# C_out $end
$var wire 1 H# C_in1 $end
$var wire 1 I# C_in2 $end
$var wire 1 J# C_in3 $end

$scope module rcaBit0 $end
$var wire 1 X" A $end
$var wire 1 B# B $end
$var wire 1 C# C_in $end
$var wire 1 B! S $end
$var wire 1 H# C_out $end
$var wire 1 K# A_nand_B $end
$var wire 1 L# A_nand_Cin $end
$var wire 1 M# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 X" in1 $end
$var wire 1 B# in2 $end
$var wire 1 C# in3 $end
$var wire 1 B! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 X" in1 $end
$var wire 1 B# in2 $end
$var wire 1 K# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 X" in1 $end
$var wire 1 C# in2 $end
$var wire 1 L# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 B# in1 $end
$var wire 1 C# in2 $end
$var wire 1 M# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 K# in1 $end
$var wire 1 L# in2 $end
$var wire 1 M# in3 $end
$var wire 1 H# out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 W" A $end
$var wire 1 A# B $end
$var wire 1 H# C_in $end
$var wire 1 A! S $end
$var wire 1 I# C_out $end
$var wire 1 N# A_nand_B $end
$var wire 1 O# A_nand_Cin $end
$var wire 1 P# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 W" in1 $end
$var wire 1 A# in2 $end
$var wire 1 H# in3 $end
$var wire 1 A! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 W" in1 $end
$var wire 1 A# in2 $end
$var wire 1 N# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 W" in1 $end
$var wire 1 H# in2 $end
$var wire 1 O# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 A# in1 $end
$var wire 1 H# in2 $end
$var wire 1 P# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 N# in1 $end
$var wire 1 O# in2 $end
$var wire 1 P# in3 $end
$var wire 1 I# out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 V" A $end
$var wire 1 @# B $end
$var wire 1 I# C_in $end
$var wire 1 @! S $end
$var wire 1 J# C_out $end
$var wire 1 Q# A_nand_B $end
$var wire 1 R# A_nand_Cin $end
$var wire 1 S# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 V" in1 $end
$var wire 1 @# in2 $end
$var wire 1 I# in3 $end
$var wire 1 @! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 V" in1 $end
$var wire 1 @# in2 $end
$var wire 1 Q# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 V" in1 $end
$var wire 1 I# in2 $end
$var wire 1 R# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 @# in1 $end
$var wire 1 I# in2 $end
$var wire 1 S# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 Q# in1 $end
$var wire 1 R# in2 $end
$var wire 1 S# in3 $end
$var wire 1 J# out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 U" A $end
$var wire 1 ?# B $end
$var wire 1 J# C_in $end
$var wire 1 ?! S $end
$var wire 1 D# C_out $end
$var wire 1 T# A_nand_B $end
$var wire 1 U# A_nand_Cin $end
$var wire 1 V# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 U" in1 $end
$var wire 1 ?# in2 $end
$var wire 1 J# in3 $end
$var wire 1 ?! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 U" in1 $end
$var wire 1 ?# in2 $end
$var wire 1 T# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 U" in1 $end
$var wire 1 J# in2 $end
$var wire 1 U# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ?# in1 $end
$var wire 1 J# in2 $end
$var wire 1 V# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 T# in1 $end
$var wire 1 U# in2 $end
$var wire 1 V# in3 $end
$var wire 1 D# out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit7_4 $end
$var parameter 32 W# N $end
$var wire 1 Q" A [3] $end
$var wire 1 R" A [2] $end
$var wire 1 S" A [1] $end
$var wire 1 T" A [0] $end
$var wire 1 ;# B [3] $end
$var wire 1 <# B [2] $end
$var wire 1 =# B [1] $end
$var wire 1 ># B [0] $end
$var wire 1 D# C_in $end
$var wire 1 ;! S [3] $end
$var wire 1 <! S [2] $end
$var wire 1 =! S [1] $end
$var wire 1 >! S [0] $end
$var wire 1 E# C_out $end
$var wire 1 X# C_in1 $end
$var wire 1 Y# C_in2 $end
$var wire 1 Z# C_in3 $end

$scope module rcaBit0 $end
$var wire 1 T" A $end
$var wire 1 ># B $end
$var wire 1 D# C_in $end
$var wire 1 >! S $end
$var wire 1 X# C_out $end
$var wire 1 [# A_nand_B $end
$var wire 1 \# A_nand_Cin $end
$var wire 1 ]# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 T" in1 $end
$var wire 1 ># in2 $end
$var wire 1 D# in3 $end
$var wire 1 >! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 T" in1 $end
$var wire 1 ># in2 $end
$var wire 1 [# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 T" in1 $end
$var wire 1 D# in2 $end
$var wire 1 \# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ># in1 $end
$var wire 1 D# in2 $end
$var wire 1 ]# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 [# in1 $end
$var wire 1 \# in2 $end
$var wire 1 ]# in3 $end
$var wire 1 X# out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 S" A $end
$var wire 1 =# B $end
$var wire 1 X# C_in $end
$var wire 1 =! S $end
$var wire 1 Y# C_out $end
$var wire 1 ^# A_nand_B $end
$var wire 1 _# A_nand_Cin $end
$var wire 1 `# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 S" in1 $end
$var wire 1 =# in2 $end
$var wire 1 X# in3 $end
$var wire 1 =! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 S" in1 $end
$var wire 1 =# in2 $end
$var wire 1 ^# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 S" in1 $end
$var wire 1 X# in2 $end
$var wire 1 _# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 =# in1 $end
$var wire 1 X# in2 $end
$var wire 1 `# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ^# in1 $end
$var wire 1 _# in2 $end
$var wire 1 `# in3 $end
$var wire 1 Y# out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 R" A $end
$var wire 1 <# B $end
$var wire 1 Y# C_in $end
$var wire 1 <! S $end
$var wire 1 Z# C_out $end
$var wire 1 a# A_nand_B $end
$var wire 1 b# A_nand_Cin $end
$var wire 1 c# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 R" in1 $end
$var wire 1 <# in2 $end
$var wire 1 Y# in3 $end
$var wire 1 <! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 R" in1 $end
$var wire 1 <# in2 $end
$var wire 1 a# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 R" in1 $end
$var wire 1 Y# in2 $end
$var wire 1 b# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 <# in1 $end
$var wire 1 Y# in2 $end
$var wire 1 c# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 a# in1 $end
$var wire 1 b# in2 $end
$var wire 1 c# in3 $end
$var wire 1 Z# out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 Q" A $end
$var wire 1 ;# B $end
$var wire 1 Z# C_in $end
$var wire 1 ;! S $end
$var wire 1 E# C_out $end
$var wire 1 d# A_nand_B $end
$var wire 1 e# A_nand_Cin $end
$var wire 1 f# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Q" in1 $end
$var wire 1 ;# in2 $end
$var wire 1 Z# in3 $end
$var wire 1 ;! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Q" in1 $end
$var wire 1 ;# in2 $end
$var wire 1 d# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Q" in1 $end
$var wire 1 Z# in2 $end
$var wire 1 e# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ;# in1 $end
$var wire 1 Z# in2 $end
$var wire 1 f# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 d# in1 $end
$var wire 1 e# in2 $end
$var wire 1 f# in3 $end
$var wire 1 E# out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit11_8 $end
$var parameter 32 g# N $end
$var wire 1 M" A [3] $end
$var wire 1 N" A [2] $end
$var wire 1 O" A [1] $end
$var wire 1 P" A [0] $end
$var wire 1 7# B [3] $end
$var wire 1 8# B [2] $end
$var wire 1 9# B [1] $end
$var wire 1 :# B [0] $end
$var wire 1 E# C_in $end
$var wire 1 7! S [3] $end
$var wire 1 8! S [2] $end
$var wire 1 9! S [1] $end
$var wire 1 :! S [0] $end
$var wire 1 F# C_out $end
$var wire 1 h# C_in1 $end
$var wire 1 i# C_in2 $end
$var wire 1 j# C_in3 $end

$scope module rcaBit0 $end
$var wire 1 P" A $end
$var wire 1 :# B $end
$var wire 1 E# C_in $end
$var wire 1 :! S $end
$var wire 1 h# C_out $end
$var wire 1 k# A_nand_B $end
$var wire 1 l# A_nand_Cin $end
$var wire 1 m# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 P" in1 $end
$var wire 1 :# in2 $end
$var wire 1 E# in3 $end
$var wire 1 :! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 P" in1 $end
$var wire 1 :# in2 $end
$var wire 1 k# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 P" in1 $end
$var wire 1 E# in2 $end
$var wire 1 l# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 :# in1 $end
$var wire 1 E# in2 $end
$var wire 1 m# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 k# in1 $end
$var wire 1 l# in2 $end
$var wire 1 m# in3 $end
$var wire 1 h# out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 O" A $end
$var wire 1 9# B $end
$var wire 1 h# C_in $end
$var wire 1 9! S $end
$var wire 1 i# C_out $end
$var wire 1 n# A_nand_B $end
$var wire 1 o# A_nand_Cin $end
$var wire 1 p# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 O" in1 $end
$var wire 1 9# in2 $end
$var wire 1 h# in3 $end
$var wire 1 9! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 O" in1 $end
$var wire 1 9# in2 $end
$var wire 1 n# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 O" in1 $end
$var wire 1 h# in2 $end
$var wire 1 o# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 9# in1 $end
$var wire 1 h# in2 $end
$var wire 1 p# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 n# in1 $end
$var wire 1 o# in2 $end
$var wire 1 p# in3 $end
$var wire 1 i# out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 N" A $end
$var wire 1 8# B $end
$var wire 1 i# C_in $end
$var wire 1 8! S $end
$var wire 1 j# C_out $end
$var wire 1 q# A_nand_B $end
$var wire 1 r# A_nand_Cin $end
$var wire 1 s# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 N" in1 $end
$var wire 1 8# in2 $end
$var wire 1 i# in3 $end
$var wire 1 8! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 N" in1 $end
$var wire 1 8# in2 $end
$var wire 1 q# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 N" in1 $end
$var wire 1 i# in2 $end
$var wire 1 r# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 8# in1 $end
$var wire 1 i# in2 $end
$var wire 1 s# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 q# in1 $end
$var wire 1 r# in2 $end
$var wire 1 s# in3 $end
$var wire 1 j# out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 M" A $end
$var wire 1 7# B $end
$var wire 1 j# C_in $end
$var wire 1 7! S $end
$var wire 1 F# C_out $end
$var wire 1 t# A_nand_B $end
$var wire 1 u# A_nand_Cin $end
$var wire 1 v# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 M" in1 $end
$var wire 1 7# in2 $end
$var wire 1 j# in3 $end
$var wire 1 7! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 M" in1 $end
$var wire 1 7# in2 $end
$var wire 1 t# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 M" in1 $end
$var wire 1 j# in2 $end
$var wire 1 u# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 7# in1 $end
$var wire 1 j# in2 $end
$var wire 1 v# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 t# in1 $end
$var wire 1 u# in2 $end
$var wire 1 v# in3 $end
$var wire 1 F# out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit15_12 $end
$var parameter 32 w# N $end
$var wire 1 I" A [3] $end
$var wire 1 J" A [2] $end
$var wire 1 K" A [1] $end
$var wire 1 L" A [0] $end
$var wire 1 3# B [3] $end
$var wire 1 4# B [2] $end
$var wire 1 5# B [1] $end
$var wire 1 6# B [0] $end
$var wire 1 F# C_in $end
$var wire 1 3! S [3] $end
$var wire 1 4! S [2] $end
$var wire 1 5! S [1] $end
$var wire 1 6! S [0] $end
$var wire 1 Y" C_out $end
$var wire 1 x# C_in1 $end
$var wire 1 y# C_in2 $end
$var wire 1 z# C_in3 $end

$scope module rcaBit0 $end
$var wire 1 L" A $end
$var wire 1 6# B $end
$var wire 1 F# C_in $end
$var wire 1 6! S $end
$var wire 1 x# C_out $end
$var wire 1 {# A_nand_B $end
$var wire 1 |# A_nand_Cin $end
$var wire 1 }# B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 L" in1 $end
$var wire 1 6# in2 $end
$var wire 1 F# in3 $end
$var wire 1 6! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 L" in1 $end
$var wire 1 6# in2 $end
$var wire 1 {# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 L" in1 $end
$var wire 1 F# in2 $end
$var wire 1 |# out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 6# in1 $end
$var wire 1 F# in2 $end
$var wire 1 }# out $end
$upscope $end

$scope module final_nand $end
$var wire 1 {# in1 $end
$var wire 1 |# in2 $end
$var wire 1 }# in3 $end
$var wire 1 x# out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 K" A $end
$var wire 1 5# B $end
$var wire 1 x# C_in $end
$var wire 1 5! S $end
$var wire 1 y# C_out $end
$var wire 1 ~# A_nand_B $end
$var wire 1 !$ A_nand_Cin $end
$var wire 1 "$ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 K" in1 $end
$var wire 1 5# in2 $end
$var wire 1 x# in3 $end
$var wire 1 5! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 K" in1 $end
$var wire 1 5# in2 $end
$var wire 1 ~# out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 K" in1 $end
$var wire 1 x# in2 $end
$var wire 1 !$ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 5# in1 $end
$var wire 1 x# in2 $end
$var wire 1 "$ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ~# in1 $end
$var wire 1 !$ in2 $end
$var wire 1 "$ in3 $end
$var wire 1 y# out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 J" A $end
$var wire 1 4# B $end
$var wire 1 y# C_in $end
$var wire 1 4! S $end
$var wire 1 z# C_out $end
$var wire 1 #$ A_nand_B $end
$var wire 1 $$ A_nand_Cin $end
$var wire 1 %$ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 J" in1 $end
$var wire 1 4# in2 $end
$var wire 1 y# in3 $end
$var wire 1 4! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 J" in1 $end
$var wire 1 4# in2 $end
$var wire 1 #$ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 J" in1 $end
$var wire 1 y# in2 $end
$var wire 1 $$ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 4# in1 $end
$var wire 1 y# in2 $end
$var wire 1 %$ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 #$ in1 $end
$var wire 1 $$ in2 $end
$var wire 1 %$ in3 $end
$var wire 1 z# out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 I" A $end
$var wire 1 3# B $end
$var wire 1 z# C_in $end
$var wire 1 3! S $end
$var wire 1 Y" C_out $end
$var wire 1 &$ A_nand_B $end
$var wire 1 '$ A_nand_Cin $end
$var wire 1 ($ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 I" in1 $end
$var wire 1 3# in2 $end
$var wire 1 z# in3 $end
$var wire 1 3! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 I" in1 $end
$var wire 1 3# in2 $end
$var wire 1 &$ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 I" in1 $end
$var wire 1 z# in2 $end
$var wire 1 '$ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 3# in1 $end
$var wire 1 z# in2 $end
$var wire 1 ($ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 &$ in1 $end
$var wire 1 '$ in2 $end
$var wire 1 ($ in3 $end
$var wire 1 Y" out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instructionDecode $end
$var wire 1 C! instruction [15] $end
$var wire 1 D! instruction [14] $end
$var wire 1 E! instruction [13] $end
$var wire 1 F! instruction [12] $end
$var wire 1 G! instruction [11] $end
$var wire 1 H! instruction [10] $end
$var wire 1 I! instruction [9] $end
$var wire 1 J! instruction [8] $end
$var wire 1 K! instruction [7] $end
$var wire 1 L! instruction [6] $end
$var wire 1 M! instruction [5] $end
$var wire 1 N! instruction [4] $end
$var wire 1 O! instruction [3] $end
$var wire 1 P! instruction [2] $end
$var wire 1 Q! instruction [1] $end
$var wire 1 R! instruction [0] $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 F" err $end
$var wire 1 E" dump $end
$var wire 1 H" Cin $end
$var wire 1 %" A [15] $end
$var wire 1 &" A [14] $end
$var wire 1 '" A [13] $end
$var wire 1 (" A [12] $end
$var wire 1 )" A [11] $end
$var wire 1 *" A [10] $end
$var wire 1 +" A [9] $end
$var wire 1 ," A [8] $end
$var wire 1 -" A [7] $end
$var wire 1 ." A [6] $end
$var wire 1 /" A [5] $end
$var wire 1 0" A [4] $end
$var wire 1 1" A [3] $end
$var wire 1 2" A [2] $end
$var wire 1 3" A [1] $end
$var wire 1 4" A [0] $end
$var wire 1 5" B [15] $end
$var wire 1 6" B [14] $end
$var wire 1 7" B [13] $end
$var wire 1 8" B [12] $end
$var wire 1 9" B [11] $end
$var wire 1 :" B [10] $end
$var wire 1 ;" B [9] $end
$var wire 1 <" B [8] $end
$var wire 1 =" B [7] $end
$var wire 1 >" B [6] $end
$var wire 1 ?" B [5] $end
$var wire 1 @" B [4] $end
$var wire 1 A" B [3] $end
$var wire 1 B" B [2] $end
$var wire 1 C" B [1] $end
$var wire 1 D" B [0] $end
$var wire 1 )$ writeRegister [2] $end
$var wire 1 *$ writeRegister [1] $end
$var wire 1 +$ writeRegister [0] $end
$var wire 1 ,$ RegWrite $end
$var wire 1 -$ controlErr $end
$var wire 1 .$ DMemWrite $end
$var wire 1 /$ ALUSrc2 $end
$var wire 1 0$ PCSrc $end
$var wire 1 1$ PCImm $end
$var wire 1 2$ MemToReg $end
$var wire 1 3$ DMemEn $end
$var wire 1 4$ Branching $end
$var wire 1 5$ DMemDump $end
$var wire 1 6$ Jump $end
$var wire 1 7$ invA $end
$var wire 1 8$ invB $end
$var wire 1 9$ RegDest [1] $end
$var wire 1 :$ RegDest [0] $end
$var wire 1 ;$ SESel [2] $end
$var wire 1 <$ SESel [1] $end
$var wire 1 =$ SESel [0] $end
$var wire 1 >$ regErr $end

$scope module controlUnit $end
$var parameter 1 ?$ assert $end
$var parameter 1 @$ no_assert $end
$var parameter 5 A$ SUBI $end
$var parameter 5 B$ ADDI $end
$var parameter 5 C$ ANDNI $end
$var parameter 5 D$ XORI $end
$var parameter 5 E$ ROLI $end
$var parameter 5 F$ SLLI $end
$var parameter 5 G$ RORI $end
$var parameter 5 H$ SRLI $end
$var parameter 5 I$ ST $end
$var parameter 5 J$ LD $end
$var parameter 5 K$ STU $end
$var parameter 5 L$ BTR $end
$var parameter 5 M$ ALU_1 $end
$var parameter 2 N$ ADD $end
$var parameter 2 O$ SUB $end
$var parameter 2 P$ XOR $end
$var parameter 2 Q$ ANDN $end
$var parameter 5 R$ ALU_2 $end
$var parameter 2 S$ ROL $end
$var parameter 2 T$ SLL $end
$var parameter 2 U$ ROR $end
$var parameter 2 V$ SRL $end
$var parameter 5 W$ SEQ $end
$var parameter 5 X$ SLT $end
$var parameter 5 Y$ SLE $end
$var parameter 5 Z$ SCO $end
$var parameter 5 [$ BNEZ $end
$var parameter 5 \$ BEQZ $end
$var parameter 5 ]$ BLTZ $end
$var parameter 5 ^$ BGEZ $end
$var parameter 5 _$ LBI $end
$var parameter 5 `$ SLBI $end
$var parameter 5 a$ J $end
$var parameter 5 b$ JR $end
$var parameter 5 c$ JAL $end
$var parameter 5 d$ JALR $end
$var parameter 5 e$ siic $end
$var parameter 5 f$ NOP $end
$var parameter 5 g$ RTI $end
$var parameter 5 h$ HALT $end
$var wire 1 C! OpCode [4] $end
$var wire 1 D! OpCode [3] $end
$var wire 1 E! OpCode [2] $end
$var wire 1 F! OpCode [1] $end
$var wire 1 G! OpCode [0] $end
$var wire 1 Q! Funct [1] $end
$var wire 1 R! Funct [0] $end
$var wire 1 -$ err $end
$var wire 1 ,$ RegWrite $end
$var wire 1 .$ DMemWrite $end
$var wire 1 3$ DMemEn $end
$var wire 1 /$ ALUSrc2 $end
$var wire 1 0$ PCSrc $end
$var wire 1 1$ PCImm $end
$var wire 1 2$ MemToReg $end
$var wire 1 5$ DMemDump $end
$var wire 1 6$ Jump $end
$var wire 1 7$ invA $end
$var wire 1 8$ invB $end
$var wire 1 H" Cin $end
$var wire 1 4$ Branching $end
$var wire 1 9$ RegDst [1] $end
$var wire 1 :$ RegDst [0] $end
$var wire 1 ;$ SESel [2] $end
$var wire 1 <$ SESel [1] $end
$var wire 1 =$ SESel [0] $end
$var reg 1 i$ errRegister $end
$var reg 1 j$ JumpRegister $end
$var reg 1 k$ invA_Register $end
$var reg 1 l$ invB_Register $end
$var reg 1 m$ Cin_Register $end
$var reg 1 n$ RegWriteRegister $end
$var reg 1 o$ DMemWriteRegister $end
$var reg 1 p$ DMemEnRegister $end
$var reg 1 q$ PCImmRegister $end
$var reg 1 r$ ALUSrc2Register $end
$var reg 1 s$ PCSrcRegister $end
$var reg 1 t$ MemToRegRegister $end
$var reg 1 u$ DMemDumpRegister $end
$var reg 2 v$ RegDstRegister [1:0] $end
$var reg 3 w$ SESelRegister [2:0] $end
$var reg 1 x$ BranchingRegister $end
$upscope $end

$scope module writeRegSelMux $end
$var parameter 32 y$ NUM_BITS $end
$var wire 1 N! InA [2] $end
$var wire 1 O! InA [1] $end
$var wire 1 P! InA [0] $end
$var wire 1 K! InB [2] $end
$var wire 1 L! InB [1] $end
$var wire 1 M! InB [0] $end
$var wire 1 H! InC [2] $end
$var wire 1 I! InC [1] $end
$var wire 1 J! InC [0] $end
$var wire 1 z$ InD [2] $end
$var wire 1 {$ InD [1] $end
$var wire 1 |$ InD [0] $end
$var wire 1 9$ S [1] $end
$var wire 1 :$ S [0] $end
$var wire 1 )$ Out [2] $end
$var wire 1 *$ Out [1] $end
$var wire 1 +$ Out [0] $end
$var wire 1 }$ A_B_Out [2] $end
$var wire 1 ~$ A_B_Out [1] $end
$var wire 1 !% A_B_Out [0] $end
$var wire 1 "% C_D_Out [2] $end
$var wire 1 #% C_D_Out [1] $end
$var wire 1 $% C_D_Out [0] $end

$scope module A_B_mux $end
$var parameter 32 %% NUM_BITS $end
$var wire 1 N! InA [2] $end
$var wire 1 O! InA [1] $end
$var wire 1 P! InA [0] $end
$var wire 1 K! InB [2] $end
$var wire 1 L! InB [1] $end
$var wire 1 M! InB [0] $end
$var wire 1 :$ S $end
$var wire 1 }$ Out [2] $end
$var wire 1 ~$ Out [1] $end
$var wire 1 !% Out [0] $end
$upscope $end

$scope module C_D_mux $end
$var parameter 32 &% NUM_BITS $end
$var wire 1 H! InA [2] $end
$var wire 1 I! InA [1] $end
$var wire 1 J! InA [0] $end
$var wire 1 z$ InB [2] $end
$var wire 1 {$ InB [1] $end
$var wire 1 |$ InB [0] $end
$var wire 1 :$ S $end
$var wire 1 "% Out [2] $end
$var wire 1 #% Out [1] $end
$var wire 1 $% Out [0] $end
$upscope $end

$scope module finalMux $end
$var parameter 32 '% NUM_BITS $end
$var wire 1 }$ InA [2] $end
$var wire 1 ~$ InA [1] $end
$var wire 1 !% InA [0] $end
$var wire 1 "% InB [2] $end
$var wire 1 #% InB [1] $end
$var wire 1 $% InB [0] $end
$var wire 1 9$ S $end
$var wire 1 )$ Out [2] $end
$var wire 1 *$ Out [1] $end
$var wire 1 +$ Out [0] $end
$upscope $end
$upscope $end

$scope module regFile $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 H! readReg1Sel [2] $end
$var wire 1 I! readReg1Sel [1] $end
$var wire 1 J! readReg1Sel [0] $end
$var wire 1 K! readReg2Sel [2] $end
$var wire 1 L! readReg2Sel [1] $end
$var wire 1 M! readReg2Sel [0] $end
$var wire 1 )$ writeRegSel [2] $end
$var wire 1 *$ writeRegSel [1] $end
$var wire 1 +$ writeRegSel [0] $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 ,$ writeEn $end
$var wire 1 %" readData1 [15] $end
$var wire 1 &" readData1 [14] $end
$var wire 1 '" readData1 [13] $end
$var wire 1 (" readData1 [12] $end
$var wire 1 )" readData1 [11] $end
$var wire 1 *" readData1 [10] $end
$var wire 1 +" readData1 [9] $end
$var wire 1 ," readData1 [8] $end
$var wire 1 -" readData1 [7] $end
$var wire 1 ." readData1 [6] $end
$var wire 1 /" readData1 [5] $end
$var wire 1 0" readData1 [4] $end
$var wire 1 1" readData1 [3] $end
$var wire 1 2" readData1 [2] $end
$var wire 1 3" readData1 [1] $end
$var wire 1 4" readData1 [0] $end
$var wire 1 5" readData2 [15] $end
$var wire 1 6" readData2 [14] $end
$var wire 1 7" readData2 [13] $end
$var wire 1 8" readData2 [12] $end
$var wire 1 9" readData2 [11] $end
$var wire 1 :" readData2 [10] $end
$var wire 1 ;" readData2 [9] $end
$var wire 1 <" readData2 [8] $end
$var wire 1 =" readData2 [7] $end
$var wire 1 >" readData2 [6] $end
$var wire 1 ?" readData2 [5] $end
$var wire 1 @" readData2 [4] $end
$var wire 1 A" readData2 [3] $end
$var wire 1 B" readData2 [2] $end
$var wire 1 C" readData2 [1] $end
$var wire 1 D" readData2 [0] $end
$var wire 1 >$ err $end
$var wire 1 (% read0Data [15] $end
$var wire 1 )% read0Data [14] $end
$var wire 1 *% read0Data [13] $end
$var wire 1 +% read0Data [12] $end
$var wire 1 ,% read0Data [11] $end
$var wire 1 -% read0Data [10] $end
$var wire 1 .% read0Data [9] $end
$var wire 1 /% read0Data [8] $end
$var wire 1 0% read0Data [7] $end
$var wire 1 1% read0Data [6] $end
$var wire 1 2% read0Data [5] $end
$var wire 1 3% read0Data [4] $end
$var wire 1 4% read0Data [3] $end
$var wire 1 5% read0Data [2] $end
$var wire 1 6% read0Data [1] $end
$var wire 1 7% read0Data [0] $end
$var wire 1 8% read1Data [15] $end
$var wire 1 9% read1Data [14] $end
$var wire 1 :% read1Data [13] $end
$var wire 1 ;% read1Data [12] $end
$var wire 1 <% read1Data [11] $end
$var wire 1 =% read1Data [10] $end
$var wire 1 >% read1Data [9] $end
$var wire 1 ?% read1Data [8] $end
$var wire 1 @% read1Data [7] $end
$var wire 1 A% read1Data [6] $end
$var wire 1 B% read1Data [5] $end
$var wire 1 C% read1Data [4] $end
$var wire 1 D% read1Data [3] $end
$var wire 1 E% read1Data [2] $end
$var wire 1 F% read1Data [1] $end
$var wire 1 G% read1Data [0] $end
$var wire 1 H% read2Data [15] $end
$var wire 1 I% read2Data [14] $end
$var wire 1 J% read2Data [13] $end
$var wire 1 K% read2Data [12] $end
$var wire 1 L% read2Data [11] $end
$var wire 1 M% read2Data [10] $end
$var wire 1 N% read2Data [9] $end
$var wire 1 O% read2Data [8] $end
$var wire 1 P% read2Data [7] $end
$var wire 1 Q% read2Data [6] $end
$var wire 1 R% read2Data [5] $end
$var wire 1 S% read2Data [4] $end
$var wire 1 T% read2Data [3] $end
$var wire 1 U% read2Data [2] $end
$var wire 1 V% read2Data [1] $end
$var wire 1 W% read2Data [0] $end
$var wire 1 X% read3Data [15] $end
$var wire 1 Y% read3Data [14] $end
$var wire 1 Z% read3Data [13] $end
$var wire 1 [% read3Data [12] $end
$var wire 1 \% read3Data [11] $end
$var wire 1 ]% read3Data [10] $end
$var wire 1 ^% read3Data [9] $end
$var wire 1 _% read3Data [8] $end
$var wire 1 `% read3Data [7] $end
$var wire 1 a% read3Data [6] $end
$var wire 1 b% read3Data [5] $end
$var wire 1 c% read3Data [4] $end
$var wire 1 d% read3Data [3] $end
$var wire 1 e% read3Data [2] $end
$var wire 1 f% read3Data [1] $end
$var wire 1 g% read3Data [0] $end
$var wire 1 h% read4Data [15] $end
$var wire 1 i% read4Data [14] $end
$var wire 1 j% read4Data [13] $end
$var wire 1 k% read4Data [12] $end
$var wire 1 l% read4Data [11] $end
$var wire 1 m% read4Data [10] $end
$var wire 1 n% read4Data [9] $end
$var wire 1 o% read4Data [8] $end
$var wire 1 p% read4Data [7] $end
$var wire 1 q% read4Data [6] $end
$var wire 1 r% read4Data [5] $end
$var wire 1 s% read4Data [4] $end
$var wire 1 t% read4Data [3] $end
$var wire 1 u% read4Data [2] $end
$var wire 1 v% read4Data [1] $end
$var wire 1 w% read4Data [0] $end
$var wire 1 x% read5Data [15] $end
$var wire 1 y% read5Data [14] $end
$var wire 1 z% read5Data [13] $end
$var wire 1 {% read5Data [12] $end
$var wire 1 |% read5Data [11] $end
$var wire 1 }% read5Data [10] $end
$var wire 1 ~% read5Data [9] $end
$var wire 1 !& read5Data [8] $end
$var wire 1 "& read5Data [7] $end
$var wire 1 #& read5Data [6] $end
$var wire 1 $& read5Data [5] $end
$var wire 1 %& read5Data [4] $end
$var wire 1 && read5Data [3] $end
$var wire 1 '& read5Data [2] $end
$var wire 1 (& read5Data [1] $end
$var wire 1 )& read5Data [0] $end
$var wire 1 *& read6Data [15] $end
$var wire 1 +& read6Data [14] $end
$var wire 1 ,& read6Data [13] $end
$var wire 1 -& read6Data [12] $end
$var wire 1 .& read6Data [11] $end
$var wire 1 /& read6Data [10] $end
$var wire 1 0& read6Data [9] $end
$var wire 1 1& read6Data [8] $end
$var wire 1 2& read6Data [7] $end
$var wire 1 3& read6Data [6] $end
$var wire 1 4& read6Data [5] $end
$var wire 1 5& read6Data [4] $end
$var wire 1 6& read6Data [3] $end
$var wire 1 7& read6Data [2] $end
$var wire 1 8& read6Data [1] $end
$var wire 1 9& read6Data [0] $end
$var wire 1 :& read7Data [15] $end
$var wire 1 ;& read7Data [14] $end
$var wire 1 <& read7Data [13] $end
$var wire 1 =& read7Data [12] $end
$var wire 1 >& read7Data [11] $end
$var wire 1 ?& read7Data [10] $end
$var wire 1 @& read7Data [9] $end
$var wire 1 A& read7Data [8] $end
$var wire 1 B& read7Data [7] $end
$var wire 1 C& read7Data [6] $end
$var wire 1 D& read7Data [5] $end
$var wire 1 E& read7Data [4] $end
$var wire 1 F& read7Data [3] $end
$var wire 1 G& read7Data [2] $end
$var wire 1 H& read7Data [1] $end
$var wire 1 I& read7Data [0] $end
$var wire 1 J& write0 $end
$var wire 1 K& write1 $end
$var wire 1 L& write2 $end
$var wire 1 M& write3 $end
$var wire 1 N& write4 $end
$var wire 1 O& write5 $end
$var wire 1 P& write6 $end
$var wire 1 Q& write7 $end

$scope module r0 $end
$var wire 1 (% readData [15] $end
$var wire 1 )% readData [14] $end
$var wire 1 *% readData [13] $end
$var wire 1 +% readData [12] $end
$var wire 1 ,% readData [11] $end
$var wire 1 -% readData [10] $end
$var wire 1 .% readData [9] $end
$var wire 1 /% readData [8] $end
$var wire 1 0% readData [7] $end
$var wire 1 1% readData [6] $end
$var wire 1 2% readData [5] $end
$var wire 1 3% readData [4] $end
$var wire 1 4% readData [3] $end
$var wire 1 5% readData [2] $end
$var wire 1 6% readData [1] $end
$var wire 1 7% readData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 J& writeEnable $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 R& in [15] $end
$var wire 1 S& in [14] $end
$var wire 1 T& in [13] $end
$var wire 1 U& in [12] $end
$var wire 1 V& in [11] $end
$var wire 1 W& in [10] $end
$var wire 1 X& in [9] $end
$var wire 1 Y& in [8] $end
$var wire 1 Z& in [7] $end
$var wire 1 [& in [6] $end
$var wire 1 \& in [5] $end
$var wire 1 ]& in [4] $end
$var wire 1 ^& in [3] $end
$var wire 1 _& in [2] $end
$var wire 1 `& in [1] $end
$var wire 1 a& in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 (% q $end
$var wire 1 R& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 b& state $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 )% q $end
$var wire 1 S& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 c& state $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 *% q $end
$var wire 1 T& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 d& state $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 +% q $end
$var wire 1 U& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 e& state $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 ,% q $end
$var wire 1 V& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 f& state $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 -% q $end
$var wire 1 W& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 g& state $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 .% q $end
$var wire 1 X& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 h& state $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 /% q $end
$var wire 1 Y& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 i& state $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 0% q $end
$var wire 1 Z& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 j& state $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 1% q $end
$var wire 1 [& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k& state $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 2% q $end
$var wire 1 \& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l& state $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 3% q $end
$var wire 1 ]& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m& state $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 4% q $end
$var wire 1 ^& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n& state $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 5% q $end
$var wire 1 _& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 o& state $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 6% q $end
$var wire 1 `& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 p& state $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 7% q $end
$var wire 1 a& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 q& state $end
$upscope $end
$upscope $end

$scope module r1 $end
$var wire 1 8% readData [15] $end
$var wire 1 9% readData [14] $end
$var wire 1 :% readData [13] $end
$var wire 1 ;% readData [12] $end
$var wire 1 <% readData [11] $end
$var wire 1 =% readData [10] $end
$var wire 1 >% readData [9] $end
$var wire 1 ?% readData [8] $end
$var wire 1 @% readData [7] $end
$var wire 1 A% readData [6] $end
$var wire 1 B% readData [5] $end
$var wire 1 C% readData [4] $end
$var wire 1 D% readData [3] $end
$var wire 1 E% readData [2] $end
$var wire 1 F% readData [1] $end
$var wire 1 G% readData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 K& writeEnable $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 r& in [15] $end
$var wire 1 s& in [14] $end
$var wire 1 t& in [13] $end
$var wire 1 u& in [12] $end
$var wire 1 v& in [11] $end
$var wire 1 w& in [10] $end
$var wire 1 x& in [9] $end
$var wire 1 y& in [8] $end
$var wire 1 z& in [7] $end
$var wire 1 {& in [6] $end
$var wire 1 |& in [5] $end
$var wire 1 }& in [4] $end
$var wire 1 ~& in [3] $end
$var wire 1 !' in [2] $end
$var wire 1 "' in [1] $end
$var wire 1 #' in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 8% q $end
$var wire 1 r& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 $' state $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 9% q $end
$var wire 1 s& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 %' state $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 :% q $end
$var wire 1 t& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 &' state $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 ;% q $end
$var wire 1 u& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 '' state $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 <% q $end
$var wire 1 v& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 (' state $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 =% q $end
$var wire 1 w& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 )' state $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 >% q $end
$var wire 1 x& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 *' state $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 ?% q $end
$var wire 1 y& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 +' state $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 @% q $end
$var wire 1 z& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ,' state $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 A% q $end
$var wire 1 {& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 -' state $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 B% q $end
$var wire 1 |& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 .' state $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 C% q $end
$var wire 1 }& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /' state $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 D% q $end
$var wire 1 ~& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 0' state $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 E% q $end
$var wire 1 !' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 1' state $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 F% q $end
$var wire 1 "' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 2' state $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 G% q $end
$var wire 1 #' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 3' state $end
$upscope $end
$upscope $end

$scope module r2 $end
$var wire 1 H% readData [15] $end
$var wire 1 I% readData [14] $end
$var wire 1 J% readData [13] $end
$var wire 1 K% readData [12] $end
$var wire 1 L% readData [11] $end
$var wire 1 M% readData [10] $end
$var wire 1 N% readData [9] $end
$var wire 1 O% readData [8] $end
$var wire 1 P% readData [7] $end
$var wire 1 Q% readData [6] $end
$var wire 1 R% readData [5] $end
$var wire 1 S% readData [4] $end
$var wire 1 T% readData [3] $end
$var wire 1 U% readData [2] $end
$var wire 1 V% readData [1] $end
$var wire 1 W% readData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 L& writeEnable $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 4' in [15] $end
$var wire 1 5' in [14] $end
$var wire 1 6' in [13] $end
$var wire 1 7' in [12] $end
$var wire 1 8' in [11] $end
$var wire 1 9' in [10] $end
$var wire 1 :' in [9] $end
$var wire 1 ;' in [8] $end
$var wire 1 <' in [7] $end
$var wire 1 =' in [6] $end
$var wire 1 >' in [5] $end
$var wire 1 ?' in [4] $end
$var wire 1 @' in [3] $end
$var wire 1 A' in [2] $end
$var wire 1 B' in [1] $end
$var wire 1 C' in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 H% q $end
$var wire 1 4' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 D' state $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 I% q $end
$var wire 1 5' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 E' state $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 J% q $end
$var wire 1 6' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 F' state $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 K% q $end
$var wire 1 7' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 G' state $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 L% q $end
$var wire 1 8' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 H' state $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 M% q $end
$var wire 1 9' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 I' state $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 N% q $end
$var wire 1 :' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 J' state $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 O% q $end
$var wire 1 ;' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 K' state $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 P% q $end
$var wire 1 <' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 L' state $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 Q% q $end
$var wire 1 =' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 M' state $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 R% q $end
$var wire 1 >' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 N' state $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 S% q $end
$var wire 1 ?' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 O' state $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 T% q $end
$var wire 1 @' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 P' state $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 U% q $end
$var wire 1 A' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Q' state $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 V% q $end
$var wire 1 B' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 R' state $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 W% q $end
$var wire 1 C' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 S' state $end
$upscope $end
$upscope $end

$scope module r3 $end
$var wire 1 X% readData [15] $end
$var wire 1 Y% readData [14] $end
$var wire 1 Z% readData [13] $end
$var wire 1 [% readData [12] $end
$var wire 1 \% readData [11] $end
$var wire 1 ]% readData [10] $end
$var wire 1 ^% readData [9] $end
$var wire 1 _% readData [8] $end
$var wire 1 `% readData [7] $end
$var wire 1 a% readData [6] $end
$var wire 1 b% readData [5] $end
$var wire 1 c% readData [4] $end
$var wire 1 d% readData [3] $end
$var wire 1 e% readData [2] $end
$var wire 1 f% readData [1] $end
$var wire 1 g% readData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 M& writeEnable $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 T' in [15] $end
$var wire 1 U' in [14] $end
$var wire 1 V' in [13] $end
$var wire 1 W' in [12] $end
$var wire 1 X' in [11] $end
$var wire 1 Y' in [10] $end
$var wire 1 Z' in [9] $end
$var wire 1 [' in [8] $end
$var wire 1 \' in [7] $end
$var wire 1 ]' in [6] $end
$var wire 1 ^' in [5] $end
$var wire 1 _' in [4] $end
$var wire 1 `' in [3] $end
$var wire 1 a' in [2] $end
$var wire 1 b' in [1] $end
$var wire 1 c' in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 X% q $end
$var wire 1 T' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 d' state $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 Y% q $end
$var wire 1 U' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 e' state $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 Z% q $end
$var wire 1 V' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 f' state $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 [% q $end
$var wire 1 W' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 g' state $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 \% q $end
$var wire 1 X' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 h' state $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 ]% q $end
$var wire 1 Y' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 i' state $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 ^% q $end
$var wire 1 Z' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 j' state $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 _% q $end
$var wire 1 [' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k' state $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 `% q $end
$var wire 1 \' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l' state $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 a% q $end
$var wire 1 ]' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m' state $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 b% q $end
$var wire 1 ^' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n' state $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 c% q $end
$var wire 1 _' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 o' state $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 d% q $end
$var wire 1 `' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 p' state $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 e% q $end
$var wire 1 a' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 q' state $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 f% q $end
$var wire 1 b' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 r' state $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 g% q $end
$var wire 1 c' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 s' state $end
$upscope $end
$upscope $end

$scope module r4 $end
$var wire 1 h% readData [15] $end
$var wire 1 i% readData [14] $end
$var wire 1 j% readData [13] $end
$var wire 1 k% readData [12] $end
$var wire 1 l% readData [11] $end
$var wire 1 m% readData [10] $end
$var wire 1 n% readData [9] $end
$var wire 1 o% readData [8] $end
$var wire 1 p% readData [7] $end
$var wire 1 q% readData [6] $end
$var wire 1 r% readData [5] $end
$var wire 1 s% readData [4] $end
$var wire 1 t% readData [3] $end
$var wire 1 u% readData [2] $end
$var wire 1 v% readData [1] $end
$var wire 1 w% readData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 N& writeEnable $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 t' in [15] $end
$var wire 1 u' in [14] $end
$var wire 1 v' in [13] $end
$var wire 1 w' in [12] $end
$var wire 1 x' in [11] $end
$var wire 1 y' in [10] $end
$var wire 1 z' in [9] $end
$var wire 1 {' in [8] $end
$var wire 1 |' in [7] $end
$var wire 1 }' in [6] $end
$var wire 1 ~' in [5] $end
$var wire 1 !( in [4] $end
$var wire 1 "( in [3] $end
$var wire 1 #( in [2] $end
$var wire 1 $( in [1] $end
$var wire 1 %( in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 h% q $end
$var wire 1 t' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 &( state $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 i% q $end
$var wire 1 u' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 '( state $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 j% q $end
$var wire 1 v' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 (( state $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 k% q $end
$var wire 1 w' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 )( state $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 l% q $end
$var wire 1 x' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 *( state $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 m% q $end
$var wire 1 y' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 +( state $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 n% q $end
$var wire 1 z' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ,( state $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 o% q $end
$var wire 1 {' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 -( state $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 p% q $end
$var wire 1 |' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 .( state $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 q% q $end
$var wire 1 }' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /( state $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 r% q $end
$var wire 1 ~' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 0( state $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 s% q $end
$var wire 1 !( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 1( state $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 t% q $end
$var wire 1 "( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 2( state $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 u% q $end
$var wire 1 #( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 3( state $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 v% q $end
$var wire 1 $( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 4( state $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 w% q $end
$var wire 1 %( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 5( state $end
$upscope $end
$upscope $end

$scope module r5 $end
$var wire 1 x% readData [15] $end
$var wire 1 y% readData [14] $end
$var wire 1 z% readData [13] $end
$var wire 1 {% readData [12] $end
$var wire 1 |% readData [11] $end
$var wire 1 }% readData [10] $end
$var wire 1 ~% readData [9] $end
$var wire 1 !& readData [8] $end
$var wire 1 "& readData [7] $end
$var wire 1 #& readData [6] $end
$var wire 1 $& readData [5] $end
$var wire 1 %& readData [4] $end
$var wire 1 && readData [3] $end
$var wire 1 '& readData [2] $end
$var wire 1 (& readData [1] $end
$var wire 1 )& readData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 O& writeEnable $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 6( in [15] $end
$var wire 1 7( in [14] $end
$var wire 1 8( in [13] $end
$var wire 1 9( in [12] $end
$var wire 1 :( in [11] $end
$var wire 1 ;( in [10] $end
$var wire 1 <( in [9] $end
$var wire 1 =( in [8] $end
$var wire 1 >( in [7] $end
$var wire 1 ?( in [6] $end
$var wire 1 @( in [5] $end
$var wire 1 A( in [4] $end
$var wire 1 B( in [3] $end
$var wire 1 C( in [2] $end
$var wire 1 D( in [1] $end
$var wire 1 E( in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 x% q $end
$var wire 1 6( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 F( state $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 y% q $end
$var wire 1 7( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 G( state $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 z% q $end
$var wire 1 8( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 H( state $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 {% q $end
$var wire 1 9( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 I( state $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 |% q $end
$var wire 1 :( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 J( state $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 }% q $end
$var wire 1 ;( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 K( state $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 ~% q $end
$var wire 1 <( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 L( state $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 !& q $end
$var wire 1 =( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 M( state $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 "& q $end
$var wire 1 >( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 N( state $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 #& q $end
$var wire 1 ?( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 O( state $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 $& q $end
$var wire 1 @( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 P( state $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 %& q $end
$var wire 1 A( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Q( state $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 && q $end
$var wire 1 B( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 R( state $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 '& q $end
$var wire 1 C( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 S( state $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 (& q $end
$var wire 1 D( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 T( state $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 )& q $end
$var wire 1 E( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 U( state $end
$upscope $end
$upscope $end

$scope module r6 $end
$var wire 1 *& readData [15] $end
$var wire 1 +& readData [14] $end
$var wire 1 ,& readData [13] $end
$var wire 1 -& readData [12] $end
$var wire 1 .& readData [11] $end
$var wire 1 /& readData [10] $end
$var wire 1 0& readData [9] $end
$var wire 1 1& readData [8] $end
$var wire 1 2& readData [7] $end
$var wire 1 3& readData [6] $end
$var wire 1 4& readData [5] $end
$var wire 1 5& readData [4] $end
$var wire 1 6& readData [3] $end
$var wire 1 7& readData [2] $end
$var wire 1 8& readData [1] $end
$var wire 1 9& readData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 P& writeEnable $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 V( in [15] $end
$var wire 1 W( in [14] $end
$var wire 1 X( in [13] $end
$var wire 1 Y( in [12] $end
$var wire 1 Z( in [11] $end
$var wire 1 [( in [10] $end
$var wire 1 \( in [9] $end
$var wire 1 ]( in [8] $end
$var wire 1 ^( in [7] $end
$var wire 1 _( in [6] $end
$var wire 1 `( in [5] $end
$var wire 1 a( in [4] $end
$var wire 1 b( in [3] $end
$var wire 1 c( in [2] $end
$var wire 1 d( in [1] $end
$var wire 1 e( in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 *& q $end
$var wire 1 V( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 f( state $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 +& q $end
$var wire 1 W( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 g( state $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 ,& q $end
$var wire 1 X( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 h( state $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 -& q $end
$var wire 1 Y( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 i( state $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 .& q $end
$var wire 1 Z( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 j( state $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 /& q $end
$var wire 1 [( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k( state $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 0& q $end
$var wire 1 \( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l( state $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 1& q $end
$var wire 1 ]( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m( state $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 2& q $end
$var wire 1 ^( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n( state $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 3& q $end
$var wire 1 _( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 o( state $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 4& q $end
$var wire 1 `( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 p( state $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 5& q $end
$var wire 1 a( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 q( state $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 6& q $end
$var wire 1 b( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 r( state $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 7& q $end
$var wire 1 c( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 s( state $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 8& q $end
$var wire 1 d( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 t( state $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 9& q $end
$var wire 1 e( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 u( state $end
$upscope $end
$upscope $end

$scope module r7 $end
$var wire 1 :& readData [15] $end
$var wire 1 ;& readData [14] $end
$var wire 1 <& readData [13] $end
$var wire 1 =& readData [12] $end
$var wire 1 >& readData [11] $end
$var wire 1 ?& readData [10] $end
$var wire 1 @& readData [9] $end
$var wire 1 A& readData [8] $end
$var wire 1 B& readData [7] $end
$var wire 1 C& readData [6] $end
$var wire 1 D& readData [5] $end
$var wire 1 E& readData [4] $end
$var wire 1 F& readData [3] $end
$var wire 1 G& readData [2] $end
$var wire 1 H& readData [1] $end
$var wire 1 I& readData [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 Q& writeEnable $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end
$var wire 1 v( in [15] $end
$var wire 1 w( in [14] $end
$var wire 1 x( in [13] $end
$var wire 1 y( in [12] $end
$var wire 1 z( in [11] $end
$var wire 1 {( in [10] $end
$var wire 1 |( in [9] $end
$var wire 1 }( in [8] $end
$var wire 1 ~( in [7] $end
$var wire 1 !) in [6] $end
$var wire 1 ") in [5] $end
$var wire 1 #) in [4] $end
$var wire 1 $) in [3] $end
$var wire 1 %) in [2] $end
$var wire 1 &) in [1] $end
$var wire 1 ') in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 :& q $end
$var wire 1 v( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 () state $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 ;& q $end
$var wire 1 w( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 )) state $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 <& q $end
$var wire 1 x( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 *) state $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 =& q $end
$var wire 1 y( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 +) state $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 >& q $end
$var wire 1 z( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ,) state $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 ?& q $end
$var wire 1 {( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 -) state $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 @& q $end
$var wire 1 |( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 .) state $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 A& q $end
$var wire 1 }( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /) state $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 B& q $end
$var wire 1 ~( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 0) state $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 C& q $end
$var wire 1 !) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 1) state $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 D& q $end
$var wire 1 ") d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 2) state $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 E& q $end
$var wire 1 #) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 3) state $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 F& q $end
$var wire 1 $) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 4) state $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 G& q $end
$var wire 1 %) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 5) state $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 H& q $end
$var wire 1 &) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 6) state $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 I& q $end
$var wire 1 ') d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 7) state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instructionExecute $end
$var wire 1 C! instr [15] $end
$var wire 1 D! instr [14] $end
$var wire 1 E! instr [13] $end
$var wire 1 F! instr [12] $end
$var wire 1 G! instr [11] $end
$var wire 1 H! instr [10] $end
$var wire 1 I! instr [9] $end
$var wire 1 J! instr [8] $end
$var wire 1 K! instr [7] $end
$var wire 1 L! instr [6] $end
$var wire 1 M! instr [5] $end
$var wire 1 N! instr [4] $end
$var wire 1 O! instr [3] $end
$var wire 1 P! instr [2] $end
$var wire 1 Q! instr [1] $end
$var wire 1 R! instr [0] $end
$var wire 1 3! next_PC_normal [15] $end
$var wire 1 4! next_PC_normal [14] $end
$var wire 1 5! next_PC_normal [13] $end
$var wire 1 6! next_PC_normal [12] $end
$var wire 1 7! next_PC_normal [11] $end
$var wire 1 8! next_PC_normal [10] $end
$var wire 1 9! next_PC_normal [9] $end
$var wire 1 :! next_PC_normal [8] $end
$var wire 1 ;! next_PC_normal [7] $end
$var wire 1 <! next_PC_normal [6] $end
$var wire 1 =! next_PC_normal [5] $end
$var wire 1 >! next_PC_normal [4] $end
$var wire 1 ?! next_PC_normal [3] $end
$var wire 1 @! next_PC_normal [2] $end
$var wire 1 A! next_PC_normal [1] $end
$var wire 1 B! next_PC_normal [0] $end
$var wire 1 %" A [15] $end
$var wire 1 &" A [14] $end
$var wire 1 '" A [13] $end
$var wire 1 (" A [12] $end
$var wire 1 )" A [11] $end
$var wire 1 *" A [10] $end
$var wire 1 +" A [9] $end
$var wire 1 ," A [8] $end
$var wire 1 -" A [7] $end
$var wire 1 ." A [6] $end
$var wire 1 /" A [5] $end
$var wire 1 0" A [4] $end
$var wire 1 1" A [3] $end
$var wire 1 2" A [2] $end
$var wire 1 3" A [1] $end
$var wire 1 4" A [0] $end
$var wire 1 5" B [15] $end
$var wire 1 6" B [14] $end
$var wire 1 7" B [13] $end
$var wire 1 8" B [12] $end
$var wire 1 9" B [11] $end
$var wire 1 :" B [10] $end
$var wire 1 ;" B [9] $end
$var wire 1 <" B [8] $end
$var wire 1 =" B [7] $end
$var wire 1 >" B [6] $end
$var wire 1 ?" B [5] $end
$var wire 1 @" B [4] $end
$var wire 1 A" B [3] $end
$var wire 1 B" B [2] $end
$var wire 1 C" B [1] $end
$var wire 1 D" B [0] $end
$var wire 1 7$ invA $end
$var wire 1 8$ invB $end
$var wire 1 H" Cin $end
$var wire 1 4$ Branching $end
$var wire 1 ;$ SESel [2] $end
$var wire 1 <$ SESel [1] $end
$var wire 1 =$ SESel [0] $end
$var wire 1 /$ ALUSrc2 $end
$var wire 1 G" reg7_En $end
$var wire 1 s! aluOutput [15] $end
$var wire 1 t! aluOutput [14] $end
$var wire 1 u! aluOutput [13] $end
$var wire 1 v! aluOutput [12] $end
$var wire 1 w! aluOutput [11] $end
$var wire 1 x! aluOutput [10] $end
$var wire 1 y! aluOutput [9] $end
$var wire 1 z! aluOutput [8] $end
$var wire 1 {! aluOutput [7] $end
$var wire 1 |! aluOutput [6] $end
$var wire 1 }! aluOutput [5] $end
$var wire 1 ~! aluOutput [4] $end
$var wire 1 !" aluOutput [3] $end
$var wire 1 "" aluOutput [2] $end
$var wire 1 #" aluOutput [1] $end
$var wire 1 $" aluOutput [0] $end
$var wire 1 #! updatedPC [15] $end
$var wire 1 $! updatedPC [14] $end
$var wire 1 %! updatedPC [13] $end
$var wire 1 &! updatedPC [12] $end
$var wire 1 '! updatedPC [11] $end
$var wire 1 (! updatedPC [10] $end
$var wire 1 )! updatedPC [9] $end
$var wire 1 *! updatedPC [8] $end
$var wire 1 +! updatedPC [7] $end
$var wire 1 ,! updatedPC [6] $end
$var wire 1 -! updatedPC [5] $end
$var wire 1 .! updatedPC [4] $end
$var wire 1 /! updatedPC [3] $end
$var wire 1 0! updatedPC [2] $end
$var wire 1 1! updatedPC [1] $end
$var wire 1 2! updatedPC [0] $end
$var wire 1 8) aluSecondInput [15] $end
$var wire 1 9) aluSecondInput [14] $end
$var wire 1 :) aluSecondInput [13] $end
$var wire 1 ;) aluSecondInput [12] $end
$var wire 1 <) aluSecondInput [11] $end
$var wire 1 =) aluSecondInput [10] $end
$var wire 1 >) aluSecondInput [9] $end
$var wire 1 ?) aluSecondInput [8] $end
$var wire 1 @) aluSecondInput [7] $end
$var wire 1 A) aluSecondInput [6] $end
$var wire 1 B) aluSecondInput [5] $end
$var wire 1 C) aluSecondInput [4] $end
$var wire 1 D) aluSecondInput [3] $end
$var wire 1 E) aluSecondInput [2] $end
$var wire 1 F) aluSecondInput [1] $end
$var wire 1 G) aluSecondInput [0] $end
$var wire 1 H) jal_and_j_enable $end
$var wire 1 I) jr_and_jalr_enable $end
$var wire 1 J) branchEN $end
$var wire 1 K) PC_Increment [15] $end
$var wire 1 L) PC_Increment [14] $end
$var wire 1 M) PC_Increment [13] $end
$var wire 1 N) PC_Increment [12] $end
$var wire 1 O) PC_Increment [11] $end
$var wire 1 P) PC_Increment [10] $end
$var wire 1 Q) PC_Increment [9] $end
$var wire 1 R) PC_Increment [8] $end
$var wire 1 S) PC_Increment [7] $end
$var wire 1 T) PC_Increment [6] $end
$var wire 1 U) PC_Increment [5] $end
$var wire 1 V) PC_Increment [4] $end
$var wire 1 W) PC_Increment [3] $end
$var wire 1 X) PC_Increment [2] $end
$var wire 1 Y) PC_Increment [1] $end
$var wire 1 Z) PC_Increment [0] $end
$var wire 1 [) branchOffset [15] $end
$var wire 1 \) branchOffset [14] $end
$var wire 1 ]) branchOffset [13] $end
$var wire 1 ^) branchOffset [12] $end
$var wire 1 _) branchOffset [11] $end
$var wire 1 `) branchOffset [10] $end
$var wire 1 a) branchOffset [9] $end
$var wire 1 b) branchOffset [8] $end
$var wire 1 c) branchOffset [7] $end
$var wire 1 d) branchOffset [6] $end
$var wire 1 e) branchOffset [5] $end
$var wire 1 f) branchOffset [4] $end
$var wire 1 g) branchOffset [3] $end
$var wire 1 h) branchOffset [2] $end
$var wire 1 i) branchOffset [1] $end
$var wire 1 j) branchOffset [0] $end
$var wire 1 k) calculatedPC [15] $end
$var wire 1 l) calculatedPC [14] $end
$var wire 1 m) calculatedPC [13] $end
$var wire 1 n) calculatedPC [12] $end
$var wire 1 o) calculatedPC [11] $end
$var wire 1 p) calculatedPC [10] $end
$var wire 1 q) calculatedPC [9] $end
$var wire 1 r) calculatedPC [8] $end
$var wire 1 s) calculatedPC [7] $end
$var wire 1 t) calculatedPC [6] $end
$var wire 1 u) calculatedPC [5] $end
$var wire 1 v) calculatedPC [4] $end
$var wire 1 w) calculatedPC [3] $end
$var wire 1 x) calculatedPC [2] $end
$var wire 1 y) calculatedPC [1] $end
$var wire 1 z) calculatedPC [0] $end
$var wire 1 {) jalr_jr_displacement [15] $end
$var wire 1 |) jalr_jr_displacement [14] $end
$var wire 1 }) jalr_jr_displacement [13] $end
$var wire 1 ~) jalr_jr_displacement [12] $end
$var wire 1 !* jalr_jr_displacement [11] $end
$var wire 1 "* jalr_jr_displacement [10] $end
$var wire 1 #* jalr_jr_displacement [9] $end
$var wire 1 $* jalr_jr_displacement [8] $end
$var wire 1 %* jalr_jr_displacement [7] $end
$var wire 1 &* jalr_jr_displacement [6] $end
$var wire 1 '* jalr_jr_displacement [5] $end
$var wire 1 (* jalr_jr_displacement [4] $end
$var wire 1 )* jalr_jr_displacement [3] $end
$var wire 1 ** jalr_jr_displacement [2] $end
$var wire 1 +* jalr_jr_displacement [1] $end
$var wire 1 ,* jalr_jr_displacement [0] $end
$var wire 1 -* cout1 $end
$var wire 1 .* cout2 $end
$var wire 1 /* zero_flag $end
$var wire 1 0* pos_flag $end
$var wire 1 1* neg_flag $end
$var wire 1 2* err $end
$var wire 1 3* out_S_extend5 [15] $end
$var wire 1 4* out_S_extend5 [14] $end
$var wire 1 5* out_S_extend5 [13] $end
$var wire 1 6* out_S_extend5 [12] $end
$var wire 1 7* out_S_extend5 [11] $end
$var wire 1 8* out_S_extend5 [10] $end
$var wire 1 9* out_S_extend5 [9] $end
$var wire 1 :* out_S_extend5 [8] $end
$var wire 1 ;* out_S_extend5 [7] $end
$var wire 1 <* out_S_extend5 [6] $end
$var wire 1 =* out_S_extend5 [5] $end
$var wire 1 >* out_S_extend5 [4] $end
$var wire 1 ?* out_S_extend5 [3] $end
$var wire 1 @* out_S_extend5 [2] $end
$var wire 1 A* out_S_extend5 [1] $end
$var wire 1 B* out_S_extend5 [0] $end
$var wire 1 C* out_S_extend8 [15] $end
$var wire 1 D* out_S_extend8 [14] $end
$var wire 1 E* out_S_extend8 [13] $end
$var wire 1 F* out_S_extend8 [12] $end
$var wire 1 G* out_S_extend8 [11] $end
$var wire 1 H* out_S_extend8 [10] $end
$var wire 1 I* out_S_extend8 [9] $end
$var wire 1 J* out_S_extend8 [8] $end
$var wire 1 K* out_S_extend8 [7] $end
$var wire 1 L* out_S_extend8 [6] $end
$var wire 1 M* out_S_extend8 [5] $end
$var wire 1 N* out_S_extend8 [4] $end
$var wire 1 O* out_S_extend8 [3] $end
$var wire 1 P* out_S_extend8 [2] $end
$var wire 1 Q* out_S_extend8 [1] $end
$var wire 1 R* out_S_extend8 [0] $end
$var wire 1 S* out_S_extend11 [15] $end
$var wire 1 T* out_S_extend11 [14] $end
$var wire 1 U* out_S_extend11 [13] $end
$var wire 1 V* out_S_extend11 [12] $end
$var wire 1 W* out_S_extend11 [11] $end
$var wire 1 X* out_S_extend11 [10] $end
$var wire 1 Y* out_S_extend11 [9] $end
$var wire 1 Z* out_S_extend11 [8] $end
$var wire 1 [* out_S_extend11 [7] $end
$var wire 1 \* out_S_extend11 [6] $end
$var wire 1 ]* out_S_extend11 [5] $end
$var wire 1 ^* out_S_extend11 [4] $end
$var wire 1 _* out_S_extend11 [3] $end
$var wire 1 `* out_S_extend11 [2] $end
$var wire 1 a* out_S_extend11 [1] $end
$var wire 1 b* out_S_extend11 [0] $end
$var wire 1 c* out_Z_extend8 [15] $end
$var wire 1 d* out_Z_extend8 [14] $end
$var wire 1 e* out_Z_extend8 [13] $end
$var wire 1 f* out_Z_extend8 [12] $end
$var wire 1 g* out_Z_extend8 [11] $end
$var wire 1 h* out_Z_extend8 [10] $end
$var wire 1 i* out_Z_extend8 [9] $end
$var wire 1 j* out_Z_extend8 [8] $end
$var wire 1 k* out_Z_extend8 [7] $end
$var wire 1 l* out_Z_extend8 [6] $end
$var wire 1 m* out_Z_extend8 [5] $end
$var wire 1 n* out_Z_extend8 [4] $end
$var wire 1 o* out_Z_extend8 [3] $end
$var wire 1 p* out_Z_extend8 [2] $end
$var wire 1 q* out_Z_extend8 [1] $end
$var wire 1 r* out_Z_extend8 [0] $end
$var wire 1 s* out_Z_extend5 [15] $end
$var wire 1 t* out_Z_extend5 [14] $end
$var wire 1 u* out_Z_extend5 [13] $end
$var wire 1 v* out_Z_extend5 [12] $end
$var wire 1 w* out_Z_extend5 [11] $end
$var wire 1 x* out_Z_extend5 [10] $end
$var wire 1 y* out_Z_extend5 [9] $end
$var wire 1 z* out_Z_extend5 [8] $end
$var wire 1 {* out_Z_extend5 [7] $end
$var wire 1 |* out_Z_extend5 [6] $end
$var wire 1 }* out_Z_extend5 [5] $end
$var wire 1 ~* out_Z_extend5 [4] $end
$var wire 1 !+ out_Z_extend5 [3] $end
$var wire 1 "+ out_Z_extend5 [2] $end
$var wire 1 #+ out_Z_extend5 [1] $end
$var wire 1 $+ out_Z_extend5 [0] $end
$var reg 16 %+ signExtendedImmediateReg [15:0] $end

$scope module signExtend5 $end
$var wire 1 N! in [4] $end
$var wire 1 O! in [3] $end
$var wire 1 P! in [2] $end
$var wire 1 Q! in [1] $end
$var wire 1 R! in [0] $end
$var wire 1 3* out [15] $end
$var wire 1 4* out [14] $end
$var wire 1 5* out [13] $end
$var wire 1 6* out [12] $end
$var wire 1 7* out [11] $end
$var wire 1 8* out [10] $end
$var wire 1 9* out [9] $end
$var wire 1 :* out [8] $end
$var wire 1 ;* out [7] $end
$var wire 1 <* out [6] $end
$var wire 1 =* out [5] $end
$var wire 1 >* out [4] $end
$var wire 1 ?* out [3] $end
$var wire 1 @* out [2] $end
$var wire 1 A* out [1] $end
$var wire 1 B* out [0] $end
$upscope $end

$scope module signExtend8 $end
$var wire 1 K! in [7] $end
$var wire 1 L! in [6] $end
$var wire 1 M! in [5] $end
$var wire 1 N! in [4] $end
$var wire 1 O! in [3] $end
$var wire 1 P! in [2] $end
$var wire 1 Q! in [1] $end
$var wire 1 R! in [0] $end
$var wire 1 C* out [15] $end
$var wire 1 D* out [14] $end
$var wire 1 E* out [13] $end
$var wire 1 F* out [12] $end
$var wire 1 G* out [11] $end
$var wire 1 H* out [10] $end
$var wire 1 I* out [9] $end
$var wire 1 J* out [8] $end
$var wire 1 K* out [7] $end
$var wire 1 L* out [6] $end
$var wire 1 M* out [5] $end
$var wire 1 N* out [4] $end
$var wire 1 O* out [3] $end
$var wire 1 P* out [2] $end
$var wire 1 Q* out [1] $end
$var wire 1 R* out [0] $end
$upscope $end

$scope module signExtend11 $end
$var wire 1 H! in [10] $end
$var wire 1 I! in [9] $end
$var wire 1 J! in [8] $end
$var wire 1 K! in [7] $end
$var wire 1 L! in [6] $end
$var wire 1 M! in [5] $end
$var wire 1 N! in [4] $end
$var wire 1 O! in [3] $end
$var wire 1 P! in [2] $end
$var wire 1 Q! in [1] $end
$var wire 1 R! in [0] $end
$var wire 1 S* out [15] $end
$var wire 1 T* out [14] $end
$var wire 1 U* out [13] $end
$var wire 1 V* out [12] $end
$var wire 1 W* out [11] $end
$var wire 1 X* out [10] $end
$var wire 1 Y* out [9] $end
$var wire 1 Z* out [8] $end
$var wire 1 [* out [7] $end
$var wire 1 \* out [6] $end
$var wire 1 ]* out [5] $end
$var wire 1 ^* out [4] $end
$var wire 1 _* out [3] $end
$var wire 1 `* out [2] $end
$var wire 1 a* out [1] $end
$var wire 1 b* out [0] $end
$upscope $end

$scope module zeroExtend8 $end
$var wire 1 K! in [7] $end
$var wire 1 L! in [6] $end
$var wire 1 M! in [5] $end
$var wire 1 N! in [4] $end
$var wire 1 O! in [3] $end
$var wire 1 P! in [2] $end
$var wire 1 Q! in [1] $end
$var wire 1 R! in [0] $end
$var wire 1 c* out [15] $end
$var wire 1 d* out [14] $end
$var wire 1 e* out [13] $end
$var wire 1 f* out [12] $end
$var wire 1 g* out [11] $end
$var wire 1 h* out [10] $end
$var wire 1 i* out [9] $end
$var wire 1 j* out [8] $end
$var wire 1 k* out [7] $end
$var wire 1 l* out [6] $end
$var wire 1 m* out [5] $end
$var wire 1 n* out [4] $end
$var wire 1 o* out [3] $end
$var wire 1 p* out [2] $end
$var wire 1 q* out [1] $end
$var wire 1 r* out [0] $end
$upscope $end

$scope module zeroExtend5 $end
$var wire 1 N! in [4] $end
$var wire 1 O! in [3] $end
$var wire 1 P! in [2] $end
$var wire 1 Q! in [1] $end
$var wire 1 R! in [0] $end
$var wire 1 s* out [15] $end
$var wire 1 t* out [14] $end
$var wire 1 u* out [13] $end
$var wire 1 v* out [12] $end
$var wire 1 w* out [11] $end
$var wire 1 x* out [10] $end
$var wire 1 y* out [9] $end
$var wire 1 z* out [8] $end
$var wire 1 {* out [7] $end
$var wire 1 |* out [6] $end
$var wire 1 }* out [5] $end
$var wire 1 ~* out [4] $end
$var wire 1 !+ out [3] $end
$var wire 1 "+ out [2] $end
$var wire 1 #+ out [1] $end
$var wire 1 $+ out [0] $end
$upscope $end

$scope module adder2 $end
$var wire 1 C* A [15] $end
$var wire 1 D* A [14] $end
$var wire 1 E* A [13] $end
$var wire 1 F* A [12] $end
$var wire 1 G* A [11] $end
$var wire 1 H* A [10] $end
$var wire 1 I* A [9] $end
$var wire 1 J* A [8] $end
$var wire 1 K* A [7] $end
$var wire 1 L* A [6] $end
$var wire 1 M* A [5] $end
$var wire 1 N* A [4] $end
$var wire 1 O* A [3] $end
$var wire 1 P* A [2] $end
$var wire 1 Q* A [1] $end
$var wire 1 R* A [0] $end
$var wire 1 %" B [15] $end
$var wire 1 &" B [14] $end
$var wire 1 '" B [13] $end
$var wire 1 (" B [12] $end
$var wire 1 )" B [11] $end
$var wire 1 *" B [10] $end
$var wire 1 +" B [9] $end
$var wire 1 ," B [8] $end
$var wire 1 -" B [7] $end
$var wire 1 ." B [6] $end
$var wire 1 /" B [5] $end
$var wire 1 0" B [4] $end
$var wire 1 1" B [3] $end
$var wire 1 2" B [2] $end
$var wire 1 3" B [1] $end
$var wire 1 4" B [0] $end
$var wire 1 &+ C_in $end
$var wire 1 {) S [15] $end
$var wire 1 |) S [14] $end
$var wire 1 }) S [13] $end
$var wire 1 ~) S [12] $end
$var wire 1 !* S [11] $end
$var wire 1 "* S [10] $end
$var wire 1 #* S [9] $end
$var wire 1 $* S [8] $end
$var wire 1 %* S [7] $end
$var wire 1 &* S [6] $end
$var wire 1 '* S [5] $end
$var wire 1 (* S [4] $end
$var wire 1 )* S [3] $end
$var wire 1 ** S [2] $end
$var wire 1 +* S [1] $end
$var wire 1 ,* S [0] $end
$var wire 1 .* C_out $end
$var wire 1 '+ C_in1 $end
$var wire 1 (+ C_in2 $end
$var wire 1 )+ C_in3 $end

$scope module rcaBit3_0 $end
$var parameter 32 *+ N $end
$var wire 1 O* A [3] $end
$var wire 1 P* A [2] $end
$var wire 1 Q* A [1] $end
$var wire 1 R* A [0] $end
$var wire 1 1" B [3] $end
$var wire 1 2" B [2] $end
$var wire 1 3" B [1] $end
$var wire 1 4" B [0] $end
$var wire 1 &+ C_in $end
$var wire 1 )* S [3] $end
$var wire 1 ** S [2] $end
$var wire 1 +* S [1] $end
$var wire 1 ,* S [0] $end
$var wire 1 '+ C_out $end
$var wire 1 ++ C_in1 $end
$var wire 1 ,+ C_in2 $end
$var wire 1 -+ C_in3 $end

$scope module rcaBit0 $end
$var wire 1 R* A $end
$var wire 1 4" B $end
$var wire 1 &+ C_in $end
$var wire 1 ,* S $end
$var wire 1 ++ C_out $end
$var wire 1 .+ A_nand_B $end
$var wire 1 /+ A_nand_Cin $end
$var wire 1 0+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 R* in1 $end
$var wire 1 4" in2 $end
$var wire 1 &+ in3 $end
$var wire 1 ,* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 R* in1 $end
$var wire 1 4" in2 $end
$var wire 1 .+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 R* in1 $end
$var wire 1 &+ in2 $end
$var wire 1 /+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 4" in1 $end
$var wire 1 &+ in2 $end
$var wire 1 0+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 .+ in1 $end
$var wire 1 /+ in2 $end
$var wire 1 0+ in3 $end
$var wire 1 ++ out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 Q* A $end
$var wire 1 3" B $end
$var wire 1 ++ C_in $end
$var wire 1 +* S $end
$var wire 1 ,+ C_out $end
$var wire 1 1+ A_nand_B $end
$var wire 1 2+ A_nand_Cin $end
$var wire 1 3+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Q* in1 $end
$var wire 1 3" in2 $end
$var wire 1 ++ in3 $end
$var wire 1 +* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Q* in1 $end
$var wire 1 3" in2 $end
$var wire 1 1+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Q* in1 $end
$var wire 1 ++ in2 $end
$var wire 1 2+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 3" in1 $end
$var wire 1 ++ in2 $end
$var wire 1 3+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 1+ in1 $end
$var wire 1 2+ in2 $end
$var wire 1 3+ in3 $end
$var wire 1 ,+ out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 P* A $end
$var wire 1 2" B $end
$var wire 1 ,+ C_in $end
$var wire 1 ** S $end
$var wire 1 -+ C_out $end
$var wire 1 4+ A_nand_B $end
$var wire 1 5+ A_nand_Cin $end
$var wire 1 6+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 P* in1 $end
$var wire 1 2" in2 $end
$var wire 1 ,+ in3 $end
$var wire 1 ** out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 P* in1 $end
$var wire 1 2" in2 $end
$var wire 1 4+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 P* in1 $end
$var wire 1 ,+ in2 $end
$var wire 1 5+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 2" in1 $end
$var wire 1 ,+ in2 $end
$var wire 1 6+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 4+ in1 $end
$var wire 1 5+ in2 $end
$var wire 1 6+ in3 $end
$var wire 1 -+ out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 O* A $end
$var wire 1 1" B $end
$var wire 1 -+ C_in $end
$var wire 1 )* S $end
$var wire 1 '+ C_out $end
$var wire 1 7+ A_nand_B $end
$var wire 1 8+ A_nand_Cin $end
$var wire 1 9+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 O* in1 $end
$var wire 1 1" in2 $end
$var wire 1 -+ in3 $end
$var wire 1 )* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 O* in1 $end
$var wire 1 1" in2 $end
$var wire 1 7+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 O* in1 $end
$var wire 1 -+ in2 $end
$var wire 1 8+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 1" in1 $end
$var wire 1 -+ in2 $end
$var wire 1 9+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 7+ in1 $end
$var wire 1 8+ in2 $end
$var wire 1 9+ in3 $end
$var wire 1 '+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit7_4 $end
$var parameter 32 :+ N $end
$var wire 1 K* A [3] $end
$var wire 1 L* A [2] $end
$var wire 1 M* A [1] $end
$var wire 1 N* A [0] $end
$var wire 1 -" B [3] $end
$var wire 1 ." B [2] $end
$var wire 1 /" B [1] $end
$var wire 1 0" B [0] $end
$var wire 1 '+ C_in $end
$var wire 1 %* S [3] $end
$var wire 1 &* S [2] $end
$var wire 1 '* S [1] $end
$var wire 1 (* S [0] $end
$var wire 1 (+ C_out $end
$var wire 1 ;+ C_in1 $end
$var wire 1 <+ C_in2 $end
$var wire 1 =+ C_in3 $end

$scope module rcaBit0 $end
$var wire 1 N* A $end
$var wire 1 0" B $end
$var wire 1 '+ C_in $end
$var wire 1 (* S $end
$var wire 1 ;+ C_out $end
$var wire 1 >+ A_nand_B $end
$var wire 1 ?+ A_nand_Cin $end
$var wire 1 @+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 N* in1 $end
$var wire 1 0" in2 $end
$var wire 1 '+ in3 $end
$var wire 1 (* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 N* in1 $end
$var wire 1 0" in2 $end
$var wire 1 >+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 N* in1 $end
$var wire 1 '+ in2 $end
$var wire 1 ?+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 0" in1 $end
$var wire 1 '+ in2 $end
$var wire 1 @+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 >+ in1 $end
$var wire 1 ?+ in2 $end
$var wire 1 @+ in3 $end
$var wire 1 ;+ out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 M* A $end
$var wire 1 /" B $end
$var wire 1 ;+ C_in $end
$var wire 1 '* S $end
$var wire 1 <+ C_out $end
$var wire 1 A+ A_nand_B $end
$var wire 1 B+ A_nand_Cin $end
$var wire 1 C+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 M* in1 $end
$var wire 1 /" in2 $end
$var wire 1 ;+ in3 $end
$var wire 1 '* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 M* in1 $end
$var wire 1 /" in2 $end
$var wire 1 A+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 M* in1 $end
$var wire 1 ;+ in2 $end
$var wire 1 B+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 /" in1 $end
$var wire 1 ;+ in2 $end
$var wire 1 C+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 A+ in1 $end
$var wire 1 B+ in2 $end
$var wire 1 C+ in3 $end
$var wire 1 <+ out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 L* A $end
$var wire 1 ." B $end
$var wire 1 <+ C_in $end
$var wire 1 &* S $end
$var wire 1 =+ C_out $end
$var wire 1 D+ A_nand_B $end
$var wire 1 E+ A_nand_Cin $end
$var wire 1 F+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 L* in1 $end
$var wire 1 ." in2 $end
$var wire 1 <+ in3 $end
$var wire 1 &* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 L* in1 $end
$var wire 1 ." in2 $end
$var wire 1 D+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 L* in1 $end
$var wire 1 <+ in2 $end
$var wire 1 E+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ." in1 $end
$var wire 1 <+ in2 $end
$var wire 1 F+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 D+ in1 $end
$var wire 1 E+ in2 $end
$var wire 1 F+ in3 $end
$var wire 1 =+ out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 K* A $end
$var wire 1 -" B $end
$var wire 1 =+ C_in $end
$var wire 1 %* S $end
$var wire 1 (+ C_out $end
$var wire 1 G+ A_nand_B $end
$var wire 1 H+ A_nand_Cin $end
$var wire 1 I+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 K* in1 $end
$var wire 1 -" in2 $end
$var wire 1 =+ in3 $end
$var wire 1 %* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 K* in1 $end
$var wire 1 -" in2 $end
$var wire 1 G+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 K* in1 $end
$var wire 1 =+ in2 $end
$var wire 1 H+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 -" in1 $end
$var wire 1 =+ in2 $end
$var wire 1 I+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 G+ in1 $end
$var wire 1 H+ in2 $end
$var wire 1 I+ in3 $end
$var wire 1 (+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit11_8 $end
$var parameter 32 J+ N $end
$var wire 1 G* A [3] $end
$var wire 1 H* A [2] $end
$var wire 1 I* A [1] $end
$var wire 1 J* A [0] $end
$var wire 1 )" B [3] $end
$var wire 1 *" B [2] $end
$var wire 1 +" B [1] $end
$var wire 1 ," B [0] $end
$var wire 1 (+ C_in $end
$var wire 1 !* S [3] $end
$var wire 1 "* S [2] $end
$var wire 1 #* S [1] $end
$var wire 1 $* S [0] $end
$var wire 1 )+ C_out $end
$var wire 1 K+ C_in1 $end
$var wire 1 L+ C_in2 $end
$var wire 1 M+ C_in3 $end

$scope module rcaBit0 $end
$var wire 1 J* A $end
$var wire 1 ," B $end
$var wire 1 (+ C_in $end
$var wire 1 $* S $end
$var wire 1 K+ C_out $end
$var wire 1 N+ A_nand_B $end
$var wire 1 O+ A_nand_Cin $end
$var wire 1 P+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 J* in1 $end
$var wire 1 ," in2 $end
$var wire 1 (+ in3 $end
$var wire 1 $* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 J* in1 $end
$var wire 1 ," in2 $end
$var wire 1 N+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 J* in1 $end
$var wire 1 (+ in2 $end
$var wire 1 O+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ," in1 $end
$var wire 1 (+ in2 $end
$var wire 1 P+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 N+ in1 $end
$var wire 1 O+ in2 $end
$var wire 1 P+ in3 $end
$var wire 1 K+ out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 I* A $end
$var wire 1 +" B $end
$var wire 1 K+ C_in $end
$var wire 1 #* S $end
$var wire 1 L+ C_out $end
$var wire 1 Q+ A_nand_B $end
$var wire 1 R+ A_nand_Cin $end
$var wire 1 S+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 I* in1 $end
$var wire 1 +" in2 $end
$var wire 1 K+ in3 $end
$var wire 1 #* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 I* in1 $end
$var wire 1 +" in2 $end
$var wire 1 Q+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 I* in1 $end
$var wire 1 K+ in2 $end
$var wire 1 R+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 +" in1 $end
$var wire 1 K+ in2 $end
$var wire 1 S+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 Q+ in1 $end
$var wire 1 R+ in2 $end
$var wire 1 S+ in3 $end
$var wire 1 L+ out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 H* A $end
$var wire 1 *" B $end
$var wire 1 L+ C_in $end
$var wire 1 "* S $end
$var wire 1 M+ C_out $end
$var wire 1 T+ A_nand_B $end
$var wire 1 U+ A_nand_Cin $end
$var wire 1 V+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 H* in1 $end
$var wire 1 *" in2 $end
$var wire 1 L+ in3 $end
$var wire 1 "* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 H* in1 $end
$var wire 1 *" in2 $end
$var wire 1 T+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 H* in1 $end
$var wire 1 L+ in2 $end
$var wire 1 U+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 *" in1 $end
$var wire 1 L+ in2 $end
$var wire 1 V+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 T+ in1 $end
$var wire 1 U+ in2 $end
$var wire 1 V+ in3 $end
$var wire 1 M+ out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 G* A $end
$var wire 1 )" B $end
$var wire 1 M+ C_in $end
$var wire 1 !* S $end
$var wire 1 )+ C_out $end
$var wire 1 W+ A_nand_B $end
$var wire 1 X+ A_nand_Cin $end
$var wire 1 Y+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 G* in1 $end
$var wire 1 )" in2 $end
$var wire 1 M+ in3 $end
$var wire 1 !* out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 G* in1 $end
$var wire 1 )" in2 $end
$var wire 1 W+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 G* in1 $end
$var wire 1 M+ in2 $end
$var wire 1 X+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 )" in1 $end
$var wire 1 M+ in2 $end
$var wire 1 Y+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 W+ in1 $end
$var wire 1 X+ in2 $end
$var wire 1 Y+ in3 $end
$var wire 1 )+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit15_12 $end
$var parameter 32 Z+ N $end
$var wire 1 C* A [3] $end
$var wire 1 D* A [2] $end
$var wire 1 E* A [1] $end
$var wire 1 F* A [0] $end
$var wire 1 %" B [3] $end
$var wire 1 &" B [2] $end
$var wire 1 '" B [1] $end
$var wire 1 (" B [0] $end
$var wire 1 )+ C_in $end
$var wire 1 {) S [3] $end
$var wire 1 |) S [2] $end
$var wire 1 }) S [1] $end
$var wire 1 ~) S [0] $end
$var wire 1 .* C_out $end
$var wire 1 [+ C_in1 $end
$var wire 1 \+ C_in2 $end
$var wire 1 ]+ C_in3 $end

$scope module rcaBit0 $end
$var wire 1 F* A $end
$var wire 1 (" B $end
$var wire 1 )+ C_in $end
$var wire 1 ~) S $end
$var wire 1 [+ C_out $end
$var wire 1 ^+ A_nand_B $end
$var wire 1 _+ A_nand_Cin $end
$var wire 1 `+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 F* in1 $end
$var wire 1 (" in2 $end
$var wire 1 )+ in3 $end
$var wire 1 ~) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 F* in1 $end
$var wire 1 (" in2 $end
$var wire 1 ^+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 F* in1 $end
$var wire 1 )+ in2 $end
$var wire 1 _+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 (" in1 $end
$var wire 1 )+ in2 $end
$var wire 1 `+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ^+ in1 $end
$var wire 1 _+ in2 $end
$var wire 1 `+ in3 $end
$var wire 1 [+ out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 E* A $end
$var wire 1 '" B $end
$var wire 1 [+ C_in $end
$var wire 1 }) S $end
$var wire 1 \+ C_out $end
$var wire 1 a+ A_nand_B $end
$var wire 1 b+ A_nand_Cin $end
$var wire 1 c+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 E* in1 $end
$var wire 1 '" in2 $end
$var wire 1 [+ in3 $end
$var wire 1 }) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 E* in1 $end
$var wire 1 '" in2 $end
$var wire 1 a+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 E* in1 $end
$var wire 1 [+ in2 $end
$var wire 1 b+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 '" in1 $end
$var wire 1 [+ in2 $end
$var wire 1 c+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 a+ in1 $end
$var wire 1 b+ in2 $end
$var wire 1 c+ in3 $end
$var wire 1 \+ out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 D* A $end
$var wire 1 &" B $end
$var wire 1 \+ C_in $end
$var wire 1 |) S $end
$var wire 1 ]+ C_out $end
$var wire 1 d+ A_nand_B $end
$var wire 1 e+ A_nand_Cin $end
$var wire 1 f+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 D* in1 $end
$var wire 1 &" in2 $end
$var wire 1 \+ in3 $end
$var wire 1 |) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 D* in1 $end
$var wire 1 &" in2 $end
$var wire 1 d+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 D* in1 $end
$var wire 1 \+ in2 $end
$var wire 1 e+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 &" in1 $end
$var wire 1 \+ in2 $end
$var wire 1 f+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 d+ in1 $end
$var wire 1 e+ in2 $end
$var wire 1 f+ in3 $end
$var wire 1 ]+ out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 C* A $end
$var wire 1 %" B $end
$var wire 1 ]+ C_in $end
$var wire 1 {) S $end
$var wire 1 .* C_out $end
$var wire 1 g+ A_nand_B $end
$var wire 1 h+ A_nand_Cin $end
$var wire 1 i+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 C* in1 $end
$var wire 1 %" in2 $end
$var wire 1 ]+ in3 $end
$var wire 1 {) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 C* in1 $end
$var wire 1 %" in2 $end
$var wire 1 g+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 C* in1 $end
$var wire 1 ]+ in2 $end
$var wire 1 h+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 %" in1 $end
$var wire 1 ]+ in2 $end
$var wire 1 i+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 g+ in1 $end
$var wire 1 h+ in2 $end
$var wire 1 i+ in3 $end
$var wire 1 .* out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module branchControl $end
$var wire 1 C! Op [4] $end
$var wire 1 D! Op [3] $end
$var wire 1 E! Op [2] $end
$var wire 1 F! Op [1] $end
$var wire 1 G! Op [0] $end
$var wire 1 0* pos_flag $end
$var wire 1 1* neg_flag $end
$var wire 1 /* zero_flag $end
$var wire 1 J) branchEN $end
$var reg 1 j+ branchEnReg $end
$var wire 1 k+ bnez $end
$var wire 1 l+ bgez $end
$upscope $end

$scope module jumpControl $end
$var parameter 1 m+ assert $end
$var parameter 1 n+ no_assert $end
$var wire 1 C! opcode [4] $end
$var wire 1 D! opcode [3] $end
$var wire 1 E! opcode [2] $end
$var wire 1 F! opcode [1] $end
$var wire 1 G! opcode [0] $end
$var reg 1 o+ jal_and_j_enable $end
$var reg 1 p+ reg7_En $end
$var reg 1 q+ jr_and_jalr_enable $end
$upscope $end

$scope module adder1 $end
$var wire 1 K) A [15] $end
$var wire 1 L) A [14] $end
$var wire 1 M) A [13] $end
$var wire 1 N) A [12] $end
$var wire 1 O) A [11] $end
$var wire 1 P) A [10] $end
$var wire 1 Q) A [9] $end
$var wire 1 R) A [8] $end
$var wire 1 S) A [7] $end
$var wire 1 T) A [6] $end
$var wire 1 U) A [5] $end
$var wire 1 V) A [4] $end
$var wire 1 W) A [3] $end
$var wire 1 X) A [2] $end
$var wire 1 Y) A [1] $end
$var wire 1 Z) A [0] $end
$var wire 1 3! B [15] $end
$var wire 1 4! B [14] $end
$var wire 1 5! B [13] $end
$var wire 1 6! B [12] $end
$var wire 1 7! B [11] $end
$var wire 1 8! B [10] $end
$var wire 1 9! B [9] $end
$var wire 1 :! B [8] $end
$var wire 1 ;! B [7] $end
$var wire 1 <! B [6] $end
$var wire 1 =! B [5] $end
$var wire 1 >! B [4] $end
$var wire 1 ?! B [3] $end
$var wire 1 @! B [2] $end
$var wire 1 A! B [1] $end
$var wire 1 B! B [0] $end
$var wire 1 r+ C_in $end
$var wire 1 k) S [15] $end
$var wire 1 l) S [14] $end
$var wire 1 m) S [13] $end
$var wire 1 n) S [12] $end
$var wire 1 o) S [11] $end
$var wire 1 p) S [10] $end
$var wire 1 q) S [9] $end
$var wire 1 r) S [8] $end
$var wire 1 s) S [7] $end
$var wire 1 t) S [6] $end
$var wire 1 u) S [5] $end
$var wire 1 v) S [4] $end
$var wire 1 w) S [3] $end
$var wire 1 x) S [2] $end
$var wire 1 y) S [1] $end
$var wire 1 z) S [0] $end
$var wire 1 -* C_out $end
$var wire 1 s+ C_in1 $end
$var wire 1 t+ C_in2 $end
$var wire 1 u+ C_in3 $end

$scope module rcaBit3_0 $end
$var parameter 32 v+ N $end
$var wire 1 W) A [3] $end
$var wire 1 X) A [2] $end
$var wire 1 Y) A [1] $end
$var wire 1 Z) A [0] $end
$var wire 1 ?! B [3] $end
$var wire 1 @! B [2] $end
$var wire 1 A! B [1] $end
$var wire 1 B! B [0] $end
$var wire 1 r+ C_in $end
$var wire 1 w) S [3] $end
$var wire 1 x) S [2] $end
$var wire 1 y) S [1] $end
$var wire 1 z) S [0] $end
$var wire 1 s+ C_out $end
$var wire 1 w+ C_in1 $end
$var wire 1 x+ C_in2 $end
$var wire 1 y+ C_in3 $end

$scope module rcaBit0 $end
$var wire 1 Z) A $end
$var wire 1 B! B $end
$var wire 1 r+ C_in $end
$var wire 1 z) S $end
$var wire 1 w+ C_out $end
$var wire 1 z+ A_nand_B $end
$var wire 1 {+ A_nand_Cin $end
$var wire 1 |+ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Z) in1 $end
$var wire 1 B! in2 $end
$var wire 1 r+ in3 $end
$var wire 1 z) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Z) in1 $end
$var wire 1 B! in2 $end
$var wire 1 z+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Z) in1 $end
$var wire 1 r+ in2 $end
$var wire 1 {+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 B! in1 $end
$var wire 1 r+ in2 $end
$var wire 1 |+ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 z+ in1 $end
$var wire 1 {+ in2 $end
$var wire 1 |+ in3 $end
$var wire 1 w+ out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 Y) A $end
$var wire 1 A! B $end
$var wire 1 w+ C_in $end
$var wire 1 y) S $end
$var wire 1 x+ C_out $end
$var wire 1 }+ A_nand_B $end
$var wire 1 ~+ A_nand_Cin $end
$var wire 1 !, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Y) in1 $end
$var wire 1 A! in2 $end
$var wire 1 w+ in3 $end
$var wire 1 y) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Y) in1 $end
$var wire 1 A! in2 $end
$var wire 1 }+ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Y) in1 $end
$var wire 1 w+ in2 $end
$var wire 1 ~+ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 A! in1 $end
$var wire 1 w+ in2 $end
$var wire 1 !, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 }+ in1 $end
$var wire 1 ~+ in2 $end
$var wire 1 !, in3 $end
$var wire 1 x+ out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 X) A $end
$var wire 1 @! B $end
$var wire 1 x+ C_in $end
$var wire 1 x) S $end
$var wire 1 y+ C_out $end
$var wire 1 ", A_nand_B $end
$var wire 1 #, A_nand_Cin $end
$var wire 1 $, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 X) in1 $end
$var wire 1 @! in2 $end
$var wire 1 x+ in3 $end
$var wire 1 x) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 X) in1 $end
$var wire 1 @! in2 $end
$var wire 1 ", out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 X) in1 $end
$var wire 1 x+ in2 $end
$var wire 1 #, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 @! in1 $end
$var wire 1 x+ in2 $end
$var wire 1 $, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ", in1 $end
$var wire 1 #, in2 $end
$var wire 1 $, in3 $end
$var wire 1 y+ out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 W) A $end
$var wire 1 ?! B $end
$var wire 1 y+ C_in $end
$var wire 1 w) S $end
$var wire 1 s+ C_out $end
$var wire 1 %, A_nand_B $end
$var wire 1 &, A_nand_Cin $end
$var wire 1 ', B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 W) in1 $end
$var wire 1 ?! in2 $end
$var wire 1 y+ in3 $end
$var wire 1 w) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 W) in1 $end
$var wire 1 ?! in2 $end
$var wire 1 %, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 W) in1 $end
$var wire 1 y+ in2 $end
$var wire 1 &, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ?! in1 $end
$var wire 1 y+ in2 $end
$var wire 1 ', out $end
$upscope $end

$scope module final_nand $end
$var wire 1 %, in1 $end
$var wire 1 &, in2 $end
$var wire 1 ', in3 $end
$var wire 1 s+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit7_4 $end
$var parameter 32 (, N $end
$var wire 1 S) A [3] $end
$var wire 1 T) A [2] $end
$var wire 1 U) A [1] $end
$var wire 1 V) A [0] $end
$var wire 1 ;! B [3] $end
$var wire 1 <! B [2] $end
$var wire 1 =! B [1] $end
$var wire 1 >! B [0] $end
$var wire 1 s+ C_in $end
$var wire 1 s) S [3] $end
$var wire 1 t) S [2] $end
$var wire 1 u) S [1] $end
$var wire 1 v) S [0] $end
$var wire 1 t+ C_out $end
$var wire 1 ), C_in1 $end
$var wire 1 *, C_in2 $end
$var wire 1 +, C_in3 $end

$scope module rcaBit0 $end
$var wire 1 V) A $end
$var wire 1 >! B $end
$var wire 1 s+ C_in $end
$var wire 1 v) S $end
$var wire 1 ), C_out $end
$var wire 1 ,, A_nand_B $end
$var wire 1 -, A_nand_Cin $end
$var wire 1 ., B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 V) in1 $end
$var wire 1 >! in2 $end
$var wire 1 s+ in3 $end
$var wire 1 v) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 V) in1 $end
$var wire 1 >! in2 $end
$var wire 1 ,, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 V) in1 $end
$var wire 1 s+ in2 $end
$var wire 1 -, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 >! in1 $end
$var wire 1 s+ in2 $end
$var wire 1 ., out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ,, in1 $end
$var wire 1 -, in2 $end
$var wire 1 ., in3 $end
$var wire 1 ), out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 U) A $end
$var wire 1 =! B $end
$var wire 1 ), C_in $end
$var wire 1 u) S $end
$var wire 1 *, C_out $end
$var wire 1 /, A_nand_B $end
$var wire 1 0, A_nand_Cin $end
$var wire 1 1, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 U) in1 $end
$var wire 1 =! in2 $end
$var wire 1 ), in3 $end
$var wire 1 u) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 U) in1 $end
$var wire 1 =! in2 $end
$var wire 1 /, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 U) in1 $end
$var wire 1 ), in2 $end
$var wire 1 0, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 =! in1 $end
$var wire 1 ), in2 $end
$var wire 1 1, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 /, in1 $end
$var wire 1 0, in2 $end
$var wire 1 1, in3 $end
$var wire 1 *, out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 T) A $end
$var wire 1 <! B $end
$var wire 1 *, C_in $end
$var wire 1 t) S $end
$var wire 1 +, C_out $end
$var wire 1 2, A_nand_B $end
$var wire 1 3, A_nand_Cin $end
$var wire 1 4, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 T) in1 $end
$var wire 1 <! in2 $end
$var wire 1 *, in3 $end
$var wire 1 t) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 T) in1 $end
$var wire 1 <! in2 $end
$var wire 1 2, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 T) in1 $end
$var wire 1 *, in2 $end
$var wire 1 3, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 <! in1 $end
$var wire 1 *, in2 $end
$var wire 1 4, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 2, in1 $end
$var wire 1 3, in2 $end
$var wire 1 4, in3 $end
$var wire 1 +, out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 S) A $end
$var wire 1 ;! B $end
$var wire 1 +, C_in $end
$var wire 1 s) S $end
$var wire 1 t+ C_out $end
$var wire 1 5, A_nand_B $end
$var wire 1 6, A_nand_Cin $end
$var wire 1 7, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 S) in1 $end
$var wire 1 ;! in2 $end
$var wire 1 +, in3 $end
$var wire 1 s) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 S) in1 $end
$var wire 1 ;! in2 $end
$var wire 1 5, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 S) in1 $end
$var wire 1 +, in2 $end
$var wire 1 6, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ;! in1 $end
$var wire 1 +, in2 $end
$var wire 1 7, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 5, in1 $end
$var wire 1 6, in2 $end
$var wire 1 7, in3 $end
$var wire 1 t+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit11_8 $end
$var parameter 32 8, N $end
$var wire 1 O) A [3] $end
$var wire 1 P) A [2] $end
$var wire 1 Q) A [1] $end
$var wire 1 R) A [0] $end
$var wire 1 7! B [3] $end
$var wire 1 8! B [2] $end
$var wire 1 9! B [1] $end
$var wire 1 :! B [0] $end
$var wire 1 t+ C_in $end
$var wire 1 o) S [3] $end
$var wire 1 p) S [2] $end
$var wire 1 q) S [1] $end
$var wire 1 r) S [0] $end
$var wire 1 u+ C_out $end
$var wire 1 9, C_in1 $end
$var wire 1 :, C_in2 $end
$var wire 1 ;, C_in3 $end

$scope module rcaBit0 $end
$var wire 1 R) A $end
$var wire 1 :! B $end
$var wire 1 t+ C_in $end
$var wire 1 r) S $end
$var wire 1 9, C_out $end
$var wire 1 <, A_nand_B $end
$var wire 1 =, A_nand_Cin $end
$var wire 1 >, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 R) in1 $end
$var wire 1 :! in2 $end
$var wire 1 t+ in3 $end
$var wire 1 r) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 R) in1 $end
$var wire 1 :! in2 $end
$var wire 1 <, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 R) in1 $end
$var wire 1 t+ in2 $end
$var wire 1 =, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 :! in1 $end
$var wire 1 t+ in2 $end
$var wire 1 >, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 <, in1 $end
$var wire 1 =, in2 $end
$var wire 1 >, in3 $end
$var wire 1 9, out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 Q) A $end
$var wire 1 9! B $end
$var wire 1 9, C_in $end
$var wire 1 q) S $end
$var wire 1 :, C_out $end
$var wire 1 ?, A_nand_B $end
$var wire 1 @, A_nand_Cin $end
$var wire 1 A, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Q) in1 $end
$var wire 1 9! in2 $end
$var wire 1 9, in3 $end
$var wire 1 q) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Q) in1 $end
$var wire 1 9! in2 $end
$var wire 1 ?, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Q) in1 $end
$var wire 1 9, in2 $end
$var wire 1 @, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 9! in1 $end
$var wire 1 9, in2 $end
$var wire 1 A, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ?, in1 $end
$var wire 1 @, in2 $end
$var wire 1 A, in3 $end
$var wire 1 :, out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 P) A $end
$var wire 1 8! B $end
$var wire 1 :, C_in $end
$var wire 1 p) S $end
$var wire 1 ;, C_out $end
$var wire 1 B, A_nand_B $end
$var wire 1 C, A_nand_Cin $end
$var wire 1 D, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 P) in1 $end
$var wire 1 8! in2 $end
$var wire 1 :, in3 $end
$var wire 1 p) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 P) in1 $end
$var wire 1 8! in2 $end
$var wire 1 B, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 P) in1 $end
$var wire 1 :, in2 $end
$var wire 1 C, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 8! in1 $end
$var wire 1 :, in2 $end
$var wire 1 D, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 B, in1 $end
$var wire 1 C, in2 $end
$var wire 1 D, in3 $end
$var wire 1 ;, out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 O) A $end
$var wire 1 7! B $end
$var wire 1 ;, C_in $end
$var wire 1 o) S $end
$var wire 1 u+ C_out $end
$var wire 1 E, A_nand_B $end
$var wire 1 F, A_nand_Cin $end
$var wire 1 G, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 O) in1 $end
$var wire 1 7! in2 $end
$var wire 1 ;, in3 $end
$var wire 1 o) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 O) in1 $end
$var wire 1 7! in2 $end
$var wire 1 E, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 O) in1 $end
$var wire 1 ;, in2 $end
$var wire 1 F, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 7! in1 $end
$var wire 1 ;, in2 $end
$var wire 1 G, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 E, in1 $end
$var wire 1 F, in2 $end
$var wire 1 G, in3 $end
$var wire 1 u+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit15_12 $end
$var parameter 32 H, N $end
$var wire 1 K) A [3] $end
$var wire 1 L) A [2] $end
$var wire 1 M) A [1] $end
$var wire 1 N) A [0] $end
$var wire 1 3! B [3] $end
$var wire 1 4! B [2] $end
$var wire 1 5! B [1] $end
$var wire 1 6! B [0] $end
$var wire 1 u+ C_in $end
$var wire 1 k) S [3] $end
$var wire 1 l) S [2] $end
$var wire 1 m) S [1] $end
$var wire 1 n) S [0] $end
$var wire 1 -* C_out $end
$var wire 1 I, C_in1 $end
$var wire 1 J, C_in2 $end
$var wire 1 K, C_in3 $end

$scope module rcaBit0 $end
$var wire 1 N) A $end
$var wire 1 6! B $end
$var wire 1 u+ C_in $end
$var wire 1 n) S $end
$var wire 1 I, C_out $end
$var wire 1 L, A_nand_B $end
$var wire 1 M, A_nand_Cin $end
$var wire 1 N, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 N) in1 $end
$var wire 1 6! in2 $end
$var wire 1 u+ in3 $end
$var wire 1 n) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 N) in1 $end
$var wire 1 6! in2 $end
$var wire 1 L, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 N) in1 $end
$var wire 1 u+ in2 $end
$var wire 1 M, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 6! in1 $end
$var wire 1 u+ in2 $end
$var wire 1 N, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 L, in1 $end
$var wire 1 M, in2 $end
$var wire 1 N, in3 $end
$var wire 1 I, out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 M) A $end
$var wire 1 5! B $end
$var wire 1 I, C_in $end
$var wire 1 m) S $end
$var wire 1 J, C_out $end
$var wire 1 O, A_nand_B $end
$var wire 1 P, A_nand_Cin $end
$var wire 1 Q, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 M) in1 $end
$var wire 1 5! in2 $end
$var wire 1 I, in3 $end
$var wire 1 m) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 M) in1 $end
$var wire 1 5! in2 $end
$var wire 1 O, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 M) in1 $end
$var wire 1 I, in2 $end
$var wire 1 P, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 5! in1 $end
$var wire 1 I, in2 $end
$var wire 1 Q, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 O, in1 $end
$var wire 1 P, in2 $end
$var wire 1 Q, in3 $end
$var wire 1 J, out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 L) A $end
$var wire 1 4! B $end
$var wire 1 J, C_in $end
$var wire 1 l) S $end
$var wire 1 K, C_out $end
$var wire 1 R, A_nand_B $end
$var wire 1 S, A_nand_Cin $end
$var wire 1 T, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 L) in1 $end
$var wire 1 4! in2 $end
$var wire 1 J, in3 $end
$var wire 1 l) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 L) in1 $end
$var wire 1 4! in2 $end
$var wire 1 R, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 L) in1 $end
$var wire 1 J, in2 $end
$var wire 1 S, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 4! in1 $end
$var wire 1 J, in2 $end
$var wire 1 T, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 R, in1 $end
$var wire 1 S, in2 $end
$var wire 1 T, in3 $end
$var wire 1 K, out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 K) A $end
$var wire 1 3! B $end
$var wire 1 K, C_in $end
$var wire 1 k) S $end
$var wire 1 -* C_out $end
$var wire 1 U, A_nand_B $end
$var wire 1 V, A_nand_Cin $end
$var wire 1 W, B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 K) in1 $end
$var wire 1 3! in2 $end
$var wire 1 K, in3 $end
$var wire 1 k) out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 K) in1 $end
$var wire 1 3! in2 $end
$var wire 1 U, out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 K) in1 $end
$var wire 1 K, in2 $end
$var wire 1 V, out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 3! in1 $end
$var wire 1 K, in2 $end
$var wire 1 W, out $end
$upscope $end

$scope module final_nand $end
$var wire 1 U, in1 $end
$var wire 1 V, in2 $end
$var wire 1 W, in3 $end
$var wire 1 -* out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module mainALU $end
$var parameter 5 X, SUBI $end
$var parameter 5 Y, ADDI $end
$var parameter 5 Z, ANDNI $end
$var parameter 5 [, XORI $end
$var parameter 5 \, ROLI $end
$var parameter 5 ], SLLI $end
$var parameter 5 ^, RORI $end
$var parameter 5 _, SRLI $end
$var parameter 5 `, ST $end
$var parameter 5 a, LD $end
$var parameter 5 b, STU $end
$var parameter 5 c, BTR $end
$var parameter 5 d, ALU_1 $end
$var parameter 2 e, ADD $end
$var parameter 2 f, SUB $end
$var parameter 2 g, XOR $end
$var parameter 2 h, ANDN $end
$var parameter 5 i, ALU_2 $end
$var parameter 2 j, ROL $end
$var parameter 2 k, SLL $end
$var parameter 2 l, ROR $end
$var parameter 2 m, SRL $end
$var parameter 5 n, SEQ $end
$var parameter 5 o, SLT $end
$var parameter 5 p, SLE $end
$var parameter 5 q, SCO $end
$var parameter 5 r, BNEZ $end
$var parameter 5 s, BEQZ $end
$var parameter 5 t, BLTZ $end
$var parameter 5 u, BGEZ $end
$var parameter 5 v, LBI $end
$var parameter 5 w, SLBI $end
$var parameter 5 x, J $end
$var parameter 5 y, JR $end
$var parameter 5 z, JAL $end
$var parameter 5 {, JALR $end
$var parameter 5 |, siic $end
$var parameter 5 }, NOP $end
$var parameter 5 ~, RTI $end
$var parameter 5 !- HALT $end
$var wire 1 %" A [15] $end
$var wire 1 &" A [14] $end
$var wire 1 '" A [13] $end
$var wire 1 (" A [12] $end
$var wire 1 )" A [11] $end
$var wire 1 *" A [10] $end
$var wire 1 +" A [9] $end
$var wire 1 ," A [8] $end
$var wire 1 -" A [7] $end
$var wire 1 ." A [6] $end
$var wire 1 /" A [5] $end
$var wire 1 0" A [4] $end
$var wire 1 1" A [3] $end
$var wire 1 2" A [2] $end
$var wire 1 3" A [1] $end
$var wire 1 4" A [0] $end
$var wire 1 8) B [15] $end
$var wire 1 9) B [14] $end
$var wire 1 :) B [13] $end
$var wire 1 ;) B [12] $end
$var wire 1 <) B [11] $end
$var wire 1 =) B [10] $end
$var wire 1 >) B [9] $end
$var wire 1 ?) B [8] $end
$var wire 1 @) B [7] $end
$var wire 1 A) B [6] $end
$var wire 1 B) B [5] $end
$var wire 1 C) B [4] $end
$var wire 1 D) B [3] $end
$var wire 1 E) B [2] $end
$var wire 1 F) B [1] $end
$var wire 1 G) B [0] $end
$var wire 1 C! Op [4] $end
$var wire 1 D! Op [3] $end
$var wire 1 E! Op [2] $end
$var wire 1 F! Op [1] $end
$var wire 1 G! Op [0] $end
$var wire 1 Q! Funct [1] $end
$var wire 1 R! Funct [0] $end
$var wire 1 7$ invA $end
$var wire 1 8$ invB $end
$var wire 1 H" Cin $end
$var wire 1 s! Out [15] $end
$var wire 1 t! Out [14] $end
$var wire 1 u! Out [13] $end
$var wire 1 v! Out [12] $end
$var wire 1 w! Out [11] $end
$var wire 1 x! Out [10] $end
$var wire 1 y! Out [9] $end
$var wire 1 z! Out [8] $end
$var wire 1 {! Out [7] $end
$var wire 1 |! Out [6] $end
$var wire 1 }! Out [5] $end
$var wire 1 ~! Out [4] $end
$var wire 1 !" Out [3] $end
$var wire 1 "" Out [2] $end
$var wire 1 #" Out [1] $end
$var wire 1 $" Out [0] $end
$var wire 1 /* Zero $end
$var wire 1 0* Pos $end
$var wire 1 1* Neg $end
$var wire 1 2* err $end
$var wire 1 "- coutRCA $end
$var wire 1 #- outRCA [15] $end
$var wire 1 $- outRCA [14] $end
$var wire 1 %- outRCA [13] $end
$var wire 1 &- outRCA [12] $end
$var wire 1 '- outRCA [11] $end
$var wire 1 (- outRCA [10] $end
$var wire 1 )- outRCA [9] $end
$var wire 1 *- outRCA [8] $end
$var wire 1 +- outRCA [7] $end
$var wire 1 ,- outRCA [6] $end
$var wire 1 -- outRCA [5] $end
$var wire 1 .- outRCA [4] $end
$var wire 1 /- outRCA [3] $end
$var wire 1 0- outRCA [2] $end
$var wire 1 1- outRCA [1] $end
$var wire 1 2- outRCA [0] $end
$var reg 16 3- outReg [15:0] $end
$var reg 1 4- errRegister $end
$var wire 1 5- outLeftRotate [15] $end
$var wire 1 6- outLeftRotate [14] $end
$var wire 1 7- outLeftRotate [13] $end
$var wire 1 8- outLeftRotate [12] $end
$var wire 1 9- outLeftRotate [11] $end
$var wire 1 :- outLeftRotate [10] $end
$var wire 1 ;- outLeftRotate [9] $end
$var wire 1 <- outLeftRotate [8] $end
$var wire 1 =- outLeftRotate [7] $end
$var wire 1 >- outLeftRotate [6] $end
$var wire 1 ?- outLeftRotate [5] $end
$var wire 1 @- outLeftRotate [4] $end
$var wire 1 A- outLeftRotate [3] $end
$var wire 1 B- outLeftRotate [2] $end
$var wire 1 C- outLeftRotate [1] $end
$var wire 1 D- outLeftRotate [0] $end
$var wire 1 E- outRightRotate [15] $end
$var wire 1 F- outRightRotate [14] $end
$var wire 1 G- outRightRotate [13] $end
$var wire 1 H- outRightRotate [12] $end
$var wire 1 I- outRightRotate [11] $end
$var wire 1 J- outRightRotate [10] $end
$var wire 1 K- outRightRotate [9] $end
$var wire 1 L- outRightRotate [8] $end
$var wire 1 M- outRightRotate [7] $end
$var wire 1 N- outRightRotate [6] $end
$var wire 1 O- outRightRotate [5] $end
$var wire 1 P- outRightRotate [4] $end
$var wire 1 Q- outRightRotate [3] $end
$var wire 1 R- outRightRotate [2] $end
$var wire 1 S- outRightRotate [1] $end
$var wire 1 T- outRightRotate [0] $end
$var wire 1 U- outLeftShift [15] $end
$var wire 1 V- outLeftShift [14] $end
$var wire 1 W- outLeftShift [13] $end
$var wire 1 X- outLeftShift [12] $end
$var wire 1 Y- outLeftShift [11] $end
$var wire 1 Z- outLeftShift [10] $end
$var wire 1 [- outLeftShift [9] $end
$var wire 1 \- outLeftShift [8] $end
$var wire 1 ]- outLeftShift [7] $end
$var wire 1 ^- outLeftShift [6] $end
$var wire 1 _- outLeftShift [5] $end
$var wire 1 `- outLeftShift [4] $end
$var wire 1 a- outLeftShift [3] $end
$var wire 1 b- outLeftShift [2] $end
$var wire 1 c- outLeftShift [1] $end
$var wire 1 d- outLeftShift [0] $end
$var wire 1 e- outRightShift [15] $end
$var wire 1 f- outRightShift [14] $end
$var wire 1 g- outRightShift [13] $end
$var wire 1 h- outRightShift [12] $end
$var wire 1 i- outRightShift [11] $end
$var wire 1 j- outRightShift [10] $end
$var wire 1 k- outRightShift [9] $end
$var wire 1 l- outRightShift [8] $end
$var wire 1 m- outRightShift [7] $end
$var wire 1 n- outRightShift [6] $end
$var wire 1 o- outRightShift [5] $end
$var wire 1 p- outRightShift [4] $end
$var wire 1 q- outRightShift [3] $end
$var wire 1 r- outRightShift [2] $end
$var wire 1 s- outRightShift [1] $end
$var wire 1 t- outRightShift [0] $end
$var wire 1 u- outBitRotate [15] $end
$var wire 1 v- outBitRotate [14] $end
$var wire 1 w- outBitRotate [13] $end
$var wire 1 x- outBitRotate [12] $end
$var wire 1 y- outBitRotate [11] $end
$var wire 1 z- outBitRotate [10] $end
$var wire 1 {- outBitRotate [9] $end
$var wire 1 |- outBitRotate [8] $end
$var wire 1 }- outBitRotate [7] $end
$var wire 1 ~- outBitRotate [6] $end
$var wire 1 !. outBitRotate [5] $end
$var wire 1 ". outBitRotate [4] $end
$var wire 1 #. outBitRotate [3] $end
$var wire 1 $. outBitRotate [2] $end
$var wire 1 %. outBitRotate [1] $end
$var wire 1 &. outBitRotate [0] $end
$var wire 1 '. newA [15] $end
$var wire 1 (. newA [14] $end
$var wire 1 ). newA [13] $end
$var wire 1 *. newA [12] $end
$var wire 1 +. newA [11] $end
$var wire 1 ,. newA [10] $end
$var wire 1 -. newA [9] $end
$var wire 1 .. newA [8] $end
$var wire 1 /. newA [7] $end
$var wire 1 0. newA [6] $end
$var wire 1 1. newA [5] $end
$var wire 1 2. newA [4] $end
$var wire 1 3. newA [3] $end
$var wire 1 4. newA [2] $end
$var wire 1 5. newA [1] $end
$var wire 1 6. newA [0] $end
$var wire 1 7. newB [15] $end
$var wire 1 8. newB [14] $end
$var wire 1 9. newB [13] $end
$var wire 1 :. newB [12] $end
$var wire 1 ;. newB [11] $end
$var wire 1 <. newB [10] $end
$var wire 1 =. newB [9] $end
$var wire 1 >. newB [8] $end
$var wire 1 ?. newB [7] $end
$var wire 1 @. newB [6] $end
$var wire 1 A. newB [5] $end
$var wire 1 B. newB [4] $end
$var wire 1 C. newB [3] $end
$var wire 1 D. newB [2] $end
$var wire 1 E. newB [1] $end
$var wire 1 F. newB [0] $end

$scope module rippleCarryAdder $end
$var wire 1 '. A [15] $end
$var wire 1 (. A [14] $end
$var wire 1 ). A [13] $end
$var wire 1 *. A [12] $end
$var wire 1 +. A [11] $end
$var wire 1 ,. A [10] $end
$var wire 1 -. A [9] $end
$var wire 1 .. A [8] $end
$var wire 1 /. A [7] $end
$var wire 1 0. A [6] $end
$var wire 1 1. A [5] $end
$var wire 1 2. A [4] $end
$var wire 1 3. A [3] $end
$var wire 1 4. A [2] $end
$var wire 1 5. A [1] $end
$var wire 1 6. A [0] $end
$var wire 1 7. B [15] $end
$var wire 1 8. B [14] $end
$var wire 1 9. B [13] $end
$var wire 1 :. B [12] $end
$var wire 1 ;. B [11] $end
$var wire 1 <. B [10] $end
$var wire 1 =. B [9] $end
$var wire 1 >. B [8] $end
$var wire 1 ?. B [7] $end
$var wire 1 @. B [6] $end
$var wire 1 A. B [5] $end
$var wire 1 B. B [4] $end
$var wire 1 C. B [3] $end
$var wire 1 D. B [2] $end
$var wire 1 E. B [1] $end
$var wire 1 F. B [0] $end
$var wire 1 H" C_in $end
$var wire 1 #- S [15] $end
$var wire 1 $- S [14] $end
$var wire 1 %- S [13] $end
$var wire 1 &- S [12] $end
$var wire 1 '- S [11] $end
$var wire 1 (- S [10] $end
$var wire 1 )- S [9] $end
$var wire 1 *- S [8] $end
$var wire 1 +- S [7] $end
$var wire 1 ,- S [6] $end
$var wire 1 -- S [5] $end
$var wire 1 .- S [4] $end
$var wire 1 /- S [3] $end
$var wire 1 0- S [2] $end
$var wire 1 1- S [1] $end
$var wire 1 2- S [0] $end
$var wire 1 "- C_out $end
$var wire 1 G. C_in1 $end
$var wire 1 H. C_in2 $end
$var wire 1 I. C_in3 $end

$scope module rcaBit3_0 $end
$var parameter 32 J. N $end
$var wire 1 3. A [3] $end
$var wire 1 4. A [2] $end
$var wire 1 5. A [1] $end
$var wire 1 6. A [0] $end
$var wire 1 C. B [3] $end
$var wire 1 D. B [2] $end
$var wire 1 E. B [1] $end
$var wire 1 F. B [0] $end
$var wire 1 H" C_in $end
$var wire 1 /- S [3] $end
$var wire 1 0- S [2] $end
$var wire 1 1- S [1] $end
$var wire 1 2- S [0] $end
$var wire 1 G. C_out $end
$var wire 1 K. C_in1 $end
$var wire 1 L. C_in2 $end
$var wire 1 M. C_in3 $end

$scope module rcaBit0 $end
$var wire 1 6. A $end
$var wire 1 F. B $end
$var wire 1 H" C_in $end
$var wire 1 2- S $end
$var wire 1 K. C_out $end
$var wire 1 N. A_nand_B $end
$var wire 1 O. A_nand_Cin $end
$var wire 1 P. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 6. in1 $end
$var wire 1 F. in2 $end
$var wire 1 H" in3 $end
$var wire 1 2- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 6. in1 $end
$var wire 1 F. in2 $end
$var wire 1 N. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 6. in1 $end
$var wire 1 H" in2 $end
$var wire 1 O. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 F. in1 $end
$var wire 1 H" in2 $end
$var wire 1 P. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 N. in1 $end
$var wire 1 O. in2 $end
$var wire 1 P. in3 $end
$var wire 1 K. out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 5. A $end
$var wire 1 E. B $end
$var wire 1 K. C_in $end
$var wire 1 1- S $end
$var wire 1 L. C_out $end
$var wire 1 Q. A_nand_B $end
$var wire 1 R. A_nand_Cin $end
$var wire 1 S. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 5. in1 $end
$var wire 1 E. in2 $end
$var wire 1 K. in3 $end
$var wire 1 1- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 5. in1 $end
$var wire 1 E. in2 $end
$var wire 1 Q. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 5. in1 $end
$var wire 1 K. in2 $end
$var wire 1 R. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 E. in1 $end
$var wire 1 K. in2 $end
$var wire 1 S. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 Q. in1 $end
$var wire 1 R. in2 $end
$var wire 1 S. in3 $end
$var wire 1 L. out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 4. A $end
$var wire 1 D. B $end
$var wire 1 L. C_in $end
$var wire 1 0- S $end
$var wire 1 M. C_out $end
$var wire 1 T. A_nand_B $end
$var wire 1 U. A_nand_Cin $end
$var wire 1 V. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 4. in1 $end
$var wire 1 D. in2 $end
$var wire 1 L. in3 $end
$var wire 1 0- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 4. in1 $end
$var wire 1 D. in2 $end
$var wire 1 T. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 4. in1 $end
$var wire 1 L. in2 $end
$var wire 1 U. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 D. in1 $end
$var wire 1 L. in2 $end
$var wire 1 V. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 T. in1 $end
$var wire 1 U. in2 $end
$var wire 1 V. in3 $end
$var wire 1 M. out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 3. A $end
$var wire 1 C. B $end
$var wire 1 M. C_in $end
$var wire 1 /- S $end
$var wire 1 G. C_out $end
$var wire 1 W. A_nand_B $end
$var wire 1 X. A_nand_Cin $end
$var wire 1 Y. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 3. in1 $end
$var wire 1 C. in2 $end
$var wire 1 M. in3 $end
$var wire 1 /- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 3. in1 $end
$var wire 1 C. in2 $end
$var wire 1 W. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 3. in1 $end
$var wire 1 M. in2 $end
$var wire 1 X. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 C. in1 $end
$var wire 1 M. in2 $end
$var wire 1 Y. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 W. in1 $end
$var wire 1 X. in2 $end
$var wire 1 Y. in3 $end
$var wire 1 G. out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit7_4 $end
$var parameter 32 Z. N $end
$var wire 1 /. A [3] $end
$var wire 1 0. A [2] $end
$var wire 1 1. A [1] $end
$var wire 1 2. A [0] $end
$var wire 1 ?. B [3] $end
$var wire 1 @. B [2] $end
$var wire 1 A. B [1] $end
$var wire 1 B. B [0] $end
$var wire 1 G. C_in $end
$var wire 1 +- S [3] $end
$var wire 1 ,- S [2] $end
$var wire 1 -- S [1] $end
$var wire 1 .- S [0] $end
$var wire 1 H. C_out $end
$var wire 1 [. C_in1 $end
$var wire 1 \. C_in2 $end
$var wire 1 ]. C_in3 $end

$scope module rcaBit0 $end
$var wire 1 2. A $end
$var wire 1 B. B $end
$var wire 1 G. C_in $end
$var wire 1 .- S $end
$var wire 1 [. C_out $end
$var wire 1 ^. A_nand_B $end
$var wire 1 _. A_nand_Cin $end
$var wire 1 `. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 2. in1 $end
$var wire 1 B. in2 $end
$var wire 1 G. in3 $end
$var wire 1 .- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 2. in1 $end
$var wire 1 B. in2 $end
$var wire 1 ^. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 2. in1 $end
$var wire 1 G. in2 $end
$var wire 1 _. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 B. in1 $end
$var wire 1 G. in2 $end
$var wire 1 `. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ^. in1 $end
$var wire 1 _. in2 $end
$var wire 1 `. in3 $end
$var wire 1 [. out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 1. A $end
$var wire 1 A. B $end
$var wire 1 [. C_in $end
$var wire 1 -- S $end
$var wire 1 \. C_out $end
$var wire 1 a. A_nand_B $end
$var wire 1 b. A_nand_Cin $end
$var wire 1 c. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 1. in1 $end
$var wire 1 A. in2 $end
$var wire 1 [. in3 $end
$var wire 1 -- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 1. in1 $end
$var wire 1 A. in2 $end
$var wire 1 a. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 1. in1 $end
$var wire 1 [. in2 $end
$var wire 1 b. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 A. in1 $end
$var wire 1 [. in2 $end
$var wire 1 c. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 a. in1 $end
$var wire 1 b. in2 $end
$var wire 1 c. in3 $end
$var wire 1 \. out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 0. A $end
$var wire 1 @. B $end
$var wire 1 \. C_in $end
$var wire 1 ,- S $end
$var wire 1 ]. C_out $end
$var wire 1 d. A_nand_B $end
$var wire 1 e. A_nand_Cin $end
$var wire 1 f. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 0. in1 $end
$var wire 1 @. in2 $end
$var wire 1 \. in3 $end
$var wire 1 ,- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 0. in1 $end
$var wire 1 @. in2 $end
$var wire 1 d. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 0. in1 $end
$var wire 1 \. in2 $end
$var wire 1 e. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 @. in1 $end
$var wire 1 \. in2 $end
$var wire 1 f. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 d. in1 $end
$var wire 1 e. in2 $end
$var wire 1 f. in3 $end
$var wire 1 ]. out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 /. A $end
$var wire 1 ?. B $end
$var wire 1 ]. C_in $end
$var wire 1 +- S $end
$var wire 1 H. C_out $end
$var wire 1 g. A_nand_B $end
$var wire 1 h. A_nand_Cin $end
$var wire 1 i. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 /. in1 $end
$var wire 1 ?. in2 $end
$var wire 1 ]. in3 $end
$var wire 1 +- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 /. in1 $end
$var wire 1 ?. in2 $end
$var wire 1 g. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 /. in1 $end
$var wire 1 ]. in2 $end
$var wire 1 h. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ?. in1 $end
$var wire 1 ]. in2 $end
$var wire 1 i. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 g. in1 $end
$var wire 1 h. in2 $end
$var wire 1 i. in3 $end
$var wire 1 H. out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit11_8 $end
$var parameter 32 j. N $end
$var wire 1 +. A [3] $end
$var wire 1 ,. A [2] $end
$var wire 1 -. A [1] $end
$var wire 1 .. A [0] $end
$var wire 1 ;. B [3] $end
$var wire 1 <. B [2] $end
$var wire 1 =. B [1] $end
$var wire 1 >. B [0] $end
$var wire 1 H. C_in $end
$var wire 1 '- S [3] $end
$var wire 1 (- S [2] $end
$var wire 1 )- S [1] $end
$var wire 1 *- S [0] $end
$var wire 1 I. C_out $end
$var wire 1 k. C_in1 $end
$var wire 1 l. C_in2 $end
$var wire 1 m. C_in3 $end

$scope module rcaBit0 $end
$var wire 1 .. A $end
$var wire 1 >. B $end
$var wire 1 H. C_in $end
$var wire 1 *- S $end
$var wire 1 k. C_out $end
$var wire 1 n. A_nand_B $end
$var wire 1 o. A_nand_Cin $end
$var wire 1 p. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 .. in1 $end
$var wire 1 >. in2 $end
$var wire 1 H. in3 $end
$var wire 1 *- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 .. in1 $end
$var wire 1 >. in2 $end
$var wire 1 n. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 .. in1 $end
$var wire 1 H. in2 $end
$var wire 1 o. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 >. in1 $end
$var wire 1 H. in2 $end
$var wire 1 p. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 n. in1 $end
$var wire 1 o. in2 $end
$var wire 1 p. in3 $end
$var wire 1 k. out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 -. A $end
$var wire 1 =. B $end
$var wire 1 k. C_in $end
$var wire 1 )- S $end
$var wire 1 l. C_out $end
$var wire 1 q. A_nand_B $end
$var wire 1 r. A_nand_Cin $end
$var wire 1 s. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 -. in1 $end
$var wire 1 =. in2 $end
$var wire 1 k. in3 $end
$var wire 1 )- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 -. in1 $end
$var wire 1 =. in2 $end
$var wire 1 q. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 -. in1 $end
$var wire 1 k. in2 $end
$var wire 1 r. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 =. in1 $end
$var wire 1 k. in2 $end
$var wire 1 s. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 q. in1 $end
$var wire 1 r. in2 $end
$var wire 1 s. in3 $end
$var wire 1 l. out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 ,. A $end
$var wire 1 <. B $end
$var wire 1 l. C_in $end
$var wire 1 (- S $end
$var wire 1 m. C_out $end
$var wire 1 t. A_nand_B $end
$var wire 1 u. A_nand_Cin $end
$var wire 1 v. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 ,. in1 $end
$var wire 1 <. in2 $end
$var wire 1 l. in3 $end
$var wire 1 (- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 ,. in1 $end
$var wire 1 <. in2 $end
$var wire 1 t. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 ,. in1 $end
$var wire 1 l. in2 $end
$var wire 1 u. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 <. in1 $end
$var wire 1 l. in2 $end
$var wire 1 v. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 t. in1 $end
$var wire 1 u. in2 $end
$var wire 1 v. in3 $end
$var wire 1 m. out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 +. A $end
$var wire 1 ;. B $end
$var wire 1 m. C_in $end
$var wire 1 '- S $end
$var wire 1 I. C_out $end
$var wire 1 w. A_nand_B $end
$var wire 1 x. A_nand_Cin $end
$var wire 1 y. B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 +. in1 $end
$var wire 1 ;. in2 $end
$var wire 1 m. in3 $end
$var wire 1 '- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 +. in1 $end
$var wire 1 ;. in2 $end
$var wire 1 w. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 +. in1 $end
$var wire 1 m. in2 $end
$var wire 1 x. out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ;. in1 $end
$var wire 1 m. in2 $end
$var wire 1 y. out $end
$upscope $end

$scope module final_nand $end
$var wire 1 w. in1 $end
$var wire 1 x. in2 $end
$var wire 1 y. in3 $end
$var wire 1 I. out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit15_12 $end
$var parameter 32 z. N $end
$var wire 1 '. A [3] $end
$var wire 1 (. A [2] $end
$var wire 1 ). A [1] $end
$var wire 1 *. A [0] $end
$var wire 1 7. B [3] $end
$var wire 1 8. B [2] $end
$var wire 1 9. B [1] $end
$var wire 1 :. B [0] $end
$var wire 1 I. C_in $end
$var wire 1 #- S [3] $end
$var wire 1 $- S [2] $end
$var wire 1 %- S [1] $end
$var wire 1 &- S [0] $end
$var wire 1 "- C_out $end
$var wire 1 {. C_in1 $end
$var wire 1 |. C_in2 $end
$var wire 1 }. C_in3 $end

$scope module rcaBit0 $end
$var wire 1 *. A $end
$var wire 1 :. B $end
$var wire 1 I. C_in $end
$var wire 1 &- S $end
$var wire 1 {. C_out $end
$var wire 1 ~. A_nand_B $end
$var wire 1 !/ A_nand_Cin $end
$var wire 1 "/ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 *. in1 $end
$var wire 1 :. in2 $end
$var wire 1 I. in3 $end
$var wire 1 &- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 *. in1 $end
$var wire 1 :. in2 $end
$var wire 1 ~. out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 *. in1 $end
$var wire 1 I. in2 $end
$var wire 1 !/ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 :. in1 $end
$var wire 1 I. in2 $end
$var wire 1 "/ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ~. in1 $end
$var wire 1 !/ in2 $end
$var wire 1 "/ in3 $end
$var wire 1 {. out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 ). A $end
$var wire 1 9. B $end
$var wire 1 {. C_in $end
$var wire 1 %- S $end
$var wire 1 |. C_out $end
$var wire 1 #/ A_nand_B $end
$var wire 1 $/ A_nand_Cin $end
$var wire 1 %/ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 ). in1 $end
$var wire 1 9. in2 $end
$var wire 1 {. in3 $end
$var wire 1 %- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 ). in1 $end
$var wire 1 9. in2 $end
$var wire 1 #/ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 ). in1 $end
$var wire 1 {. in2 $end
$var wire 1 $/ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 9. in1 $end
$var wire 1 {. in2 $end
$var wire 1 %/ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 #/ in1 $end
$var wire 1 $/ in2 $end
$var wire 1 %/ in3 $end
$var wire 1 |. out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 (. A $end
$var wire 1 8. B $end
$var wire 1 |. C_in $end
$var wire 1 $- S $end
$var wire 1 }. C_out $end
$var wire 1 &/ A_nand_B $end
$var wire 1 '/ A_nand_Cin $end
$var wire 1 (/ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 (. in1 $end
$var wire 1 8. in2 $end
$var wire 1 |. in3 $end
$var wire 1 $- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 (. in1 $end
$var wire 1 8. in2 $end
$var wire 1 &/ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 (. in1 $end
$var wire 1 |. in2 $end
$var wire 1 '/ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 8. in1 $end
$var wire 1 |. in2 $end
$var wire 1 (/ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 &/ in1 $end
$var wire 1 '/ in2 $end
$var wire 1 (/ in3 $end
$var wire 1 }. out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 '. A $end
$var wire 1 7. B $end
$var wire 1 }. C_in $end
$var wire 1 #- S $end
$var wire 1 "- C_out $end
$var wire 1 )/ A_nand_B $end
$var wire 1 */ A_nand_Cin $end
$var wire 1 +/ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 '. in1 $end
$var wire 1 7. in2 $end
$var wire 1 }. in3 $end
$var wire 1 #- out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 '. in1 $end
$var wire 1 7. in2 $end
$var wire 1 )/ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 '. in1 $end
$var wire 1 }. in2 $end
$var wire 1 */ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 7. in1 $end
$var wire 1 }. in2 $end
$var wire 1 +/ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 )/ in1 $end
$var wire 1 */ in2 $end
$var wire 1 +/ in3 $end
$var wire 1 "- out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lr1 $end
$var parameter 32 ,/ N $end
$var parameter 32 -/ C $end
$var wire 1 %" In [15] $end
$var wire 1 &" In [14] $end
$var wire 1 '" In [13] $end
$var wire 1 (" In [12] $end
$var wire 1 )" In [11] $end
$var wire 1 *" In [10] $end
$var wire 1 +" In [9] $end
$var wire 1 ," In [8] $end
$var wire 1 -" In [7] $end
$var wire 1 ." In [6] $end
$var wire 1 /" In [5] $end
$var wire 1 0" In [4] $end
$var wire 1 1" In [3] $end
$var wire 1 2" In [2] $end
$var wire 1 3" In [1] $end
$var wire 1 4" In [0] $end
$var wire 1 D) Cnt [3] $end
$var wire 1 E) Cnt [2] $end
$var wire 1 F) Cnt [1] $end
$var wire 1 G) Cnt [0] $end
$var wire 1 5- Out [15] $end
$var wire 1 6- Out [14] $end
$var wire 1 7- Out [13] $end
$var wire 1 8- Out [12] $end
$var wire 1 9- Out [11] $end
$var wire 1 :- Out [10] $end
$var wire 1 ;- Out [9] $end
$var wire 1 <- Out [8] $end
$var wire 1 =- Out [7] $end
$var wire 1 >- Out [6] $end
$var wire 1 ?- Out [5] $end
$var wire 1 @- Out [4] $end
$var wire 1 A- Out [3] $end
$var wire 1 B- Out [2] $end
$var wire 1 C- Out [1] $end
$var wire 1 D- Out [0] $end
$var wire 1 ./ leftRotate8 [15] $end
$var wire 1 // leftRotate8 [14] $end
$var wire 1 0/ leftRotate8 [13] $end
$var wire 1 1/ leftRotate8 [12] $end
$var wire 1 2/ leftRotate8 [11] $end
$var wire 1 3/ leftRotate8 [10] $end
$var wire 1 4/ leftRotate8 [9] $end
$var wire 1 5/ leftRotate8 [8] $end
$var wire 1 6/ leftRotate8 [7] $end
$var wire 1 7/ leftRotate8 [6] $end
$var wire 1 8/ leftRotate8 [5] $end
$var wire 1 9/ leftRotate8 [4] $end
$var wire 1 :/ leftRotate8 [3] $end
$var wire 1 ;/ leftRotate8 [2] $end
$var wire 1 </ leftRotate8 [1] $end
$var wire 1 =/ leftRotate8 [0] $end
$var wire 1 >/ leftRotate8_out [15] $end
$var wire 1 ?/ leftRotate8_out [14] $end
$var wire 1 @/ leftRotate8_out [13] $end
$var wire 1 A/ leftRotate8_out [12] $end
$var wire 1 B/ leftRotate8_out [11] $end
$var wire 1 C/ leftRotate8_out [10] $end
$var wire 1 D/ leftRotate8_out [9] $end
$var wire 1 E/ leftRotate8_out [8] $end
$var wire 1 F/ leftRotate8_out [7] $end
$var wire 1 G/ leftRotate8_out [6] $end
$var wire 1 H/ leftRotate8_out [5] $end
$var wire 1 I/ leftRotate8_out [4] $end
$var wire 1 J/ leftRotate8_out [3] $end
$var wire 1 K/ leftRotate8_out [2] $end
$var wire 1 L/ leftRotate8_out [1] $end
$var wire 1 M/ leftRotate8_out [0] $end
$var wire 1 N/ leftRotate4 [15] $end
$var wire 1 O/ leftRotate4 [14] $end
$var wire 1 P/ leftRotate4 [13] $end
$var wire 1 Q/ leftRotate4 [12] $end
$var wire 1 R/ leftRotate4 [11] $end
$var wire 1 S/ leftRotate4 [10] $end
$var wire 1 T/ leftRotate4 [9] $end
$var wire 1 U/ leftRotate4 [8] $end
$var wire 1 V/ leftRotate4 [7] $end
$var wire 1 W/ leftRotate4 [6] $end
$var wire 1 X/ leftRotate4 [5] $end
$var wire 1 Y/ leftRotate4 [4] $end
$var wire 1 Z/ leftRotate4 [3] $end
$var wire 1 [/ leftRotate4 [2] $end
$var wire 1 \/ leftRotate4 [1] $end
$var wire 1 ]/ leftRotate4 [0] $end
$var wire 1 ^/ leftRotate4_out [15] $end
$var wire 1 _/ leftRotate4_out [14] $end
$var wire 1 `/ leftRotate4_out [13] $end
$var wire 1 a/ leftRotate4_out [12] $end
$var wire 1 b/ leftRotate4_out [11] $end
$var wire 1 c/ leftRotate4_out [10] $end
$var wire 1 d/ leftRotate4_out [9] $end
$var wire 1 e/ leftRotate4_out [8] $end
$var wire 1 f/ leftRotate4_out [7] $end
$var wire 1 g/ leftRotate4_out [6] $end
$var wire 1 h/ leftRotate4_out [5] $end
$var wire 1 i/ leftRotate4_out [4] $end
$var wire 1 j/ leftRotate4_out [3] $end
$var wire 1 k/ leftRotate4_out [2] $end
$var wire 1 l/ leftRotate4_out [1] $end
$var wire 1 m/ leftRotate4_out [0] $end
$var wire 1 n/ leftRotate2 [15] $end
$var wire 1 o/ leftRotate2 [14] $end
$var wire 1 p/ leftRotate2 [13] $end
$var wire 1 q/ leftRotate2 [12] $end
$var wire 1 r/ leftRotate2 [11] $end
$var wire 1 s/ leftRotate2 [10] $end
$var wire 1 t/ leftRotate2 [9] $end
$var wire 1 u/ leftRotate2 [8] $end
$var wire 1 v/ leftRotate2 [7] $end
$var wire 1 w/ leftRotate2 [6] $end
$var wire 1 x/ leftRotate2 [5] $end
$var wire 1 y/ leftRotate2 [4] $end
$var wire 1 z/ leftRotate2 [3] $end
$var wire 1 {/ leftRotate2 [2] $end
$var wire 1 |/ leftRotate2 [1] $end
$var wire 1 }/ leftRotate2 [0] $end
$var wire 1 ~/ leftRotate2_out [15] $end
$var wire 1 !0 leftRotate2_out [14] $end
$var wire 1 "0 leftRotate2_out [13] $end
$var wire 1 #0 leftRotate2_out [12] $end
$var wire 1 $0 leftRotate2_out [11] $end
$var wire 1 %0 leftRotate2_out [10] $end
$var wire 1 &0 leftRotate2_out [9] $end
$var wire 1 '0 leftRotate2_out [8] $end
$var wire 1 (0 leftRotate2_out [7] $end
$var wire 1 )0 leftRotate2_out [6] $end
$var wire 1 *0 leftRotate2_out [5] $end
$var wire 1 +0 leftRotate2_out [4] $end
$var wire 1 ,0 leftRotate2_out [3] $end
$var wire 1 -0 leftRotate2_out [2] $end
$var wire 1 .0 leftRotate2_out [1] $end
$var wire 1 /0 leftRotate2_out [0] $end
$var wire 1 00 leftRotate1 [15] $end
$var wire 1 10 leftRotate1 [14] $end
$var wire 1 20 leftRotate1 [13] $end
$var wire 1 30 leftRotate1 [12] $end
$var wire 1 40 leftRotate1 [11] $end
$var wire 1 50 leftRotate1 [10] $end
$var wire 1 60 leftRotate1 [9] $end
$var wire 1 70 leftRotate1 [8] $end
$var wire 1 80 leftRotate1 [7] $end
$var wire 1 90 leftRotate1 [6] $end
$var wire 1 :0 leftRotate1 [5] $end
$var wire 1 ;0 leftRotate1 [4] $end
$var wire 1 <0 leftRotate1 [3] $end
$var wire 1 =0 leftRotate1 [2] $end
$var wire 1 >0 leftRotate1 [1] $end
$var wire 1 ?0 leftRotate1 [0] $end

$scope module rotate8_mux $end
$var parameter 32 @0 NUM_BITS $end
$var wire 1 %" InA [15] $end
$var wire 1 &" InA [14] $end
$var wire 1 '" InA [13] $end
$var wire 1 (" InA [12] $end
$var wire 1 )" InA [11] $end
$var wire 1 *" InA [10] $end
$var wire 1 +" InA [9] $end
$var wire 1 ," InA [8] $end
$var wire 1 -" InA [7] $end
$var wire 1 ." InA [6] $end
$var wire 1 /" InA [5] $end
$var wire 1 0" InA [4] $end
$var wire 1 1" InA [3] $end
$var wire 1 2" InA [2] $end
$var wire 1 3" InA [1] $end
$var wire 1 4" InA [0] $end
$var wire 1 ./ InB [15] $end
$var wire 1 // InB [14] $end
$var wire 1 0/ InB [13] $end
$var wire 1 1/ InB [12] $end
$var wire 1 2/ InB [11] $end
$var wire 1 3/ InB [10] $end
$var wire 1 4/ InB [9] $end
$var wire 1 5/ InB [8] $end
$var wire 1 6/ InB [7] $end
$var wire 1 7/ InB [6] $end
$var wire 1 8/ InB [5] $end
$var wire 1 9/ InB [4] $end
$var wire 1 :/ InB [3] $end
$var wire 1 ;/ InB [2] $end
$var wire 1 </ InB [1] $end
$var wire 1 =/ InB [0] $end
$var wire 1 D) S $end
$var wire 1 >/ Out [15] $end
$var wire 1 ?/ Out [14] $end
$var wire 1 @/ Out [13] $end
$var wire 1 A/ Out [12] $end
$var wire 1 B/ Out [11] $end
$var wire 1 C/ Out [10] $end
$var wire 1 D/ Out [9] $end
$var wire 1 E/ Out [8] $end
$var wire 1 F/ Out [7] $end
$var wire 1 G/ Out [6] $end
$var wire 1 H/ Out [5] $end
$var wire 1 I/ Out [4] $end
$var wire 1 J/ Out [3] $end
$var wire 1 K/ Out [2] $end
$var wire 1 L/ Out [1] $end
$var wire 1 M/ Out [0] $end
$upscope $end

$scope module rotate4_mux $end
$var parameter 32 A0 NUM_BITS $end
$var wire 1 >/ InA [15] $end
$var wire 1 ?/ InA [14] $end
$var wire 1 @/ InA [13] $end
$var wire 1 A/ InA [12] $end
$var wire 1 B/ InA [11] $end
$var wire 1 C/ InA [10] $end
$var wire 1 D/ InA [9] $end
$var wire 1 E/ InA [8] $end
$var wire 1 F/ InA [7] $end
$var wire 1 G/ InA [6] $end
$var wire 1 H/ InA [5] $end
$var wire 1 I/ InA [4] $end
$var wire 1 J/ InA [3] $end
$var wire 1 K/ InA [2] $end
$var wire 1 L/ InA [1] $end
$var wire 1 M/ InA [0] $end
$var wire 1 N/ InB [15] $end
$var wire 1 O/ InB [14] $end
$var wire 1 P/ InB [13] $end
$var wire 1 Q/ InB [12] $end
$var wire 1 R/ InB [11] $end
$var wire 1 S/ InB [10] $end
$var wire 1 T/ InB [9] $end
$var wire 1 U/ InB [8] $end
$var wire 1 V/ InB [7] $end
$var wire 1 W/ InB [6] $end
$var wire 1 X/ InB [5] $end
$var wire 1 Y/ InB [4] $end
$var wire 1 Z/ InB [3] $end
$var wire 1 [/ InB [2] $end
$var wire 1 \/ InB [1] $end
$var wire 1 ]/ InB [0] $end
$var wire 1 E) S $end
$var wire 1 ^/ Out [15] $end
$var wire 1 _/ Out [14] $end
$var wire 1 `/ Out [13] $end
$var wire 1 a/ Out [12] $end
$var wire 1 b/ Out [11] $end
$var wire 1 c/ Out [10] $end
$var wire 1 d/ Out [9] $end
$var wire 1 e/ Out [8] $end
$var wire 1 f/ Out [7] $end
$var wire 1 g/ Out [6] $end
$var wire 1 h/ Out [5] $end
$var wire 1 i/ Out [4] $end
$var wire 1 j/ Out [3] $end
$var wire 1 k/ Out [2] $end
$var wire 1 l/ Out [1] $end
$var wire 1 m/ Out [0] $end
$upscope $end

$scope module rotate2_mux $end
$var parameter 32 B0 NUM_BITS $end
$var wire 1 ^/ InA [15] $end
$var wire 1 _/ InA [14] $end
$var wire 1 `/ InA [13] $end
$var wire 1 a/ InA [12] $end
$var wire 1 b/ InA [11] $end
$var wire 1 c/ InA [10] $end
$var wire 1 d/ InA [9] $end
$var wire 1 e/ InA [8] $end
$var wire 1 f/ InA [7] $end
$var wire 1 g/ InA [6] $end
$var wire 1 h/ InA [5] $end
$var wire 1 i/ InA [4] $end
$var wire 1 j/ InA [3] $end
$var wire 1 k/ InA [2] $end
$var wire 1 l/ InA [1] $end
$var wire 1 m/ InA [0] $end
$var wire 1 n/ InB [15] $end
$var wire 1 o/ InB [14] $end
$var wire 1 p/ InB [13] $end
$var wire 1 q/ InB [12] $end
$var wire 1 r/ InB [11] $end
$var wire 1 s/ InB [10] $end
$var wire 1 t/ InB [9] $end
$var wire 1 u/ InB [8] $end
$var wire 1 v/ InB [7] $end
$var wire 1 w/ InB [6] $end
$var wire 1 x/ InB [5] $end
$var wire 1 y/ InB [4] $end
$var wire 1 z/ InB [3] $end
$var wire 1 {/ InB [2] $end
$var wire 1 |/ InB [1] $end
$var wire 1 }/ InB [0] $end
$var wire 1 F) S $end
$var wire 1 ~/ Out [15] $end
$var wire 1 !0 Out [14] $end
$var wire 1 "0 Out [13] $end
$var wire 1 #0 Out [12] $end
$var wire 1 $0 Out [11] $end
$var wire 1 %0 Out [10] $end
$var wire 1 &0 Out [9] $end
$var wire 1 '0 Out [8] $end
$var wire 1 (0 Out [7] $end
$var wire 1 )0 Out [6] $end
$var wire 1 *0 Out [5] $end
$var wire 1 +0 Out [4] $end
$var wire 1 ,0 Out [3] $end
$var wire 1 -0 Out [2] $end
$var wire 1 .0 Out [1] $end
$var wire 1 /0 Out [0] $end
$upscope $end

$scope module rotate1_mux $end
$var parameter 32 C0 NUM_BITS $end
$var wire 1 ~/ InA [15] $end
$var wire 1 !0 InA [14] $end
$var wire 1 "0 InA [13] $end
$var wire 1 #0 InA [12] $end
$var wire 1 $0 InA [11] $end
$var wire 1 %0 InA [10] $end
$var wire 1 &0 InA [9] $end
$var wire 1 '0 InA [8] $end
$var wire 1 (0 InA [7] $end
$var wire 1 )0 InA [6] $end
$var wire 1 *0 InA [5] $end
$var wire 1 +0 InA [4] $end
$var wire 1 ,0 InA [3] $end
$var wire 1 -0 InA [2] $end
$var wire 1 .0 InA [1] $end
$var wire 1 /0 InA [0] $end
$var wire 1 00 InB [15] $end
$var wire 1 10 InB [14] $end
$var wire 1 20 InB [13] $end
$var wire 1 30 InB [12] $end
$var wire 1 40 InB [11] $end
$var wire 1 50 InB [10] $end
$var wire 1 60 InB [9] $end
$var wire 1 70 InB [8] $end
$var wire 1 80 InB [7] $end
$var wire 1 90 InB [6] $end
$var wire 1 :0 InB [5] $end
$var wire 1 ;0 InB [4] $end
$var wire 1 <0 InB [3] $end
$var wire 1 =0 InB [2] $end
$var wire 1 >0 InB [1] $end
$var wire 1 ?0 InB [0] $end
$var wire 1 G) S $end
$var wire 1 5- Out [15] $end
$var wire 1 6- Out [14] $end
$var wire 1 7- Out [13] $end
$var wire 1 8- Out [12] $end
$var wire 1 9- Out [11] $end
$var wire 1 :- Out [10] $end
$var wire 1 ;- Out [9] $end
$var wire 1 <- Out [8] $end
$var wire 1 =- Out [7] $end
$var wire 1 >- Out [6] $end
$var wire 1 ?- Out [5] $end
$var wire 1 @- Out [4] $end
$var wire 1 A- Out [3] $end
$var wire 1 B- Out [2] $end
$var wire 1 C- Out [1] $end
$var wire 1 D- Out [0] $end
$upscope $end
$upscope $end

$scope module rr1 $end
$var parameter 32 D0 N $end
$var parameter 32 E0 C $end
$var wire 1 %" In [15] $end
$var wire 1 &" In [14] $end
$var wire 1 '" In [13] $end
$var wire 1 (" In [12] $end
$var wire 1 )" In [11] $end
$var wire 1 *" In [10] $end
$var wire 1 +" In [9] $end
$var wire 1 ," In [8] $end
$var wire 1 -" In [7] $end
$var wire 1 ." In [6] $end
$var wire 1 /" In [5] $end
$var wire 1 0" In [4] $end
$var wire 1 1" In [3] $end
$var wire 1 2" In [2] $end
$var wire 1 3" In [1] $end
$var wire 1 4" In [0] $end
$var wire 1 D) Cnt [3] $end
$var wire 1 E) Cnt [2] $end
$var wire 1 F) Cnt [1] $end
$var wire 1 G) Cnt [0] $end
$var wire 1 E- Out [15] $end
$var wire 1 F- Out [14] $end
$var wire 1 G- Out [13] $end
$var wire 1 H- Out [12] $end
$var wire 1 I- Out [11] $end
$var wire 1 J- Out [10] $end
$var wire 1 K- Out [9] $end
$var wire 1 L- Out [8] $end
$var wire 1 M- Out [7] $end
$var wire 1 N- Out [6] $end
$var wire 1 O- Out [5] $end
$var wire 1 P- Out [4] $end
$var wire 1 Q- Out [3] $end
$var wire 1 R- Out [2] $end
$var wire 1 S- Out [1] $end
$var wire 1 T- Out [0] $end
$var wire 1 F0 rightRotate8 [15] $end
$var wire 1 G0 rightRotate8 [14] $end
$var wire 1 H0 rightRotate8 [13] $end
$var wire 1 I0 rightRotate8 [12] $end
$var wire 1 J0 rightRotate8 [11] $end
$var wire 1 K0 rightRotate8 [10] $end
$var wire 1 L0 rightRotate8 [9] $end
$var wire 1 M0 rightRotate8 [8] $end
$var wire 1 N0 rightRotate8 [7] $end
$var wire 1 O0 rightRotate8 [6] $end
$var wire 1 P0 rightRotate8 [5] $end
$var wire 1 Q0 rightRotate8 [4] $end
$var wire 1 R0 rightRotate8 [3] $end
$var wire 1 S0 rightRotate8 [2] $end
$var wire 1 T0 rightRotate8 [1] $end
$var wire 1 U0 rightRotate8 [0] $end
$var wire 1 V0 rightRotate8_out [15] $end
$var wire 1 W0 rightRotate8_out [14] $end
$var wire 1 X0 rightRotate8_out [13] $end
$var wire 1 Y0 rightRotate8_out [12] $end
$var wire 1 Z0 rightRotate8_out [11] $end
$var wire 1 [0 rightRotate8_out [10] $end
$var wire 1 \0 rightRotate8_out [9] $end
$var wire 1 ]0 rightRotate8_out [8] $end
$var wire 1 ^0 rightRotate8_out [7] $end
$var wire 1 _0 rightRotate8_out [6] $end
$var wire 1 `0 rightRotate8_out [5] $end
$var wire 1 a0 rightRotate8_out [4] $end
$var wire 1 b0 rightRotate8_out [3] $end
$var wire 1 c0 rightRotate8_out [2] $end
$var wire 1 d0 rightRotate8_out [1] $end
$var wire 1 e0 rightRotate8_out [0] $end
$var wire 1 f0 rightRotate4 [15] $end
$var wire 1 g0 rightRotate4 [14] $end
$var wire 1 h0 rightRotate4 [13] $end
$var wire 1 i0 rightRotate4 [12] $end
$var wire 1 j0 rightRotate4 [11] $end
$var wire 1 k0 rightRotate4 [10] $end
$var wire 1 l0 rightRotate4 [9] $end
$var wire 1 m0 rightRotate4 [8] $end
$var wire 1 n0 rightRotate4 [7] $end
$var wire 1 o0 rightRotate4 [6] $end
$var wire 1 p0 rightRotate4 [5] $end
$var wire 1 q0 rightRotate4 [4] $end
$var wire 1 r0 rightRotate4 [3] $end
$var wire 1 s0 rightRotate4 [2] $end
$var wire 1 t0 rightRotate4 [1] $end
$var wire 1 u0 rightRotate4 [0] $end
$var wire 1 v0 rightRotate4_out [15] $end
$var wire 1 w0 rightRotate4_out [14] $end
$var wire 1 x0 rightRotate4_out [13] $end
$var wire 1 y0 rightRotate4_out [12] $end
$var wire 1 z0 rightRotate4_out [11] $end
$var wire 1 {0 rightRotate4_out [10] $end
$var wire 1 |0 rightRotate4_out [9] $end
$var wire 1 }0 rightRotate4_out [8] $end
$var wire 1 ~0 rightRotate4_out [7] $end
$var wire 1 !1 rightRotate4_out [6] $end
$var wire 1 "1 rightRotate4_out [5] $end
$var wire 1 #1 rightRotate4_out [4] $end
$var wire 1 $1 rightRotate4_out [3] $end
$var wire 1 %1 rightRotate4_out [2] $end
$var wire 1 &1 rightRotate4_out [1] $end
$var wire 1 '1 rightRotate4_out [0] $end
$var wire 1 (1 rightRotate2 [15] $end
$var wire 1 )1 rightRotate2 [14] $end
$var wire 1 *1 rightRotate2 [13] $end
$var wire 1 +1 rightRotate2 [12] $end
$var wire 1 ,1 rightRotate2 [11] $end
$var wire 1 -1 rightRotate2 [10] $end
$var wire 1 .1 rightRotate2 [9] $end
$var wire 1 /1 rightRotate2 [8] $end
$var wire 1 01 rightRotate2 [7] $end
$var wire 1 11 rightRotate2 [6] $end
$var wire 1 21 rightRotate2 [5] $end
$var wire 1 31 rightRotate2 [4] $end
$var wire 1 41 rightRotate2 [3] $end
$var wire 1 51 rightRotate2 [2] $end
$var wire 1 61 rightRotate2 [1] $end
$var wire 1 71 rightRotate2 [0] $end
$var wire 1 81 rightRotate2_out [15] $end
$var wire 1 91 rightRotate2_out [14] $end
$var wire 1 :1 rightRotate2_out [13] $end
$var wire 1 ;1 rightRotate2_out [12] $end
$var wire 1 <1 rightRotate2_out [11] $end
$var wire 1 =1 rightRotate2_out [10] $end
$var wire 1 >1 rightRotate2_out [9] $end
$var wire 1 ?1 rightRotate2_out [8] $end
$var wire 1 @1 rightRotate2_out [7] $end
$var wire 1 A1 rightRotate2_out [6] $end
$var wire 1 B1 rightRotate2_out [5] $end
$var wire 1 C1 rightRotate2_out [4] $end
$var wire 1 D1 rightRotate2_out [3] $end
$var wire 1 E1 rightRotate2_out [2] $end
$var wire 1 F1 rightRotate2_out [1] $end
$var wire 1 G1 rightRotate2_out [0] $end
$var wire 1 H1 rightRotate1 [15] $end
$var wire 1 I1 rightRotate1 [14] $end
$var wire 1 J1 rightRotate1 [13] $end
$var wire 1 K1 rightRotate1 [12] $end
$var wire 1 L1 rightRotate1 [11] $end
$var wire 1 M1 rightRotate1 [10] $end
$var wire 1 N1 rightRotate1 [9] $end
$var wire 1 O1 rightRotate1 [8] $end
$var wire 1 P1 rightRotate1 [7] $end
$var wire 1 Q1 rightRotate1 [6] $end
$var wire 1 R1 rightRotate1 [5] $end
$var wire 1 S1 rightRotate1 [4] $end
$var wire 1 T1 rightRotate1 [3] $end
$var wire 1 U1 rightRotate1 [2] $end
$var wire 1 V1 rightRotate1 [1] $end
$var wire 1 W1 rightRotate1 [0] $end

$scope module rotate8_mux $end
$var parameter 32 X1 NUM_BITS $end
$var wire 1 %" InA [15] $end
$var wire 1 &" InA [14] $end
$var wire 1 '" InA [13] $end
$var wire 1 (" InA [12] $end
$var wire 1 )" InA [11] $end
$var wire 1 *" InA [10] $end
$var wire 1 +" InA [9] $end
$var wire 1 ," InA [8] $end
$var wire 1 -" InA [7] $end
$var wire 1 ." InA [6] $end
$var wire 1 /" InA [5] $end
$var wire 1 0" InA [4] $end
$var wire 1 1" InA [3] $end
$var wire 1 2" InA [2] $end
$var wire 1 3" InA [1] $end
$var wire 1 4" InA [0] $end
$var wire 1 F0 InB [15] $end
$var wire 1 G0 InB [14] $end
$var wire 1 H0 InB [13] $end
$var wire 1 I0 InB [12] $end
$var wire 1 J0 InB [11] $end
$var wire 1 K0 InB [10] $end
$var wire 1 L0 InB [9] $end
$var wire 1 M0 InB [8] $end
$var wire 1 N0 InB [7] $end
$var wire 1 O0 InB [6] $end
$var wire 1 P0 InB [5] $end
$var wire 1 Q0 InB [4] $end
$var wire 1 R0 InB [3] $end
$var wire 1 S0 InB [2] $end
$var wire 1 T0 InB [1] $end
$var wire 1 U0 InB [0] $end
$var wire 1 D) S $end
$var wire 1 V0 Out [15] $end
$var wire 1 W0 Out [14] $end
$var wire 1 X0 Out [13] $end
$var wire 1 Y0 Out [12] $end
$var wire 1 Z0 Out [11] $end
$var wire 1 [0 Out [10] $end
$var wire 1 \0 Out [9] $end
$var wire 1 ]0 Out [8] $end
$var wire 1 ^0 Out [7] $end
$var wire 1 _0 Out [6] $end
$var wire 1 `0 Out [5] $end
$var wire 1 a0 Out [4] $end
$var wire 1 b0 Out [3] $end
$var wire 1 c0 Out [2] $end
$var wire 1 d0 Out [1] $end
$var wire 1 e0 Out [0] $end
$upscope $end

$scope module rotate4_mux $end
$var parameter 32 Y1 NUM_BITS $end
$var wire 1 V0 InA [15] $end
$var wire 1 W0 InA [14] $end
$var wire 1 X0 InA [13] $end
$var wire 1 Y0 InA [12] $end
$var wire 1 Z0 InA [11] $end
$var wire 1 [0 InA [10] $end
$var wire 1 \0 InA [9] $end
$var wire 1 ]0 InA [8] $end
$var wire 1 ^0 InA [7] $end
$var wire 1 _0 InA [6] $end
$var wire 1 `0 InA [5] $end
$var wire 1 a0 InA [4] $end
$var wire 1 b0 InA [3] $end
$var wire 1 c0 InA [2] $end
$var wire 1 d0 InA [1] $end
$var wire 1 e0 InA [0] $end
$var wire 1 f0 InB [15] $end
$var wire 1 g0 InB [14] $end
$var wire 1 h0 InB [13] $end
$var wire 1 i0 InB [12] $end
$var wire 1 j0 InB [11] $end
$var wire 1 k0 InB [10] $end
$var wire 1 l0 InB [9] $end
$var wire 1 m0 InB [8] $end
$var wire 1 n0 InB [7] $end
$var wire 1 o0 InB [6] $end
$var wire 1 p0 InB [5] $end
$var wire 1 q0 InB [4] $end
$var wire 1 r0 InB [3] $end
$var wire 1 s0 InB [2] $end
$var wire 1 t0 InB [1] $end
$var wire 1 u0 InB [0] $end
$var wire 1 E) S $end
$var wire 1 v0 Out [15] $end
$var wire 1 w0 Out [14] $end
$var wire 1 x0 Out [13] $end
$var wire 1 y0 Out [12] $end
$var wire 1 z0 Out [11] $end
$var wire 1 {0 Out [10] $end
$var wire 1 |0 Out [9] $end
$var wire 1 }0 Out [8] $end
$var wire 1 ~0 Out [7] $end
$var wire 1 !1 Out [6] $end
$var wire 1 "1 Out [5] $end
$var wire 1 #1 Out [4] $end
$var wire 1 $1 Out [3] $end
$var wire 1 %1 Out [2] $end
$var wire 1 &1 Out [1] $end
$var wire 1 '1 Out [0] $end
$upscope $end

$scope module rotate2_mux $end
$var parameter 32 Z1 NUM_BITS $end
$var wire 1 v0 InA [15] $end
$var wire 1 w0 InA [14] $end
$var wire 1 x0 InA [13] $end
$var wire 1 y0 InA [12] $end
$var wire 1 z0 InA [11] $end
$var wire 1 {0 InA [10] $end
$var wire 1 |0 InA [9] $end
$var wire 1 }0 InA [8] $end
$var wire 1 ~0 InA [7] $end
$var wire 1 !1 InA [6] $end
$var wire 1 "1 InA [5] $end
$var wire 1 #1 InA [4] $end
$var wire 1 $1 InA [3] $end
$var wire 1 %1 InA [2] $end
$var wire 1 &1 InA [1] $end
$var wire 1 '1 InA [0] $end
$var wire 1 (1 InB [15] $end
$var wire 1 )1 InB [14] $end
$var wire 1 *1 InB [13] $end
$var wire 1 +1 InB [12] $end
$var wire 1 ,1 InB [11] $end
$var wire 1 -1 InB [10] $end
$var wire 1 .1 InB [9] $end
$var wire 1 /1 InB [8] $end
$var wire 1 01 InB [7] $end
$var wire 1 11 InB [6] $end
$var wire 1 21 InB [5] $end
$var wire 1 31 InB [4] $end
$var wire 1 41 InB [3] $end
$var wire 1 51 InB [2] $end
$var wire 1 61 InB [1] $end
$var wire 1 71 InB [0] $end
$var wire 1 F) S $end
$var wire 1 81 Out [15] $end
$var wire 1 91 Out [14] $end
$var wire 1 :1 Out [13] $end
$var wire 1 ;1 Out [12] $end
$var wire 1 <1 Out [11] $end
$var wire 1 =1 Out [10] $end
$var wire 1 >1 Out [9] $end
$var wire 1 ?1 Out [8] $end
$var wire 1 @1 Out [7] $end
$var wire 1 A1 Out [6] $end
$var wire 1 B1 Out [5] $end
$var wire 1 C1 Out [4] $end
$var wire 1 D1 Out [3] $end
$var wire 1 E1 Out [2] $end
$var wire 1 F1 Out [1] $end
$var wire 1 G1 Out [0] $end
$upscope $end

$scope module rotate1_mux $end
$var parameter 32 [1 NUM_BITS $end
$var wire 1 81 InA [15] $end
$var wire 1 91 InA [14] $end
$var wire 1 :1 InA [13] $end
$var wire 1 ;1 InA [12] $end
$var wire 1 <1 InA [11] $end
$var wire 1 =1 InA [10] $end
$var wire 1 >1 InA [9] $end
$var wire 1 ?1 InA [8] $end
$var wire 1 @1 InA [7] $end
$var wire 1 A1 InA [6] $end
$var wire 1 B1 InA [5] $end
$var wire 1 C1 InA [4] $end
$var wire 1 D1 InA [3] $end
$var wire 1 E1 InA [2] $end
$var wire 1 F1 InA [1] $end
$var wire 1 G1 InA [0] $end
$var wire 1 H1 InB [15] $end
$var wire 1 I1 InB [14] $end
$var wire 1 J1 InB [13] $end
$var wire 1 K1 InB [12] $end
$var wire 1 L1 InB [11] $end
$var wire 1 M1 InB [10] $end
$var wire 1 N1 InB [9] $end
$var wire 1 O1 InB [8] $end
$var wire 1 P1 InB [7] $end
$var wire 1 Q1 InB [6] $end
$var wire 1 R1 InB [5] $end
$var wire 1 S1 InB [4] $end
$var wire 1 T1 InB [3] $end
$var wire 1 U1 InB [2] $end
$var wire 1 V1 InB [1] $end
$var wire 1 W1 InB [0] $end
$var wire 1 G) S $end
$var wire 1 E- Out [15] $end
$var wire 1 F- Out [14] $end
$var wire 1 G- Out [13] $end
$var wire 1 H- Out [12] $end
$var wire 1 I- Out [11] $end
$var wire 1 J- Out [10] $end
$var wire 1 K- Out [9] $end
$var wire 1 L- Out [8] $end
$var wire 1 M- Out [7] $end
$var wire 1 N- Out [6] $end
$var wire 1 O- Out [5] $end
$var wire 1 P- Out [4] $end
$var wire 1 Q- Out [3] $end
$var wire 1 R- Out [2] $end
$var wire 1 S- Out [1] $end
$var wire 1 T- Out [0] $end
$upscope $end
$upscope $end

$scope module ls1 $end
$var parameter 32 \1 N $end
$var parameter 32 ]1 C $end
$var wire 1 %" In [15] $end
$var wire 1 &" In [14] $end
$var wire 1 '" In [13] $end
$var wire 1 (" In [12] $end
$var wire 1 )" In [11] $end
$var wire 1 *" In [10] $end
$var wire 1 +" In [9] $end
$var wire 1 ," In [8] $end
$var wire 1 -" In [7] $end
$var wire 1 ." In [6] $end
$var wire 1 /" In [5] $end
$var wire 1 0" In [4] $end
$var wire 1 1" In [3] $end
$var wire 1 2" In [2] $end
$var wire 1 3" In [1] $end
$var wire 1 4" In [0] $end
$var wire 1 D) Cnt [3] $end
$var wire 1 E) Cnt [2] $end
$var wire 1 F) Cnt [1] $end
$var wire 1 G) Cnt [0] $end
$var wire 1 U- Out [15] $end
$var wire 1 V- Out [14] $end
$var wire 1 W- Out [13] $end
$var wire 1 X- Out [12] $end
$var wire 1 Y- Out [11] $end
$var wire 1 Z- Out [10] $end
$var wire 1 [- Out [9] $end
$var wire 1 \- Out [8] $end
$var wire 1 ]- Out [7] $end
$var wire 1 ^- Out [6] $end
$var wire 1 _- Out [5] $end
$var wire 1 `- Out [4] $end
$var wire 1 a- Out [3] $end
$var wire 1 b- Out [2] $end
$var wire 1 c- Out [1] $end
$var wire 1 d- Out [0] $end
$var wire 1 ^1 leftShift8 [15] $end
$var wire 1 _1 leftShift8 [14] $end
$var wire 1 `1 leftShift8 [13] $end
$var wire 1 a1 leftShift8 [12] $end
$var wire 1 b1 leftShift8 [11] $end
$var wire 1 c1 leftShift8 [10] $end
$var wire 1 d1 leftShift8 [9] $end
$var wire 1 e1 leftShift8 [8] $end
$var wire 1 f1 leftShift8 [7] $end
$var wire 1 g1 leftShift8 [6] $end
$var wire 1 h1 leftShift8 [5] $end
$var wire 1 i1 leftShift8 [4] $end
$var wire 1 j1 leftShift8 [3] $end
$var wire 1 k1 leftShift8 [2] $end
$var wire 1 l1 leftShift8 [1] $end
$var wire 1 m1 leftShift8 [0] $end
$var wire 1 n1 leftShift8_out [15] $end
$var wire 1 o1 leftShift8_out [14] $end
$var wire 1 p1 leftShift8_out [13] $end
$var wire 1 q1 leftShift8_out [12] $end
$var wire 1 r1 leftShift8_out [11] $end
$var wire 1 s1 leftShift8_out [10] $end
$var wire 1 t1 leftShift8_out [9] $end
$var wire 1 u1 leftShift8_out [8] $end
$var wire 1 v1 leftShift8_out [7] $end
$var wire 1 w1 leftShift8_out [6] $end
$var wire 1 x1 leftShift8_out [5] $end
$var wire 1 y1 leftShift8_out [4] $end
$var wire 1 z1 leftShift8_out [3] $end
$var wire 1 {1 leftShift8_out [2] $end
$var wire 1 |1 leftShift8_out [1] $end
$var wire 1 }1 leftShift8_out [0] $end
$var wire 1 ~1 leftShift4 [15] $end
$var wire 1 !2 leftShift4 [14] $end
$var wire 1 "2 leftShift4 [13] $end
$var wire 1 #2 leftShift4 [12] $end
$var wire 1 $2 leftShift4 [11] $end
$var wire 1 %2 leftShift4 [10] $end
$var wire 1 &2 leftShift4 [9] $end
$var wire 1 '2 leftShift4 [8] $end
$var wire 1 (2 leftShift4 [7] $end
$var wire 1 )2 leftShift4 [6] $end
$var wire 1 *2 leftShift4 [5] $end
$var wire 1 +2 leftShift4 [4] $end
$var wire 1 ,2 leftShift4 [3] $end
$var wire 1 -2 leftShift4 [2] $end
$var wire 1 .2 leftShift4 [1] $end
$var wire 1 /2 leftShift4 [0] $end
$var wire 1 02 leftShift4_out [15] $end
$var wire 1 12 leftShift4_out [14] $end
$var wire 1 22 leftShift4_out [13] $end
$var wire 1 32 leftShift4_out [12] $end
$var wire 1 42 leftShift4_out [11] $end
$var wire 1 52 leftShift4_out [10] $end
$var wire 1 62 leftShift4_out [9] $end
$var wire 1 72 leftShift4_out [8] $end
$var wire 1 82 leftShift4_out [7] $end
$var wire 1 92 leftShift4_out [6] $end
$var wire 1 :2 leftShift4_out [5] $end
$var wire 1 ;2 leftShift4_out [4] $end
$var wire 1 <2 leftShift4_out [3] $end
$var wire 1 =2 leftShift4_out [2] $end
$var wire 1 >2 leftShift4_out [1] $end
$var wire 1 ?2 leftShift4_out [0] $end
$var wire 1 @2 leftShift2 [15] $end
$var wire 1 A2 leftShift2 [14] $end
$var wire 1 B2 leftShift2 [13] $end
$var wire 1 C2 leftShift2 [12] $end
$var wire 1 D2 leftShift2 [11] $end
$var wire 1 E2 leftShift2 [10] $end
$var wire 1 F2 leftShift2 [9] $end
$var wire 1 G2 leftShift2 [8] $end
$var wire 1 H2 leftShift2 [7] $end
$var wire 1 I2 leftShift2 [6] $end
$var wire 1 J2 leftShift2 [5] $end
$var wire 1 K2 leftShift2 [4] $end
$var wire 1 L2 leftShift2 [3] $end
$var wire 1 M2 leftShift2 [2] $end
$var wire 1 N2 leftShift2 [1] $end
$var wire 1 O2 leftShift2 [0] $end
$var wire 1 P2 leftShift2_out [15] $end
$var wire 1 Q2 leftShift2_out [14] $end
$var wire 1 R2 leftShift2_out [13] $end
$var wire 1 S2 leftShift2_out [12] $end
$var wire 1 T2 leftShift2_out [11] $end
$var wire 1 U2 leftShift2_out [10] $end
$var wire 1 V2 leftShift2_out [9] $end
$var wire 1 W2 leftShift2_out [8] $end
$var wire 1 X2 leftShift2_out [7] $end
$var wire 1 Y2 leftShift2_out [6] $end
$var wire 1 Z2 leftShift2_out [5] $end
$var wire 1 [2 leftShift2_out [4] $end
$var wire 1 \2 leftShift2_out [3] $end
$var wire 1 ]2 leftShift2_out [2] $end
$var wire 1 ^2 leftShift2_out [1] $end
$var wire 1 _2 leftShift2_out [0] $end
$var wire 1 `2 leftShift1 [15] $end
$var wire 1 a2 leftShift1 [14] $end
$var wire 1 b2 leftShift1 [13] $end
$var wire 1 c2 leftShift1 [12] $end
$var wire 1 d2 leftShift1 [11] $end
$var wire 1 e2 leftShift1 [10] $end
$var wire 1 f2 leftShift1 [9] $end
$var wire 1 g2 leftShift1 [8] $end
$var wire 1 h2 leftShift1 [7] $end
$var wire 1 i2 leftShift1 [6] $end
$var wire 1 j2 leftShift1 [5] $end
$var wire 1 k2 leftShift1 [4] $end
$var wire 1 l2 leftShift1 [3] $end
$var wire 1 m2 leftShift1 [2] $end
$var wire 1 n2 leftShift1 [1] $end
$var wire 1 o2 leftShift1 [0] $end

$scope module shiftLeft8_mux $end
$var parameter 32 p2 NUM_BITS $end
$var wire 1 %" InA [15] $end
$var wire 1 &" InA [14] $end
$var wire 1 '" InA [13] $end
$var wire 1 (" InA [12] $end
$var wire 1 )" InA [11] $end
$var wire 1 *" InA [10] $end
$var wire 1 +" InA [9] $end
$var wire 1 ," InA [8] $end
$var wire 1 -" InA [7] $end
$var wire 1 ." InA [6] $end
$var wire 1 /" InA [5] $end
$var wire 1 0" InA [4] $end
$var wire 1 1" InA [3] $end
$var wire 1 2" InA [2] $end
$var wire 1 3" InA [1] $end
$var wire 1 4" InA [0] $end
$var wire 1 ^1 InB [15] $end
$var wire 1 _1 InB [14] $end
$var wire 1 `1 InB [13] $end
$var wire 1 a1 InB [12] $end
$var wire 1 b1 InB [11] $end
$var wire 1 c1 InB [10] $end
$var wire 1 d1 InB [9] $end
$var wire 1 e1 InB [8] $end
$var wire 1 f1 InB [7] $end
$var wire 1 g1 InB [6] $end
$var wire 1 h1 InB [5] $end
$var wire 1 i1 InB [4] $end
$var wire 1 j1 InB [3] $end
$var wire 1 k1 InB [2] $end
$var wire 1 l1 InB [1] $end
$var wire 1 m1 InB [0] $end
$var wire 1 D) S $end
$var wire 1 n1 Out [15] $end
$var wire 1 o1 Out [14] $end
$var wire 1 p1 Out [13] $end
$var wire 1 q1 Out [12] $end
$var wire 1 r1 Out [11] $end
$var wire 1 s1 Out [10] $end
$var wire 1 t1 Out [9] $end
$var wire 1 u1 Out [8] $end
$var wire 1 v1 Out [7] $end
$var wire 1 w1 Out [6] $end
$var wire 1 x1 Out [5] $end
$var wire 1 y1 Out [4] $end
$var wire 1 z1 Out [3] $end
$var wire 1 {1 Out [2] $end
$var wire 1 |1 Out [1] $end
$var wire 1 }1 Out [0] $end
$upscope $end

$scope module shiftLeft4_mux $end
$var parameter 32 q2 NUM_BITS $end
$var wire 1 n1 InA [15] $end
$var wire 1 o1 InA [14] $end
$var wire 1 p1 InA [13] $end
$var wire 1 q1 InA [12] $end
$var wire 1 r1 InA [11] $end
$var wire 1 s1 InA [10] $end
$var wire 1 t1 InA [9] $end
$var wire 1 u1 InA [8] $end
$var wire 1 v1 InA [7] $end
$var wire 1 w1 InA [6] $end
$var wire 1 x1 InA [5] $end
$var wire 1 y1 InA [4] $end
$var wire 1 z1 InA [3] $end
$var wire 1 {1 InA [2] $end
$var wire 1 |1 InA [1] $end
$var wire 1 }1 InA [0] $end
$var wire 1 ~1 InB [15] $end
$var wire 1 !2 InB [14] $end
$var wire 1 "2 InB [13] $end
$var wire 1 #2 InB [12] $end
$var wire 1 $2 InB [11] $end
$var wire 1 %2 InB [10] $end
$var wire 1 &2 InB [9] $end
$var wire 1 '2 InB [8] $end
$var wire 1 (2 InB [7] $end
$var wire 1 )2 InB [6] $end
$var wire 1 *2 InB [5] $end
$var wire 1 +2 InB [4] $end
$var wire 1 ,2 InB [3] $end
$var wire 1 -2 InB [2] $end
$var wire 1 .2 InB [1] $end
$var wire 1 /2 InB [0] $end
$var wire 1 E) S $end
$var wire 1 02 Out [15] $end
$var wire 1 12 Out [14] $end
$var wire 1 22 Out [13] $end
$var wire 1 32 Out [12] $end
$var wire 1 42 Out [11] $end
$var wire 1 52 Out [10] $end
$var wire 1 62 Out [9] $end
$var wire 1 72 Out [8] $end
$var wire 1 82 Out [7] $end
$var wire 1 92 Out [6] $end
$var wire 1 :2 Out [5] $end
$var wire 1 ;2 Out [4] $end
$var wire 1 <2 Out [3] $end
$var wire 1 =2 Out [2] $end
$var wire 1 >2 Out [1] $end
$var wire 1 ?2 Out [0] $end
$upscope $end

$scope module shiftLeft2_mux $end
$var parameter 32 r2 NUM_BITS $end
$var wire 1 02 InA [15] $end
$var wire 1 12 InA [14] $end
$var wire 1 22 InA [13] $end
$var wire 1 32 InA [12] $end
$var wire 1 42 InA [11] $end
$var wire 1 52 InA [10] $end
$var wire 1 62 InA [9] $end
$var wire 1 72 InA [8] $end
$var wire 1 82 InA [7] $end
$var wire 1 92 InA [6] $end
$var wire 1 :2 InA [5] $end
$var wire 1 ;2 InA [4] $end
$var wire 1 <2 InA [3] $end
$var wire 1 =2 InA [2] $end
$var wire 1 >2 InA [1] $end
$var wire 1 ?2 InA [0] $end
$var wire 1 @2 InB [15] $end
$var wire 1 A2 InB [14] $end
$var wire 1 B2 InB [13] $end
$var wire 1 C2 InB [12] $end
$var wire 1 D2 InB [11] $end
$var wire 1 E2 InB [10] $end
$var wire 1 F2 InB [9] $end
$var wire 1 G2 InB [8] $end
$var wire 1 H2 InB [7] $end
$var wire 1 I2 InB [6] $end
$var wire 1 J2 InB [5] $end
$var wire 1 K2 InB [4] $end
$var wire 1 L2 InB [3] $end
$var wire 1 M2 InB [2] $end
$var wire 1 N2 InB [1] $end
$var wire 1 O2 InB [0] $end
$var wire 1 F) S $end
$var wire 1 P2 Out [15] $end
$var wire 1 Q2 Out [14] $end
$var wire 1 R2 Out [13] $end
$var wire 1 S2 Out [12] $end
$var wire 1 T2 Out [11] $end
$var wire 1 U2 Out [10] $end
$var wire 1 V2 Out [9] $end
$var wire 1 W2 Out [8] $end
$var wire 1 X2 Out [7] $end
$var wire 1 Y2 Out [6] $end
$var wire 1 Z2 Out [5] $end
$var wire 1 [2 Out [4] $end
$var wire 1 \2 Out [3] $end
$var wire 1 ]2 Out [2] $end
$var wire 1 ^2 Out [1] $end
$var wire 1 _2 Out [0] $end
$upscope $end

$scope module shiftLeft1_mux $end
$var parameter 32 s2 NUM_BITS $end
$var wire 1 P2 InA [15] $end
$var wire 1 Q2 InA [14] $end
$var wire 1 R2 InA [13] $end
$var wire 1 S2 InA [12] $end
$var wire 1 T2 InA [11] $end
$var wire 1 U2 InA [10] $end
$var wire 1 V2 InA [9] $end
$var wire 1 W2 InA [8] $end
$var wire 1 X2 InA [7] $end
$var wire 1 Y2 InA [6] $end
$var wire 1 Z2 InA [5] $end
$var wire 1 [2 InA [4] $end
$var wire 1 \2 InA [3] $end
$var wire 1 ]2 InA [2] $end
$var wire 1 ^2 InA [1] $end
$var wire 1 _2 InA [0] $end
$var wire 1 `2 InB [15] $end
$var wire 1 a2 InB [14] $end
$var wire 1 b2 InB [13] $end
$var wire 1 c2 InB [12] $end
$var wire 1 d2 InB [11] $end
$var wire 1 e2 InB [10] $end
$var wire 1 f2 InB [9] $end
$var wire 1 g2 InB [8] $end
$var wire 1 h2 InB [7] $end
$var wire 1 i2 InB [6] $end
$var wire 1 j2 InB [5] $end
$var wire 1 k2 InB [4] $end
$var wire 1 l2 InB [3] $end
$var wire 1 m2 InB [2] $end
$var wire 1 n2 InB [1] $end
$var wire 1 o2 InB [0] $end
$var wire 1 G) S $end
$var wire 1 U- Out [15] $end
$var wire 1 V- Out [14] $end
$var wire 1 W- Out [13] $end
$var wire 1 X- Out [12] $end
$var wire 1 Y- Out [11] $end
$var wire 1 Z- Out [10] $end
$var wire 1 [- Out [9] $end
$var wire 1 \- Out [8] $end
$var wire 1 ]- Out [7] $end
$var wire 1 ^- Out [6] $end
$var wire 1 _- Out [5] $end
$var wire 1 `- Out [4] $end
$var wire 1 a- Out [3] $end
$var wire 1 b- Out [2] $end
$var wire 1 c- Out [1] $end
$var wire 1 d- Out [0] $end
$upscope $end
$upscope $end

$scope module rs1 $end
$var parameter 32 t2 N $end
$var parameter 32 u2 C $end
$var wire 1 %" In [15] $end
$var wire 1 &" In [14] $end
$var wire 1 '" In [13] $end
$var wire 1 (" In [12] $end
$var wire 1 )" In [11] $end
$var wire 1 *" In [10] $end
$var wire 1 +" In [9] $end
$var wire 1 ," In [8] $end
$var wire 1 -" In [7] $end
$var wire 1 ." In [6] $end
$var wire 1 /" In [5] $end
$var wire 1 0" In [4] $end
$var wire 1 1" In [3] $end
$var wire 1 2" In [2] $end
$var wire 1 3" In [1] $end
$var wire 1 4" In [0] $end
$var wire 1 D) Cnt [3] $end
$var wire 1 E) Cnt [2] $end
$var wire 1 F) Cnt [1] $end
$var wire 1 G) Cnt [0] $end
$var wire 1 e- Out [15] $end
$var wire 1 f- Out [14] $end
$var wire 1 g- Out [13] $end
$var wire 1 h- Out [12] $end
$var wire 1 i- Out [11] $end
$var wire 1 j- Out [10] $end
$var wire 1 k- Out [9] $end
$var wire 1 l- Out [8] $end
$var wire 1 m- Out [7] $end
$var wire 1 n- Out [6] $end
$var wire 1 o- Out [5] $end
$var wire 1 p- Out [4] $end
$var wire 1 q- Out [3] $end
$var wire 1 r- Out [2] $end
$var wire 1 s- Out [1] $end
$var wire 1 t- Out [0] $end
$var wire 1 v2 rightShift8 [15] $end
$var wire 1 w2 rightShift8 [14] $end
$var wire 1 x2 rightShift8 [13] $end
$var wire 1 y2 rightShift8 [12] $end
$var wire 1 z2 rightShift8 [11] $end
$var wire 1 {2 rightShift8 [10] $end
$var wire 1 |2 rightShift8 [9] $end
$var wire 1 }2 rightShift8 [8] $end
$var wire 1 ~2 rightShift8 [7] $end
$var wire 1 !3 rightShift8 [6] $end
$var wire 1 "3 rightShift8 [5] $end
$var wire 1 #3 rightShift8 [4] $end
$var wire 1 $3 rightShift8 [3] $end
$var wire 1 %3 rightShift8 [2] $end
$var wire 1 &3 rightShift8 [1] $end
$var wire 1 '3 rightShift8 [0] $end
$var wire 1 (3 rightShift8_out [15] $end
$var wire 1 )3 rightShift8_out [14] $end
$var wire 1 *3 rightShift8_out [13] $end
$var wire 1 +3 rightShift8_out [12] $end
$var wire 1 ,3 rightShift8_out [11] $end
$var wire 1 -3 rightShift8_out [10] $end
$var wire 1 .3 rightShift8_out [9] $end
$var wire 1 /3 rightShift8_out [8] $end
$var wire 1 03 rightShift8_out [7] $end
$var wire 1 13 rightShift8_out [6] $end
$var wire 1 23 rightShift8_out [5] $end
$var wire 1 33 rightShift8_out [4] $end
$var wire 1 43 rightShift8_out [3] $end
$var wire 1 53 rightShift8_out [2] $end
$var wire 1 63 rightShift8_out [1] $end
$var wire 1 73 rightShift8_out [0] $end
$var wire 1 83 rightShift4 [15] $end
$var wire 1 93 rightShift4 [14] $end
$var wire 1 :3 rightShift4 [13] $end
$var wire 1 ;3 rightShift4 [12] $end
$var wire 1 <3 rightShift4 [11] $end
$var wire 1 =3 rightShift4 [10] $end
$var wire 1 >3 rightShift4 [9] $end
$var wire 1 ?3 rightShift4 [8] $end
$var wire 1 @3 rightShift4 [7] $end
$var wire 1 A3 rightShift4 [6] $end
$var wire 1 B3 rightShift4 [5] $end
$var wire 1 C3 rightShift4 [4] $end
$var wire 1 D3 rightShift4 [3] $end
$var wire 1 E3 rightShift4 [2] $end
$var wire 1 F3 rightShift4 [1] $end
$var wire 1 G3 rightShift4 [0] $end
$var wire 1 H3 rightShift4_out [15] $end
$var wire 1 I3 rightShift4_out [14] $end
$var wire 1 J3 rightShift4_out [13] $end
$var wire 1 K3 rightShift4_out [12] $end
$var wire 1 L3 rightShift4_out [11] $end
$var wire 1 M3 rightShift4_out [10] $end
$var wire 1 N3 rightShift4_out [9] $end
$var wire 1 O3 rightShift4_out [8] $end
$var wire 1 P3 rightShift4_out [7] $end
$var wire 1 Q3 rightShift4_out [6] $end
$var wire 1 R3 rightShift4_out [5] $end
$var wire 1 S3 rightShift4_out [4] $end
$var wire 1 T3 rightShift4_out [3] $end
$var wire 1 U3 rightShift4_out [2] $end
$var wire 1 V3 rightShift4_out [1] $end
$var wire 1 W3 rightShift4_out [0] $end
$var wire 1 X3 rightShift2 [15] $end
$var wire 1 Y3 rightShift2 [14] $end
$var wire 1 Z3 rightShift2 [13] $end
$var wire 1 [3 rightShift2 [12] $end
$var wire 1 \3 rightShift2 [11] $end
$var wire 1 ]3 rightShift2 [10] $end
$var wire 1 ^3 rightShift2 [9] $end
$var wire 1 _3 rightShift2 [8] $end
$var wire 1 `3 rightShift2 [7] $end
$var wire 1 a3 rightShift2 [6] $end
$var wire 1 b3 rightShift2 [5] $end
$var wire 1 c3 rightShift2 [4] $end
$var wire 1 d3 rightShift2 [3] $end
$var wire 1 e3 rightShift2 [2] $end
$var wire 1 f3 rightShift2 [1] $end
$var wire 1 g3 rightShift2 [0] $end
$var wire 1 h3 rightShift2_out [15] $end
$var wire 1 i3 rightShift2_out [14] $end
$var wire 1 j3 rightShift2_out [13] $end
$var wire 1 k3 rightShift2_out [12] $end
$var wire 1 l3 rightShift2_out [11] $end
$var wire 1 m3 rightShift2_out [10] $end
$var wire 1 n3 rightShift2_out [9] $end
$var wire 1 o3 rightShift2_out [8] $end
$var wire 1 p3 rightShift2_out [7] $end
$var wire 1 q3 rightShift2_out [6] $end
$var wire 1 r3 rightShift2_out [5] $end
$var wire 1 s3 rightShift2_out [4] $end
$var wire 1 t3 rightShift2_out [3] $end
$var wire 1 u3 rightShift2_out [2] $end
$var wire 1 v3 rightShift2_out [1] $end
$var wire 1 w3 rightShift2_out [0] $end
$var wire 1 x3 rightShift1 [15] $end
$var wire 1 y3 rightShift1 [14] $end
$var wire 1 z3 rightShift1 [13] $end
$var wire 1 {3 rightShift1 [12] $end
$var wire 1 |3 rightShift1 [11] $end
$var wire 1 }3 rightShift1 [10] $end
$var wire 1 ~3 rightShift1 [9] $end
$var wire 1 !4 rightShift1 [8] $end
$var wire 1 "4 rightShift1 [7] $end
$var wire 1 #4 rightShift1 [6] $end
$var wire 1 $4 rightShift1 [5] $end
$var wire 1 %4 rightShift1 [4] $end
$var wire 1 &4 rightShift1 [3] $end
$var wire 1 '4 rightShift1 [2] $end
$var wire 1 (4 rightShift1 [1] $end
$var wire 1 )4 rightShift1 [0] $end

$scope module shiftright8_mux $end
$var parameter 32 *4 NUM_BITS $end
$var wire 1 %" InA [15] $end
$var wire 1 &" InA [14] $end
$var wire 1 '" InA [13] $end
$var wire 1 (" InA [12] $end
$var wire 1 )" InA [11] $end
$var wire 1 *" InA [10] $end
$var wire 1 +" InA [9] $end
$var wire 1 ," InA [8] $end
$var wire 1 -" InA [7] $end
$var wire 1 ." InA [6] $end
$var wire 1 /" InA [5] $end
$var wire 1 0" InA [4] $end
$var wire 1 1" InA [3] $end
$var wire 1 2" InA [2] $end
$var wire 1 3" InA [1] $end
$var wire 1 4" InA [0] $end
$var wire 1 v2 InB [15] $end
$var wire 1 w2 InB [14] $end
$var wire 1 x2 InB [13] $end
$var wire 1 y2 InB [12] $end
$var wire 1 z2 InB [11] $end
$var wire 1 {2 InB [10] $end
$var wire 1 |2 InB [9] $end
$var wire 1 }2 InB [8] $end
$var wire 1 ~2 InB [7] $end
$var wire 1 !3 InB [6] $end
$var wire 1 "3 InB [5] $end
$var wire 1 #3 InB [4] $end
$var wire 1 $3 InB [3] $end
$var wire 1 %3 InB [2] $end
$var wire 1 &3 InB [1] $end
$var wire 1 '3 InB [0] $end
$var wire 1 D) S $end
$var wire 1 (3 Out [15] $end
$var wire 1 )3 Out [14] $end
$var wire 1 *3 Out [13] $end
$var wire 1 +3 Out [12] $end
$var wire 1 ,3 Out [11] $end
$var wire 1 -3 Out [10] $end
$var wire 1 .3 Out [9] $end
$var wire 1 /3 Out [8] $end
$var wire 1 03 Out [7] $end
$var wire 1 13 Out [6] $end
$var wire 1 23 Out [5] $end
$var wire 1 33 Out [4] $end
$var wire 1 43 Out [3] $end
$var wire 1 53 Out [2] $end
$var wire 1 63 Out [1] $end
$var wire 1 73 Out [0] $end
$upscope $end

$scope module shiftright4_mux $end
$var parameter 32 +4 NUM_BITS $end
$var wire 1 (3 InA [15] $end
$var wire 1 )3 InA [14] $end
$var wire 1 *3 InA [13] $end
$var wire 1 +3 InA [12] $end
$var wire 1 ,3 InA [11] $end
$var wire 1 -3 InA [10] $end
$var wire 1 .3 InA [9] $end
$var wire 1 /3 InA [8] $end
$var wire 1 03 InA [7] $end
$var wire 1 13 InA [6] $end
$var wire 1 23 InA [5] $end
$var wire 1 33 InA [4] $end
$var wire 1 43 InA [3] $end
$var wire 1 53 InA [2] $end
$var wire 1 63 InA [1] $end
$var wire 1 73 InA [0] $end
$var wire 1 83 InB [15] $end
$var wire 1 93 InB [14] $end
$var wire 1 :3 InB [13] $end
$var wire 1 ;3 InB [12] $end
$var wire 1 <3 InB [11] $end
$var wire 1 =3 InB [10] $end
$var wire 1 >3 InB [9] $end
$var wire 1 ?3 InB [8] $end
$var wire 1 @3 InB [7] $end
$var wire 1 A3 InB [6] $end
$var wire 1 B3 InB [5] $end
$var wire 1 C3 InB [4] $end
$var wire 1 D3 InB [3] $end
$var wire 1 E3 InB [2] $end
$var wire 1 F3 InB [1] $end
$var wire 1 G3 InB [0] $end
$var wire 1 E) S $end
$var wire 1 H3 Out [15] $end
$var wire 1 I3 Out [14] $end
$var wire 1 J3 Out [13] $end
$var wire 1 K3 Out [12] $end
$var wire 1 L3 Out [11] $end
$var wire 1 M3 Out [10] $end
$var wire 1 N3 Out [9] $end
$var wire 1 O3 Out [8] $end
$var wire 1 P3 Out [7] $end
$var wire 1 Q3 Out [6] $end
$var wire 1 R3 Out [5] $end
$var wire 1 S3 Out [4] $end
$var wire 1 T3 Out [3] $end
$var wire 1 U3 Out [2] $end
$var wire 1 V3 Out [1] $end
$var wire 1 W3 Out [0] $end
$upscope $end

$scope module shiftright2_mux $end
$var parameter 32 ,4 NUM_BITS $end
$var wire 1 H3 InA [15] $end
$var wire 1 I3 InA [14] $end
$var wire 1 J3 InA [13] $end
$var wire 1 K3 InA [12] $end
$var wire 1 L3 InA [11] $end
$var wire 1 M3 InA [10] $end
$var wire 1 N3 InA [9] $end
$var wire 1 O3 InA [8] $end
$var wire 1 P3 InA [7] $end
$var wire 1 Q3 InA [6] $end
$var wire 1 R3 InA [5] $end
$var wire 1 S3 InA [4] $end
$var wire 1 T3 InA [3] $end
$var wire 1 U3 InA [2] $end
$var wire 1 V3 InA [1] $end
$var wire 1 W3 InA [0] $end
$var wire 1 X3 InB [15] $end
$var wire 1 Y3 InB [14] $end
$var wire 1 Z3 InB [13] $end
$var wire 1 [3 InB [12] $end
$var wire 1 \3 InB [11] $end
$var wire 1 ]3 InB [10] $end
$var wire 1 ^3 InB [9] $end
$var wire 1 _3 InB [8] $end
$var wire 1 `3 InB [7] $end
$var wire 1 a3 InB [6] $end
$var wire 1 b3 InB [5] $end
$var wire 1 c3 InB [4] $end
$var wire 1 d3 InB [3] $end
$var wire 1 e3 InB [2] $end
$var wire 1 f3 InB [1] $end
$var wire 1 g3 InB [0] $end
$var wire 1 F) S $end
$var wire 1 h3 Out [15] $end
$var wire 1 i3 Out [14] $end
$var wire 1 j3 Out [13] $end
$var wire 1 k3 Out [12] $end
$var wire 1 l3 Out [11] $end
$var wire 1 m3 Out [10] $end
$var wire 1 n3 Out [9] $end
$var wire 1 o3 Out [8] $end
$var wire 1 p3 Out [7] $end
$var wire 1 q3 Out [6] $end
$var wire 1 r3 Out [5] $end
$var wire 1 s3 Out [4] $end
$var wire 1 t3 Out [3] $end
$var wire 1 u3 Out [2] $end
$var wire 1 v3 Out [1] $end
$var wire 1 w3 Out [0] $end
$upscope $end

$scope module shiftright1_mux $end
$var parameter 32 -4 NUM_BITS $end
$var wire 1 h3 InA [15] $end
$var wire 1 i3 InA [14] $end
$var wire 1 j3 InA [13] $end
$var wire 1 k3 InA [12] $end
$var wire 1 l3 InA [11] $end
$var wire 1 m3 InA [10] $end
$var wire 1 n3 InA [9] $end
$var wire 1 o3 InA [8] $end
$var wire 1 p3 InA [7] $end
$var wire 1 q3 InA [6] $end
$var wire 1 r3 InA [5] $end
$var wire 1 s3 InA [4] $end
$var wire 1 t3 InA [3] $end
$var wire 1 u3 InA [2] $end
$var wire 1 v3 InA [1] $end
$var wire 1 w3 InA [0] $end
$var wire 1 x3 InB [15] $end
$var wire 1 y3 InB [14] $end
$var wire 1 z3 InB [13] $end
$var wire 1 {3 InB [12] $end
$var wire 1 |3 InB [11] $end
$var wire 1 }3 InB [10] $end
$var wire 1 ~3 InB [9] $end
$var wire 1 !4 InB [8] $end
$var wire 1 "4 InB [7] $end
$var wire 1 #4 InB [6] $end
$var wire 1 $4 InB [5] $end
$var wire 1 %4 InB [4] $end
$var wire 1 &4 InB [3] $end
$var wire 1 '4 InB [2] $end
$var wire 1 (4 InB [1] $end
$var wire 1 )4 InB [0] $end
$var wire 1 G) S $end
$var wire 1 e- Out [15] $end
$var wire 1 f- Out [14] $end
$var wire 1 g- Out [13] $end
$var wire 1 h- Out [12] $end
$var wire 1 i- Out [11] $end
$var wire 1 j- Out [10] $end
$var wire 1 k- Out [9] $end
$var wire 1 l- Out [8] $end
$var wire 1 m- Out [7] $end
$var wire 1 n- Out [6] $end
$var wire 1 o- Out [5] $end
$var wire 1 p- Out [4] $end
$var wire 1 q- Out [3] $end
$var wire 1 r- Out [2] $end
$var wire 1 s- Out [1] $end
$var wire 1 t- Out [0] $end
$upscope $end
$upscope $end

$scope module btr $end
$var wire 1 %" In [15] $end
$var wire 1 &" In [14] $end
$var wire 1 '" In [13] $end
$var wire 1 (" In [12] $end
$var wire 1 )" In [11] $end
$var wire 1 *" In [10] $end
$var wire 1 +" In [9] $end
$var wire 1 ," In [8] $end
$var wire 1 -" In [7] $end
$var wire 1 ." In [6] $end
$var wire 1 /" In [5] $end
$var wire 1 0" In [4] $end
$var wire 1 1" In [3] $end
$var wire 1 2" In [2] $end
$var wire 1 3" In [1] $end
$var wire 1 4" In [0] $end
$var wire 1 u- Out [15] $end
$var wire 1 v- Out [14] $end
$var wire 1 w- Out [13] $end
$var wire 1 x- Out [12] $end
$var wire 1 y- Out [11] $end
$var wire 1 z- Out [10] $end
$var wire 1 {- Out [9] $end
$var wire 1 |- Out [8] $end
$var wire 1 }- Out [7] $end
$var wire 1 ~- Out [6] $end
$var wire 1 !. Out [5] $end
$var wire 1 ". Out [4] $end
$var wire 1 #. Out [3] $end
$var wire 1 $. Out [2] $end
$var wire 1 %. Out [1] $end
$var wire 1 &. Out [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module dataMemory $end
$var wire 1 { clk $end
$var wire 1 E" dump $end
$var wire 1 } rst $end
$var wire 1 .$ memWrite $end
$var wire 1 3$ memRead $end
$var wire 1 s! aluOutput [15] $end
$var wire 1 t! aluOutput [14] $end
$var wire 1 u! aluOutput [13] $end
$var wire 1 v! aluOutput [12] $end
$var wire 1 w! aluOutput [11] $end
$var wire 1 x! aluOutput [10] $end
$var wire 1 y! aluOutput [9] $end
$var wire 1 z! aluOutput [8] $end
$var wire 1 {! aluOutput [7] $end
$var wire 1 |! aluOutput [6] $end
$var wire 1 }! aluOutput [5] $end
$var wire 1 ~! aluOutput [4] $end
$var wire 1 !" aluOutput [3] $end
$var wire 1 "" aluOutput [2] $end
$var wire 1 #" aluOutput [1] $end
$var wire 1 $" aluOutput [0] $end
$var wire 1 5" writeData [15] $end
$var wire 1 6" writeData [14] $end
$var wire 1 7" writeData [13] $end
$var wire 1 8" writeData [12] $end
$var wire 1 9" writeData [11] $end
$var wire 1 :" writeData [10] $end
$var wire 1 ;" writeData [9] $end
$var wire 1 <" writeData [8] $end
$var wire 1 =" writeData [7] $end
$var wire 1 >" writeData [6] $end
$var wire 1 ?" writeData [5] $end
$var wire 1 @" writeData [4] $end
$var wire 1 A" writeData [3] $end
$var wire 1 B" writeData [2] $end
$var wire 1 C" writeData [1] $end
$var wire 1 D" writeData [0] $end
$var wire 1 S! readData [15] $end
$var wire 1 T! readData [14] $end
$var wire 1 U! readData [13] $end
$var wire 1 V! readData [12] $end
$var wire 1 W! readData [11] $end
$var wire 1 X! readData [10] $end
$var wire 1 Y! readData [9] $end
$var wire 1 Z! readData [8] $end
$var wire 1 [! readData [7] $end
$var wire 1 \! readData [6] $end
$var wire 1 ]! readData [5] $end
$var wire 1 ^! readData [4] $end
$var wire 1 _! readData [3] $end
$var wire 1 `! readData [2] $end
$var wire 1 a! readData [1] $end
$var wire 1 b! readData [0] $end
$var wire 1 .4 memReadOrWrite $end

$scope module dataMemory $end
$var wire 1 S! data_out [15] $end
$var wire 1 T! data_out [14] $end
$var wire 1 U! data_out [13] $end
$var wire 1 V! data_out [12] $end
$var wire 1 W! data_out [11] $end
$var wire 1 X! data_out [10] $end
$var wire 1 Y! data_out [9] $end
$var wire 1 Z! data_out [8] $end
$var wire 1 [! data_out [7] $end
$var wire 1 \! data_out [6] $end
$var wire 1 ]! data_out [5] $end
$var wire 1 ^! data_out [4] $end
$var wire 1 _! data_out [3] $end
$var wire 1 `! data_out [2] $end
$var wire 1 a! data_out [1] $end
$var wire 1 b! data_out [0] $end
$var wire 1 5" data_in [15] $end
$var wire 1 6" data_in [14] $end
$var wire 1 7" data_in [13] $end
$var wire 1 8" data_in [12] $end
$var wire 1 9" data_in [11] $end
$var wire 1 :" data_in [10] $end
$var wire 1 ;" data_in [9] $end
$var wire 1 <" data_in [8] $end
$var wire 1 =" data_in [7] $end
$var wire 1 >" data_in [6] $end
$var wire 1 ?" data_in [5] $end
$var wire 1 @" data_in [4] $end
$var wire 1 A" data_in [3] $end
$var wire 1 B" data_in [2] $end
$var wire 1 C" data_in [1] $end
$var wire 1 D" data_in [0] $end
$var wire 1 s! addr [15] $end
$var wire 1 t! addr [14] $end
$var wire 1 u! addr [13] $end
$var wire 1 v! addr [12] $end
$var wire 1 w! addr [11] $end
$var wire 1 x! addr [10] $end
$var wire 1 y! addr [9] $end
$var wire 1 z! addr [8] $end
$var wire 1 {! addr [7] $end
$var wire 1 |! addr [6] $end
$var wire 1 }! addr [5] $end
$var wire 1 ~! addr [4] $end
$var wire 1 !" addr [3] $end
$var wire 1 "" addr [2] $end
$var wire 1 #" addr [1] $end
$var wire 1 $" addr [0] $end
$var wire 1 .4 enable $end
$var wire 1 .$ wr $end
$var wire 1 E" createdump $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /4 loaded $end
$var reg 17 04 largest [16:0] $end
$var integer 32 14 mcd $end
$var integer 32 24 i $end
$upscope $end
$upscope $end

$scope module instructionWriteback $end
$var wire 1 S! readData [15] $end
$var wire 1 T! readData [14] $end
$var wire 1 U! readData [13] $end
$var wire 1 V! readData [12] $end
$var wire 1 W! readData [11] $end
$var wire 1 X! readData [10] $end
$var wire 1 Y! readData [9] $end
$var wire 1 Z! readData [8] $end
$var wire 1 [! readData [7] $end
$var wire 1 \! readData [6] $end
$var wire 1 ]! readData [5] $end
$var wire 1 ^! readData [4] $end
$var wire 1 _! readData [3] $end
$var wire 1 `! readData [2] $end
$var wire 1 a! readData [1] $end
$var wire 1 b! readData [0] $end
$var wire 1 s! aluOutput [15] $end
$var wire 1 t! aluOutput [14] $end
$var wire 1 u! aluOutput [13] $end
$var wire 1 v! aluOutput [12] $end
$var wire 1 w! aluOutput [11] $end
$var wire 1 x! aluOutput [10] $end
$var wire 1 y! aluOutput [9] $end
$var wire 1 z! aluOutput [8] $end
$var wire 1 {! aluOutput [7] $end
$var wire 1 |! aluOutput [6] $end
$var wire 1 }! aluOutput [5] $end
$var wire 1 ~! aluOutput [4] $end
$var wire 1 !" aluOutput [3] $end
$var wire 1 "" aluOutput [2] $end
$var wire 1 #" aluOutput [1] $end
$var wire 1 $" aluOutput [0] $end
$var wire 1 3! PC_Next [15] $end
$var wire 1 4! PC_Next [14] $end
$var wire 1 5! PC_Next [13] $end
$var wire 1 6! PC_Next [12] $end
$var wire 1 7! PC_Next [11] $end
$var wire 1 8! PC_Next [10] $end
$var wire 1 9! PC_Next [9] $end
$var wire 1 :! PC_Next [8] $end
$var wire 1 ;! PC_Next [7] $end
$var wire 1 <! PC_Next [6] $end
$var wire 1 =! PC_Next [5] $end
$var wire 1 >! PC_Next [4] $end
$var wire 1 ?! PC_Next [3] $end
$var wire 1 @! PC_Next [2] $end
$var wire 1 A! PC_Next [1] $end
$var wire 1 B! PC_Next [0] $end
$var wire 1 2$ memToReg $end
$var wire 1 G" JAL_en $end
$var wire 1 c! writeData [15] $end
$var wire 1 d! writeData [14] $end
$var wire 1 e! writeData [13] $end
$var wire 1 f! writeData [12] $end
$var wire 1 g! writeData [11] $end
$var wire 1 h! writeData [10] $end
$var wire 1 i! writeData [9] $end
$var wire 1 j! writeData [8] $end
$var wire 1 k! writeData [7] $end
$var wire 1 l! writeData [6] $end
$var wire 1 m! writeData [5] $end
$var wire 1 n! writeData [4] $end
$var wire 1 o! writeData [3] $end
$var wire 1 p! writeData [2] $end
$var wire 1 q! writeData [1] $end
$var wire 1 r! writeData [0] $end

$scope module mux1 $end
$var parameter 32 34 NUM_BITS $end
$var wire 1 s! InA [15] $end
$var wire 1 t! InA [14] $end
$var wire 1 u! InA [13] $end
$var wire 1 v! InA [12] $end
$var wire 1 w! InA [11] $end
$var wire 1 x! InA [10] $end
$var wire 1 y! InA [9] $end
$var wire 1 z! InA [8] $end
$var wire 1 {! InA [7] $end
$var wire 1 |! InA [6] $end
$var wire 1 }! InA [5] $end
$var wire 1 ~! InA [4] $end
$var wire 1 !" InA [3] $end
$var wire 1 "" InA [2] $end
$var wire 1 #" InA [1] $end
$var wire 1 $" InA [0] $end
$var wire 1 S! InB [15] $end
$var wire 1 T! InB [14] $end
$var wire 1 U! InB [13] $end
$var wire 1 V! InB [12] $end
$var wire 1 W! InB [11] $end
$var wire 1 X! InB [10] $end
$var wire 1 Y! InB [9] $end
$var wire 1 Z! InB [8] $end
$var wire 1 [! InB [7] $end
$var wire 1 \! InB [6] $end
$var wire 1 ]! InB [5] $end
$var wire 1 ^! InB [4] $end
$var wire 1 _! InB [3] $end
$var wire 1 `! InB [2] $end
$var wire 1 a! InB [1] $end
$var wire 1 b! InB [0] $end
$var wire 1 3! InC [15] $end
$var wire 1 4! InC [14] $end
$var wire 1 5! InC [13] $end
$var wire 1 6! InC [12] $end
$var wire 1 7! InC [11] $end
$var wire 1 8! InC [10] $end
$var wire 1 9! InC [9] $end
$var wire 1 :! InC [8] $end
$var wire 1 ;! InC [7] $end
$var wire 1 <! InC [6] $end
$var wire 1 =! InC [5] $end
$var wire 1 >! InC [4] $end
$var wire 1 ?! InC [3] $end
$var wire 1 @! InC [2] $end
$var wire 1 A! InC [1] $end
$var wire 1 B! InC [0] $end
$var wire 1 44 InD [15] $end
$var wire 1 54 InD [14] $end
$var wire 1 64 InD [13] $end
$var wire 1 74 InD [12] $end
$var wire 1 84 InD [11] $end
$var wire 1 94 InD [10] $end
$var wire 1 :4 InD [9] $end
$var wire 1 ;4 InD [8] $end
$var wire 1 <4 InD [7] $end
$var wire 1 =4 InD [6] $end
$var wire 1 >4 InD [5] $end
$var wire 1 ?4 InD [4] $end
$var wire 1 @4 InD [3] $end
$var wire 1 A4 InD [2] $end
$var wire 1 B4 InD [1] $end
$var wire 1 C4 InD [0] $end
$var wire 1 G" S [1] $end
$var wire 1 2$ S [0] $end
$var wire 1 c! Out [15] $end
$var wire 1 d! Out [14] $end
$var wire 1 e! Out [13] $end
$var wire 1 f! Out [12] $end
$var wire 1 g! Out [11] $end
$var wire 1 h! Out [10] $end
$var wire 1 i! Out [9] $end
$var wire 1 j! Out [8] $end
$var wire 1 k! Out [7] $end
$var wire 1 l! Out [6] $end
$var wire 1 m! Out [5] $end
$var wire 1 n! Out [4] $end
$var wire 1 o! Out [3] $end
$var wire 1 p! Out [2] $end
$var wire 1 q! Out [1] $end
$var wire 1 r! Out [0] $end
$var wire 1 D4 A_B_Out [15] $end
$var wire 1 E4 A_B_Out [14] $end
$var wire 1 F4 A_B_Out [13] $end
$var wire 1 G4 A_B_Out [12] $end
$var wire 1 H4 A_B_Out [11] $end
$var wire 1 I4 A_B_Out [10] $end
$var wire 1 J4 A_B_Out [9] $end
$var wire 1 K4 A_B_Out [8] $end
$var wire 1 L4 A_B_Out [7] $end
$var wire 1 M4 A_B_Out [6] $end
$var wire 1 N4 A_B_Out [5] $end
$var wire 1 O4 A_B_Out [4] $end
$var wire 1 P4 A_B_Out [3] $end
$var wire 1 Q4 A_B_Out [2] $end
$var wire 1 R4 A_B_Out [1] $end
$var wire 1 S4 A_B_Out [0] $end
$var wire 1 T4 C_D_Out [15] $end
$var wire 1 U4 C_D_Out [14] $end
$var wire 1 V4 C_D_Out [13] $end
$var wire 1 W4 C_D_Out [12] $end
$var wire 1 X4 C_D_Out [11] $end
$var wire 1 Y4 C_D_Out [10] $end
$var wire 1 Z4 C_D_Out [9] $end
$var wire 1 [4 C_D_Out [8] $end
$var wire 1 \4 C_D_Out [7] $end
$var wire 1 ]4 C_D_Out [6] $end
$var wire 1 ^4 C_D_Out [5] $end
$var wire 1 _4 C_D_Out [4] $end
$var wire 1 `4 C_D_Out [3] $end
$var wire 1 a4 C_D_Out [2] $end
$var wire 1 b4 C_D_Out [1] $end
$var wire 1 c4 C_D_Out [0] $end

$scope module A_B_mux $end
$var parameter 32 d4 NUM_BITS $end
$var wire 1 s! InA [15] $end
$var wire 1 t! InA [14] $end
$var wire 1 u! InA [13] $end
$var wire 1 v! InA [12] $end
$var wire 1 w! InA [11] $end
$var wire 1 x! InA [10] $end
$var wire 1 y! InA [9] $end
$var wire 1 z! InA [8] $end
$var wire 1 {! InA [7] $end
$var wire 1 |! InA [6] $end
$var wire 1 }! InA [5] $end
$var wire 1 ~! InA [4] $end
$var wire 1 !" InA [3] $end
$var wire 1 "" InA [2] $end
$var wire 1 #" InA [1] $end
$var wire 1 $" InA [0] $end
$var wire 1 S! InB [15] $end
$var wire 1 T! InB [14] $end
$var wire 1 U! InB [13] $end
$var wire 1 V! InB [12] $end
$var wire 1 W! InB [11] $end
$var wire 1 X! InB [10] $end
$var wire 1 Y! InB [9] $end
$var wire 1 Z! InB [8] $end
$var wire 1 [! InB [7] $end
$var wire 1 \! InB [6] $end
$var wire 1 ]! InB [5] $end
$var wire 1 ^! InB [4] $end
$var wire 1 _! InB [3] $end
$var wire 1 `! InB [2] $end
$var wire 1 a! InB [1] $end
$var wire 1 b! InB [0] $end
$var wire 1 2$ S $end
$var wire 1 D4 Out [15] $end
$var wire 1 E4 Out [14] $end
$var wire 1 F4 Out [13] $end
$var wire 1 G4 Out [12] $end
$var wire 1 H4 Out [11] $end
$var wire 1 I4 Out [10] $end
$var wire 1 J4 Out [9] $end
$var wire 1 K4 Out [8] $end
$var wire 1 L4 Out [7] $end
$var wire 1 M4 Out [6] $end
$var wire 1 N4 Out [5] $end
$var wire 1 O4 Out [4] $end
$var wire 1 P4 Out [3] $end
$var wire 1 Q4 Out [2] $end
$var wire 1 R4 Out [1] $end
$var wire 1 S4 Out [0] $end
$upscope $end

$scope module C_D_mux $end
$var parameter 32 e4 NUM_BITS $end
$var wire 1 3! InA [15] $end
$var wire 1 4! InA [14] $end
$var wire 1 