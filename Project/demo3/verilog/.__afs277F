$date
	Thu Apr 25 13:20:16 2019
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_pbench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var integer 32 .! inst_count $end
$var integer 32 /! trace_file $end
$var integer 32 0! sim_log_file $end
$var integer 32 1! DCacheHit_count $end
$var integer 32 2! ICacheHit_count $end
$var integer 32 3! DCacheReq_count $end
$var integer 32 4! ICacheReq_count $end

$scope module DUT $end
$var wire 1 5! clk $end
$var wire 1 6! err $end
$var wire 1 7! rst $end

$scope module c0 $end
$var reg 1 8! clk $end
$var reg 1 9! rst $end
$var wire 1 6! err $end
$var integer 32 :! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6! err $end
$var wire 1 ;! updatedPC [15] $end
$var wire 1 <! updatedPC [14] $end
$var wire 1 =! updatedPC [13] $end
$var wire 1 >! updatedPC [12] $end
$var wire 1 ?! updatedPC [11] $end
$var wire 1 @! updatedPC [10] $end
$var wire 1 A! updatedPC [9] $end
$var wire 1 B! updatedPC [8] $end
$var wire 1 C! updatedPC [7] $end
$var wire 1 D! updatedPC [6] $end
$var wire 1 E! updatedPC [5] $end
$var wire 1 F! updatedPC [4] $end
$var wire 1 G! updatedPC [3] $end
$var wire 1 H! updatedPC [2] $end
$var wire 1 I! updatedPC [1] $end
$var wire 1 J! updatedPC [0] $end
$var wire 1 K! nextPC_from_fetch [15] $end
$var wire 1 L! nextPC_from_fetch [14] $end
$var wire 1 M! nextPC_from_fetch [13] $end
$var wire 1 N! nextPC_from_fetch [12] $end
$var wire 1 O! nextPC_from_fetch [11] $end
$var wire 1 P! nextPC_from_fetch [10] $end
$var wire 1 Q! nextPC_from_fetch [9] $end
$var wire 1 R! nextPC_from_fetch [8] $end
$var wire 1 S! nextPC_from_fetch [7] $end
$var wire 1 T! nextPC_from_fetch [6] $end
$var wire 1 U! nextPC_from_fetch [5] $end
$var wire 1 V! nextPC_from_fetch [4] $end
$var wire 1 W! nextPC_from_fetch [3] $end
$var wire 1 X! nextPC_from_fetch [2] $end
$var wire 1 Y! nextPC_from_fetch [1] $end
$var wire 1 Z! nextPC_from_fetch [0] $end
$var wire 1 [! fetch_instruction_Out [15] $end
$var wire 1 \! fetch_instruction_Out [14] $end
$var wire 1 ]! fetch_instruction_Out [13] $end
$var wire 1 ^! fetch_instruction_Out [12] $end
$var wire 1 _! fetch_instruction_Out [11] $end
$var wire 1 `! fetch_instruction_Out [10] $end
$var wire 1 a! fetch_instruction_Out [9] $end
$var wire 1 b! fetch_instruction_Out [8] $end
$var wire 1 c! fetch_instruction_Out [7] $end
$var wire 1 d! fetch_instruction_Out [6] $end
$var wire 1 e! fetch_instruction_Out [5] $end
$var wire 1 f! fetch_instruction_Out [4] $end
$var wire 1 g! fetch_instruction_Out [3] $end
$var wire 1 h! fetch_instruction_Out [2] $end
$var wire 1 i! fetch_instruction_Out [1] $end
$var wire 1 j! fetch_instruction_Out [0] $end
$var wire 1 k! readData [15] $end
$var wire 1 l! readData [14] $end
$var wire 1 m! readData [13] $end
$var wire 1 n! readData [12] $end
$var wire 1 o! readData [11] $end
$var wire 1 p! readData [10] $end
$var wire 1 q! readData [9] $end
$var wire 1 r! readData [8] $end
$var wire 1 s! readData [7] $end
$var wire 1 t! readData [6] $end
$var wire 1 u! readData [5] $end
$var wire 1 v! readData [4] $end
$var wire 1 w! readData [3] $end
$var wire 1 x! readData [2] $end
$var wire 1 y! readData [1] $end
$var wire 1 z! readData [0] $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 -" aluOutput [15] $end
$var wire 1 ." aluOutput [14] $end
$var wire 1 /" aluOutput [13] $end
$var wire 1 0" aluOutput [12] $end
$var wire 1 1" aluOutput [11] $end
$var wire 1 2" aluOutput [10] $end
$var wire 1 3" aluOutput [9] $end
$var wire 1 4" aluOutput [8] $end
$var wire 1 5" aluOutput [7] $end
$var wire 1 6" aluOutput [6] $end
$var wire 1 7" aluOutput [5] $end
$var wire 1 8" aluOutput [4] $end
$var wire 1 9" aluOutput [3] $end
$var wire 1 :" aluOutput [2] $end
$var wire 1 ;" aluOutput [1] $end
$var wire 1 <" aluOutput [0] $end
$var wire 1 =" alu_A [15] $end
$var wire 1 >" alu_A [14] $end
$var wire 1 ?" alu_A [13] $end
$var wire 1 @" alu_A [12] $end
$var wire 1 A" alu_A [11] $end
$var wire 1 B" alu_A [10] $end
$var wire 1 C" alu_A [9] $end
$var wire 1 D" alu_A [8] $end
$var wire 1 E" alu_A [7] $end
$var wire 1 F" alu_A [6] $end
$var wire 1 G" alu_A [5] $end
$var wire 1 H" alu_A [4] $end
$var wire 1 I" alu_A [3] $end
$var wire 1 J" alu_A [2] $end
$var wire 1 K" alu_A [1] $end
$var wire 1 L" alu_A [0] $end
$var wire 1 M" alu_B [15] $end
$var wire 1 N" alu_B [14] $end
$var wire 1 O" alu_B [13] $end
$var wire 1 P" alu_B [12] $end
$var wire 1 Q" alu_B [11] $end
$var wire 1 R" alu_B [10] $end
$var wire 1 S" alu_B [9] $end
$var wire 1 T" alu_B [8] $end
$var wire 1 U" alu_B [7] $end
$var wire 1 V" alu_B [6] $end
$var wire 1 W" alu_B [5] $end
$var wire 1 X" alu_B [4] $end
$var wire 1 Y" alu_B [3] $end
$var wire 1 Z" alu_B [2] $end
$var wire 1 [" alu_B [1] $end
$var wire 1 \" alu_B [0] $end
$var wire 1 ]" IF_ID_instruction_Out [15] $end
$var wire 1 ^" IF_ID_instruction_Out [14] $end
$var wire 1 _" IF_ID_instruction_Out [13] $end
$var wire 1 `" IF_ID_instruction_Out [12] $end
$var wire 1 a" IF_ID_instruction_Out [11] $end
$var wire 1 b" IF_ID_instruction_Out [10] $end
$var wire 1 c" IF_ID_instruction_Out [9] $end
$var wire 1 d" IF_ID_instruction_Out [8] $end
$var wire 1 e" IF_ID_instruction_Out [7] $end
$var wire 1 f" IF_ID_instruction_Out [6] $end
$var wire 1 g" IF_ID_instruction_Out [5] $end
$var wire 1 h" IF_ID_instruction_Out [4] $end
$var wire 1 i" IF_ID_instruction_Out [3] $end
$var wire 1 j" IF_ID_instruction_Out [2] $end
$var wire 1 k" IF_ID_instruction_Out [1] $end
$var wire 1 l" IF_ID_instruction_Out [0] $end
$var wire 1 m" IF_ID_PC_Out [15] $end
$var wire 1 n" IF_ID_PC_Out [14] $end
$var wire 1 o" IF_ID_PC_Out [13] $end
$var wire 1 p" IF_ID_PC_Out [12] $end
$var wire 1 q" IF_ID_PC_Out [11] $end
$var wire 1 r" IF_ID_PC_Out [10] $end
$var wire 1 s" IF_ID_PC_Out [9] $end
$var wire 1 t" IF_ID_PC_Out [8] $end
$var wire 1 u" IF_ID_PC_Out [7] $end
$var wire 1 v" IF_ID_PC_Out [6] $end
$var wire 1 w" IF_ID_PC_Out [5] $end
$var wire 1 x" IF_ID_PC_Out [4] $end
$var wire 1 y" IF_ID_PC_Out [3] $end
$var wire 1 z" IF_ID_PC_Out [2] $end
$var wire 1 {" IF_ID_PC_Out [1] $end
$var wire 1 |" IF_ID_PC_Out [0] $end
$var wire 1 }" executeWriteRegister [2] $end
$var wire 1 ~" executeWriteRegister [1] $end
$var wire 1 !# executeWriteRegister [0] $end
$var wire 1 "# EX_MEM_writeRegister_out [2] $end
$var wire 1 ## EX_MEM_writeRegister_out [1] $end
$var wire 1 $# EX_MEM_writeRegister_out [0] $end
$var wire 1 %# MEM_WB_writeRegister_out [2] $end
$var wire 1 &# MEM_WB_writeRegister_out [1] $end
$var wire 1 '# MEM_WB_writeRegister_out [0] $end
$var wire 1 (# ID_EX_SESel_out [2] $end
$var wire 1 )# ID_EX_SESel_out [1] $end
$var wire 1 *# ID_EX_SESel_out [0] $end
$var wire 1 +# ID_EX_RegDst_out [1] $end
$var wire 1 ,# ID_EX_RegDst_out [0] $end
$var wire 1 -# createDump $end
$var wire 1 .# errDecode $end
$var wire 1 /# JAL_en $end
$var wire 1 0# EX_branchingPCEnable_to_EX_MEM $end
$var wire 1 1# ALUSrc2_connector $end
$var wire 1 2# masterBorJ $end
$var wire 1 3# PC_WriteEn_from_hazardDet $end
$var wire 1 4# IF_ID_WriteEn $end
$var wire 1 5# instructionMemoryStall_out $end
$var wire 1 6# dataMemoryStallOut $end
$var wire 1 7# IF_ID_valid_out $end
$var wire 1 8# stall_from_HazardDet $end

$scope module instructionFetch $end
$var wire 1 9# PC_In [15] $end
$var wire 1 :# PC_In [14] $end
$var wire 1 ;# PC_In [13] $end
$var wire 1 <# PC_In [12] $end
$var wire 1 =# PC_In [11] $end
$var wire 1 ># PC_In [10] $end
$var wire 1 ?# PC_In [9] $end
$var wire 1 @# PC_In [8] $end
$var wire 1 A# PC_In [7] $end
$var wire 1 B# PC_In [6] $end
$var wire 1 C# PC_In [5] $end
$var wire 1 D# PC_In [4] $end
$var wire 1 E# PC_In [3] $end
$var wire 1 F# PC_In [2] $end
$var wire 1 G# PC_In [1] $end
$var wire 1 H# PC_In [0] $end
$var wire 1 5! clk $end
$var wire 1 -# dump $end
$var wire 1 7! rst $end
$var wire 1 2# branchingPCEnable_in $end
$var wire 1 3# PC_WriteEn_in $end
$var wire 1 8# stall $end
$var wire 1 I# MEM_WB_Branch_in $end
$var wire 1 6# dataMemoryStallOut $end
$var wire 1 K! PC_Next [15] $end
$var wire 1 L! PC_Next [14] $end
$var wire 1 M! PC_Next [13] $end
$var wire 1 N! PC_Next [12] $end
$var wire 1 O! PC_Next [11] $end
$var wire 1 P! PC_Next [10] $end
$var wire 1 Q! PC_Next [9] $end
$var wire 1 R! PC_Next [8] $end
$var wire 1 S! PC_Next [7] $end
$var wire 1 T! PC_Next [6] $end
$var wire 1 U! PC_Next [5] $end
$var wire 1 V! PC_Next [4] $end
$var wire 1 W! PC_Next [3] $end
$var wire 1 X! PC_Next [2] $end
$var wire 1 Y! PC_Next [1] $end
$var wire 1 Z! PC_Next [0] $end
$var wire 1 [! instruction [15] $end
$var wire 1 \! instruction [14] $end
$var wire 1 ]! instruction [13] $end
$var wire 1 ^! instruction [12] $end
$var wire 1 _! instruction [11] $end
$var wire 1 `! instruction [10] $end
$var wire 1 a! instruction [9] $end
$var wire 1 b! instruction [8] $end
$var wire 1 c! instruction [7] $end
$var wire 1 d! instruction [6] $end
$var wire 1 e! instruction [5] $end
$var wire 1 f! instruction [4] $end
$var wire 1 g! instruction [3] $end
$var wire 1 h! instruction [2] $end
$var wire 1 i! instruction [1] $end
$var wire 1 j! instruction [0] $end
$var wire 1 5# instructionMemoryStall_out $end
$var wire 1 J# currentPC [15] $end
$var wire 1 K# currentPC [14] $end
$var wire 1 L# currentPC [13] $end
$var wire 1 M# currentPC [12] $end
$var wire 1 N# currentPC [11] $end
$var wire 1 O# currentPC [10] $end
$var wire 1 P# currentPC [9] $end
$var wire 1 Q# currentPC [8] $end
$var wire 1 R# currentPC [7] $end
$var wire 1 S# currentPC [6] $end
$var wire 1 T# currentPC [5] $end
$var wire 1 U# currentPC [4] $end
$var wire 1 V# currentPC [3] $end
$var wire 1 W# currentPC [2] $end
$var wire 1 X# currentPC [1] $end
$var wire 1 Y# currentPC [0] $end
$var wire 1 Z# pc_increment [15] $end
$var wire 1 [# pc_increment [14] $end
$var wire 1 \# pc_increment [13] $end
$var wire 1 ]# pc_increment [12] $end
$var wire 1 ^# pc_increment [11] $end
$var wire 1 _# pc_increment [10] $end
$var wire 1 `# pc_increment [9] $end
$var wire 1 a# pc_increment [8] $end
$var wire 1 b# pc_increment [7] $end
$var wire 1 c# pc_increment [6] $end
$var wire 1 d# pc_increment [5] $end
$var wire 1 e# pc_increment [4] $end
$var wire 1 f# pc_increment [3] $end
$var wire 1 g# pc_increment [2] $end
$var wire 1 h# pc_increment [1] $end
$var wire 1 i# pc_increment [0] $end
$var wire 1 j# pcUpdated [15] $end
$var wire 1 k# pcUpdated [14] $end
$var wire 1 l# pcUpdated [13] $end
$var wire 1 m# pcUpdated [12] $end
$var wire 1 n# pcUpdated [11] $end
$var wire 1 o# pcUpdated [10] $end
$var wire 1 p# pcUpdated [9] $end
$var wire 1 q# pcUpdated [8] $end
$var wire 1 r# pcUpdated [7] $end
$var wire 1 s# pcUpdated [6] $end
$var wire 1 t# pcUpdated [5] $end
$var wire 1 u# pcUpdated [4] $end
$var wire 1 v# pcUpdated [3] $end
$var wire 1 w# pcUpdated [2] $end
$var wire 1 x# pcUpdated [1] $end
$var wire 1 y# pcUpdated [0] $end
$var wire 1 z# cacheHit $end
$var wire 1 {# instructionMemDone_out $end
$var wire 1 |# unalignedMemErr $end
$var wire 1 }# c_out $end

$scope module PC_Register $end
$var wire 1 J# readData [15] $end
$var wire 1 K# readData [14] $end
$var wire 1 L# readData [13] $end
$var wire 1 M# readData [12] $end
$var wire 1 N# readData [11] $end
$var wire 1 O# readData [10] $end
$var wire 1 P# readData [9] $end
$var wire 1 Q# readData [8] $end
$var wire 1 R# readData [7] $end
$var wire 1 S# readData [6] $end
$var wire 1 T# readData [5] $end
$var wire 1 U# readData [4] $end
$var wire 1 V# readData [3] $end
$var wire 1 W# readData [2] $end
$var wire 1 X# readData [1] $end
$var wire 1 Y# readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# writeEnable $end
$var wire 1 j# writeData [15] $end
$var wire 1 k# writeData [14] $end
$var wire 1 l# writeData [13] $end
$var wire 1 m# writeData [12] $end
$var wire 1 n# writeData [11] $end
$var wire 1 o# writeData [10] $end
$var wire 1 p# writeData [9] $end
$var wire 1 q# writeData [8] $end
$var wire 1 r# writeData [7] $end
$var wire 1 s# writeData [6] $end
$var wire 1 t# writeData [5] $end
$var wire 1 u# writeData [4] $end
$var wire 1 v# writeData [3] $end
$var wire 1 w# writeData [2] $end
$var wire 1 x# writeData [1] $end
$var wire 1 y# writeData [0] $end
$var wire 1 !$ in [15] $end
$var wire 1 "$ in [14] $end
$var wire 1 #$ in [13] $end
$var wire 1 $$ in [12] $end
$var wire 1 %$ in [11] $end
$var wire 1 &$ in [10] $end
$var wire 1 '$ in [9] $end
$var wire 1 ($ in [8] $end
$var wire 1 )$ in [7] $end
$var wire 1 *$ in [6] $end
$var wire 1 +$ in [5] $end
$var wire 1 ,$ in [4] $end
$var wire 1 -$ in [3] $end
$var wire 1 .$ in [2] $end
$var wire 1 /$ in [1] $end
$var wire 1 0$ in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 J# q $end
$var wire 1 !$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 1$ state $end
$var wire 1 2$ in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 K# q $end
$var wire 1 "$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 3$ state $end
$var wire 1 4$ in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 L# q $end
$var wire 1 #$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 5$ state $end
$var wire 1 6$ in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 M# q $end
$var wire 1 $$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 7$ state $end
$var wire 1 8$ in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 N# q $end
$var wire 1 %$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 9$ state $end
$var wire 1 :$ in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 O# q $end
$var wire 1 &$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 ;$ state $end
$var wire 1 <$ in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 P# q $end
$var wire 1 '$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 =$ state $end
$var wire 1 >$ in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 Q# q $end
$var wire 1 ($ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 ?$ state $end
$var wire 1 @$ in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 R# q $end
$var wire 1 )$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 A$ state $end
$var wire 1 B$ in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 S# q $end
$var wire 1 *$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 C$ state $end
$var wire 1 D$ in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 T# q $end
$var wire 1 +$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 E$ state $end
$var wire 1 F$ in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 U# q $end
$var wire 1 ,$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 G$ state $end
$var wire 1 H$ in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 V# q $end
$var wire 1 -$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 I$ state $end
$var wire 1 J$ in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 W# q $end
$var wire 1 .$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 K$ state $end
$var wire 1 L$ in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 X# q $end
$var wire 1 /$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 M$ state $end
$var wire 1 N$ in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 Y# q $end
$var wire 1 0$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# en $end
$var reg 1 O$ state $end
$var wire 1 P$ in $end
$upscope $end
$upscope $end

$scope module instructionMemory $end
$var wire 1 [! DataOut [15] $end
$var wire 1 \! DataOut [14] $end
$var wire 1 ]! DataOut [13] $end
$var wire 1 ^! DataOut [12] $end
$var wire 1 _! DataOut [11] $end
$var wire 1 `! DataOut [10] $end
$var wire 1 a! DataOut [9] $end
$var wire 1 b! DataOut [8] $end
$var wire 1 c! DataOut [7] $end
$var wire 1 d! DataOut [6] $end
$var wire 1 e! DataOut [5] $end
$var wire 1 f! DataOut [4] $end
$var wire 1 g! DataOut [3] $end
$var wire 1 h! DataOut [2] $end
$var wire 1 i! DataOut [1] $end
$var wire 1 j! DataOut [0] $end
$var wire 1 {# Done $end
$var wire 1 5# Stall $end
$var wire 1 z# CacheHit $end
$var wire 1 Q$ DataIn [15] $end
$var wire 1 R$ DataIn [14] $end
$var wire 1 S$ DataIn [13] $end
$var wire 1 T$ DataIn [12] $end
$var wire 1 U$ DataIn [11] $end
$var wire 1 V$ DataIn [10] $end
$var wire 1 W$ DataIn [9] $end
$var wire 1 X$ DataIn [8] $end
$var wire 1 Y$ DataIn [7] $end
$var wire 1 Z$ DataIn [6] $end
$var wire 1 [$ DataIn [5] $end
$var wire 1 \$ DataIn [4] $end
$var wire 1 ]$ DataIn [3] $end
$var wire 1 ^$ DataIn [2] $end
$var wire 1 _$ DataIn [1] $end
$var wire 1 `$ DataIn [0] $end
$var wire 1 J# Addr [15] $end
$var wire 1 K# Addr [14] $end
$var wire 1 L# Addr [13] $end
$var wire 1 M# Addr [12] $end
$var wire 1 N# Addr [11] $end
$var wire 1 O# Addr [10] $end
$var wire 1 P# Addr [9] $end
$var wire 1 Q# Addr [8] $end
$var wire 1 R# Addr [7] $end
$var wire 1 S# Addr [6] $end
$var wire 1 T# Addr [5] $end
$var wire 1 U# Addr [4] $end
$var wire 1 V# Addr [3] $end
$var wire 1 W# Addr [2] $end
$var wire 1 X# Addr [1] $end
$var wire 1 Y# Addr [0] $end
$var wire 1 a$ Wr $end
$var wire 1 b$ Rd $end
$var wire 1 -# createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 |# err $end
$var reg 1 c$ loaded $end
$var reg 17 d$ largest [16:0] $end
$var reg 32 e$ rand_pat [31:0] $end
$var wire 1 f$ ready $end
$var integer 32 g$ mcd $end
$var integer 32 h$ i $end
$var integer 32 i$ seed $end
$upscope $end

$scope module PC_Adder $end
$var wire 1 J# A [15] $end
$var wire 1 K# A [14] $end
$var wire 1 L# A [13] $end
$var wire 1 M# A [12] $end
$var wire 1 N# A [11] $end
$var wire 1 O# A [10] $end
$var wire 1 P# A [9] $end
$var wire 1 Q# A [8] $end
$var wire 1 R# A [7] $end
$var wire 1 S# A [6] $end
$var wire 1 T# A [5] $end
$var wire 1 U# A [4] $end
$var wire 1 V# A [3] $end
$var wire 1 W# A [2] $end
$var wire 1 X# A [1] $end
$var wire 1 Y# A [0] $end
$var wire 1 Z# B [15] $end
$var wire 1 [# B [14] $end
$var wire 1 \# B [13] $end
$var wire 1 ]# B [12] $end
$var wire 1 ^# B [11] $end
$var wire 1 _# B [10] $end
$var wire 1 `# B [9] $end
$var wire 1 a# B [8] $end
$var wire 1 b# B [7] $end
$var wire 1 c# B [6] $end
$var wire 1 d# B [5] $end
$var wire 1 e# B [4] $end
$var wire 1 f# B [3] $end
$var wire 1 g# B [2] $end
$var wire 1 h# B [1] $end
$var wire 1 i# B [0] $end
$var wire 1 j$ C_in $end
$var wire 1 K! S [15] $end
$var wire 1 L! S [14] $end
$var wire 1 M! S [13] $end
$var wire 1 N! S [12] $end
$var wire 1 O! S [11] $end
$var wire 1 P! S [10] $end
$var wire 1 Q! S [9] $end
$var wire 1 R! S [8] $end
$var wire 1 S! S [7] $end
$var wire 1 T! S [6] $end
$var wire 1 U! S [5] $end
$var wire 1 V! S [4] $end
$var wire 1 W! S [3] $end
$var wire 1 X! S [2] $end
$var wire 1 Y! S [1] $end
$var wire 1 Z! S [0] $end
$var wire 1 }# C_out $end
$var wire 1 k$ C_in1 $end
$var wire 1 l$ C_in2 $end
$var wire 1 m$ C_in3 $end

$scope module rcaBit3_0 $end
$var parameter 32 n$ N $end
$var wire 1 V# A [3] $end
$var wire 1 W# A [2] $end
$var wire 1 X# A [1] $end
$var wire 1 Y# A [0] $end
$var wire 1 f# B [3] $end
$var wire 1 g# B [2] $end
$var wire 1 h# B [1] $end
$var wire 1 i# B [0] $end
$var wire 1 j$ C_in $end
$var wire 1 W! S [3] $end
$var wire 1 X! S [2] $end
$var wire 1 Y! S [1] $end
$var wire 1 Z! S [0] $end
$var wire 1 k$ C_out $end
$var wire 1 o$ C_in1 $end
$var wire 1 p$ C_in2 $end
$var wire 1 q$ C_in3 $end

$scope module rcaBit0 $end
$var wire 1 Y# A $end
$var wire 1 i# B $end
$var wire 1 j$ C_in $end
$var wire 1 Z! S $end
$var wire 1 o$ C_out $end
$var wire 1 r$ A_nand_B $end
$var wire 1 s$ A_nand_Cin $end
$var wire 1 t$ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Y# in1 $end
$var wire 1 i# in2 $end
$var wire 1 j$ in3 $end
$var wire 1 Z! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Y# in1 $end
$var wire 1 i# in2 $end
$var wire 1 r$ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Y# in1 $end
$var wire 1 j$ in2 $end
$var wire 1 s$ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 i# in1 $end
$var wire 1 j$ in2 $end
$var wire 1 t$ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 r$ in1 $end
$var wire 1 s$ in2 $end
$var wire 1 t$ in3 $end
$var wire 1 o$ out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 X# A $end
$var wire 1 h# B $end
$var wire 1 o$ C_in $end
$var wire 1 Y! S $end
$var wire 1 p$ C_out $end
$var wire 1 u$ A_nand_B $end
$var wire 1 v$ A_nand_Cin $end
$var wire 1 w$ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 X# in1 $end
$var wire 1 h# in2 $end
$var wire 1 o$ in3 $end
$var wire 1 Y! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 X# in1 $end
$var wire 1 h# in2 $end
$var wire 1 u$ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 X# in1 $end
$var wire 1 o$ in2 $end
$var wire 1 v$ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 h# in1 $end
$var wire 1 o$ in2 $end
$var wire 1 w$ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 u$ in1 $end
$var wire 1 v$ in2 $end
$var wire 1 w$ in3 $end
$var wire 1 p$ out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 W# A $end
$var wire 1 g# B $end
$var wire 1 p$ C_in $end
$var wire 1 X! S $end
$var wire 1 q$ C_out $end
$var wire 1 x$ A_nand_B $end
$var wire 1 y$ A_nand_Cin $end
$var wire 1 z$ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 W# in1 $end
$var wire 1 g# in2 $end
$var wire 1 p$ in3 $end
$var wire 1 X! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 W# in1 $end
$var wire 1 g# in2 $end
$var wire 1 x$ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 W# in1 $end
$var wire 1 p$ in2 $end
$var wire 1 y$ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 g# in1 $end
$var wire 1 p$ in2 $end
$var wire 1 z$ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 x$ in1 $end
$var wire 1 y$ in2 $end
$var wire 1 z$ in3 $end
$var wire 1 q$ out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 V# A $end
$var wire 1 f# B $end
$var wire 1 q$ C_in $end
$var wire 1 W! S $end
$var wire 1 k$ C_out $end
$var wire 1 {$ A_nand_B $end
$var wire 1 |$ A_nand_Cin $end
$var wire 1 }$ B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 V# in1 $end
$var wire 1 f# in2 $end
$var wire 1 q$ in3 $end
$var wire 1 W! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 V# in1 $end
$var wire 1 f# in2 $end
$var wire 1 {$ out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 V# in1 $end
$var wire 1 q$ in2 $end
$var wire 1 |$ out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 f# in1 $end
$var wire 1 q$ in2 $end
$var wire 1 }$ out $end
$upscope $end

$scope module final_nand $end
$var wire 1 {$ in1 $end
$var wire 1 |$ in2 $end
$var wire 1 }$ in3 $end
$var wire 1 k$ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit7_4 $end
$var parameter 32 ~$ N $end
$var wire 1 R# A [3] $end
$var wire 1 S# A [2] $end
$var wire 1 T# A [1] $end
$var wire 1 U# A [0] $end
$var wire 1 b# B [3] $end
$var wire 1 c# B [2] $end
$var wire 1 d# B [1] $end
$var wire 1 e# B [0] $end
$var wire 1 k$ C_in $end
$var wire 1 S! S [3] $end
$var wire 1 T! S [2] $end
$var wire 1 U! S [1] $end
$var wire 1 V! S [0] $end
$var wire 1 l$ C_out $end
$var wire 1 !% C_in1 $end
$var wire 1 "% C_in2 $end
$var wire 1 #% C_in3 $end

$scope module rcaBit0 $end
$var wire 1 U# A $end
$var wire 1 e# B $end
$var wire 1 k$ C_in $end
$var wire 1 V! S $end
$var wire 1 !% C_out $end
$var wire 1 $% A_nand_B $end
$var wire 1 %% A_nand_Cin $end
$var wire 1 &% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 U# in1 $end
$var wire 1 e# in2 $end
$var wire 1 k$ in3 $end
$var wire 1 V! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 U# in1 $end
$var wire 1 e# in2 $end
$var wire 1 $% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 U# in1 $end
$var wire 1 k$ in2 $end
$var wire 1 %% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 e# in1 $end
$var wire 1 k$ in2 $end
$var wire 1 &% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 $% in1 $end
$var wire 1 %% in2 $end
$var wire 1 &% in3 $end
$var wire 1 !% out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 T# A $end
$var wire 1 d# B $end
$var wire 1 !% C_in $end
$var wire 1 U! S $end
$var wire 1 "% C_out $end
$var wire 1 '% A_nand_B $end
$var wire 1 (% A_nand_Cin $end
$var wire 1 )% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 T# in1 $end
$var wire 1 d# in2 $end
$var wire 1 !% in3 $end
$var wire 1 U! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 T# in1 $end
$var wire 1 d# in2 $end
$var wire 1 '% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 T# in1 $end
$var wire 1 !% in2 $end
$var wire 1 (% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 d# in1 $end
$var wire 1 !% in2 $end
$var wire 1 )% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 '% in1 $end
$var wire 1 (% in2 $end
$var wire 1 )% in3 $end
$var wire 1 "% out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 S# A $end
$var wire 1 c# B $end
$var wire 1 "% C_in $end
$var wire 1 T! S $end
$var wire 1 #% C_out $end
$var wire 1 *% A_nand_B $end
$var wire 1 +% A_nand_Cin $end
$var wire 1 ,% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 S# in1 $end
$var wire 1 c# in2 $end
$var wire 1 "% in3 $end
$var wire 1 T! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 S# in1 $end
$var wire 1 c# in2 $end
$var wire 1 *% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 S# in1 $end
$var wire 1 "% in2 $end
$var wire 1 +% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 c# in1 $end
$var wire 1 "% in2 $end
$var wire 1 ,% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 *% in1 $end
$var wire 1 +% in2 $end
$var wire 1 ,% in3 $end
$var wire 1 #% out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 R# A $end
$var wire 1 b# B $end
$var wire 1 #% C_in $end
$var wire 1 S! S $end
$var wire 1 l$ C_out $end
$var wire 1 -% A_nand_B $end
$var wire 1 .% A_nand_Cin $end
$var wire 1 /% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 R# in1 $end
$var wire 1 b# in2 $end
$var wire 1 #% in3 $end
$var wire 1 S! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 R# in1 $end
$var wire 1 b# in2 $end
$var wire 1 -% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 R# in1 $end
$var wire 1 #% in2 $end
$var wire 1 .% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 b# in1 $end
$var wire 1 #% in2 $end
$var wire 1 /% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 -% in1 $end
$var wire 1 .% in2 $end
$var wire 1 /% in3 $end
$var wire 1 l$ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit11_8 $end
$var parameter 32 0% N $end
$var wire 1 N# A [3] $end
$var wire 1 O# A [2] $end
$var wire 1 P# A [1] $end
$var wire 1 Q# A [0] $end
$var wire 1 ^# B [3] $end
$var wire 1 _# B [2] $end
$var wire 1 `# B [1] $end
$var wire 1 a# B [0] $end
$var wire 1 l$ C_in $end
$var wire 1 O! S [3] $end
$var wire 1 P! S [2] $end
$var wire 1 Q! S [1] $end
$var wire 1 R! S [0] $end
$var wire 1 m$ C_out $end
$var wire 1 1% C_in1 $end
$var wire 1 2% C_in2 $end
$var wire 1 3% C_in3 $end

$scope module rcaBit0 $end
$var wire 1 Q# A $end
$var wire 1 a# B $end
$var wire 1 l$ C_in $end
$var wire 1 R! S $end
$var wire 1 1% C_out $end
$var wire 1 4% A_nand_B $end
$var wire 1 5% A_nand_Cin $end
$var wire 1 6% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Q# in1 $end
$var wire 1 a# in2 $end
$var wire 1 l$ in3 $end
$var wire 1 R! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Q# in1 $end
$var wire 1 a# in2 $end
$var wire 1 4% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Q# in1 $end
$var wire 1 l$ in2 $end
$var wire 1 5% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 a# in1 $end
$var wire 1 l$ in2 $end
$var wire 1 6% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 4% in1 $end
$var wire 1 5% in2 $end
$var wire 1 6% in3 $end
$var wire 1 1% out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 P# A $end
$var wire 1 `# B $end
$var wire 1 1% C_in $end
$var wire 1 Q! S $end
$var wire 1 2% C_out $end
$var wire 1 7% A_nand_B $end
$var wire 1 8% A_nand_Cin $end
$var wire 1 9% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 P# in1 $end
$var wire 1 `# in2 $end
$var wire 1 1% in3 $end
$var wire 1 Q! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 P# in1 $end
$var wire 1 `# in2 $end
$var wire 1 7% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 P# in1 $end
$var wire 1 1% in2 $end
$var wire 1 8% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 `# in1 $end
$var wire 1 1% in2 $end
$var wire 1 9% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 7% in1 $end
$var wire 1 8% in2 $end
$var wire 1 9% in3 $end
$var wire 1 2% out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 O# A $end
$var wire 1 _# B $end
$var wire 1 2% C_in $end
$var wire 1 P! S $end
$var wire 1 3% C_out $end
$var wire 1 :% A_nand_B $end
$var wire 1 ;% A_nand_Cin $end
$var wire 1 <% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 O# in1 $end
$var wire 1 _# in2 $end
$var wire 1 2% in3 $end
$var wire 1 P! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 O# in1 $end
$var wire 1 _# in2 $end
$var wire 1 :% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 O# in1 $end
$var wire 1 2% in2 $end
$var wire 1 ;% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 _# in1 $end
$var wire 1 2% in2 $end
$var wire 1 <% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 :% in1 $end
$var wire 1 ;% in2 $end
$var wire 1 <% in3 $end
$var wire 1 3% out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 N# A $end
$var wire 1 ^# B $end
$var wire 1 3% C_in $end
$var wire 1 O! S $end
$var wire 1 m$ C_out $end
$var wire 1 =% A_nand_B $end
$var wire 1 >% A_nand_Cin $end
$var wire 1 ?% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 N# in1 $end
$var wire 1 ^# in2 $end
$var wire 1 3% in3 $end
$var wire 1 O! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 N# in1 $end
$var wire 1 ^# in2 $end
$var wire 1 =% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 N# in1 $end
$var wire 1 3% in2 $end
$var wire 1 >% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ^# in1 $end
$var wire 1 3% in2 $end
$var wire 1 ?% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 =% in1 $end
$var wire 1 >% in2 $end
$var wire 1 ?% in3 $end
$var wire 1 m$ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit15_12 $end
$var parameter 32 @% N $end
$var wire 1 J# A [3] $end
$var wire 1 K# A [2] $end
$var wire 1 L# A [1] $end
$var wire 1 M# A [0] $end
$var wire 1 Z# B [3] $end
$var wire 1 [# B [2] $end
$var wire 1 \# B [1] $end
$var wire 1 ]# B [0] $end
$var wire 1 m$ C_in $end
$var wire 1 K! S [3] $end
$var wire 1 L! S [2] $end
$var wire 1 M! S [1] $end
$var wire 1 N! S [0] $end
$var wire 1 }# C_out $end
$var wire 1 A% C_in1 $end
$var wire 1 B% C_in2 $end
$var wire 1 C% C_in3 $end

$scope module rcaBit0 $end
$var wire 1 M# A $end
$var wire 1 ]# B $end
$var wire 1 m$ C_in $end
$var wire 1 N! S $end
$var wire 1 A% C_out $end
$var wire 1 D% A_nand_B $end
$var wire 1 E% A_nand_Cin $end
$var wire 1 F% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 M# in1 $end
$var wire 1 ]# in2 $end
$var wire 1 m$ in3 $end
$var wire 1 N! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 M# in1 $end
$var wire 1 ]# in2 $end
$var wire 1 D% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 M# in1 $end
$var wire 1 m$ in2 $end
$var wire 1 E% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ]# in1 $end
$var wire 1 m$ in2 $end
$var wire 1 F% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 D% in1 $end
$var wire 1 E% in2 $end
$var wire 1 F% in3 $end
$var wire 1 A% out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 L# A $end
$var wire 1 \# B $end
$var wire 1 A% C_in $end
$var wire 1 M! S $end
$var wire 1 B% C_out $end
$var wire 1 G% A_nand_B $end
$var wire 1 H% A_nand_Cin $end
$var wire 1 I% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 L# in1 $end
$var wire 1 \# in2 $end
$var wire 1 A% in3 $end
$var wire 1 M! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 L# in1 $end
$var wire 1 \# in2 $end
$var wire 1 G% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 L# in1 $end
$var wire 1 A% in2 $end
$var wire 1 H% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 \# in1 $end
$var wire 1 A% in2 $end
$var wire 1 I% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 G% in1 $end
$var wire 1 H% in2 $end
$var wire 1 I% in3 $end
$var wire 1 B% out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 K# A $end
$var wire 1 [# B $end
$var wire 1 B% C_in $end
$var wire 1 L! S $end
$var wire 1 C% C_out $end
$var wire 1 J% A_nand_B $end
$var wire 1 K% A_nand_Cin $end
$var wire 1 L% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 K# in1 $end
$var wire 1 [# in2 $end
$var wire 1 B% in3 $end
$var wire 1 L! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 K# in1 $end
$var wire 1 [# in2 $end
$var wire 1 J% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 K# in1 $end
$var wire 1 B% in2 $end
$var wire 1 K% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 [# in1 $end
$var wire 1 B% in2 $end
$var wire 1 L% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 J% in1 $end
$var wire 1 K% in2 $end
$var wire 1 L% in3 $end
$var wire 1 C% out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 J# A $end
$var wire 1 Z# B $end
$var wire 1 C% C_in $end
$var wire 1 K! S $end
$var wire 1 }# C_out $end
$var wire 1 M% A_nand_B $end
$var wire 1 N% A_nand_Cin $end
$var wire 1 O% B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 J# in1 $end
$var wire 1 Z# in2 $end
$var wire 1 C% in3 $end
$var wire 1 K! out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 J# in1 $end
$var wire 1 Z# in2 $end
$var wire 1 M% out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 J# in1 $end
$var wire 1 C% in2 $end
$var wire 1 N% out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 Z# in1 $end
$var wire 1 C% in2 $end
$var wire 1 O% out $end
$upscope $end

$scope module final_nand $end
$var wire 1 M% in1 $end
$var wire 1 N% in2 $end
$var wire 1 O% in3 $end
$var wire 1 }# out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IF_ID_Stage $end
$var wire 1 [! instruction_in [15] $end
$var wire 1 \! instruction_in [14] $end
$var wire 1 ]! instruction_in [13] $end
$var wire 1 ^! instruction_in [12] $end
$var wire 1 _! instruction_in [11] $end
$var wire 1 `! instruction_in [10] $end
$var wire 1 a! instruction_in [9] $end
$var wire 1 b! instruction_in [8] $end
$var wire 1 c! instruction_in [7] $end
$var wire 1 d! instruction_in [6] $end
$var wire 1 e! instruction_in [5] $end
$var wire 1 f! instruction_in [4] $end
$var wire 1 g! instruction_in [3] $end
$var wire 1 h! instruction_in [2] $end
$var wire 1 i! instruction_in [1] $end
$var wire 1 j! instruction_in [0] $end
$var wire 1 K! PC_In [15] $end
$var wire 1 L! PC_In [14] $end
$var wire 1 M! PC_In [13] $end
$var wire 1 N! PC_In [12] $end
$var wire 1 O! PC_In [11] $end
$var wire 1 P! PC_In [10] $end
$var wire 1 Q! PC_In [9] $end
$var wire 1 R! PC_In [8] $end
$var wire 1 S! PC_In [7] $end
$var wire 1 T! PC_In [6] $end
$var wire 1 U! PC_In [5] $end
$var wire 1 V! PC_In [4] $end
$var wire 1 W! PC_In [3] $end
$var wire 1 X! PC_In [2] $end
$var wire 1 Y! PC_In [1] $end
$var wire 1 Z! PC_In [0] $end
$var wire 1 P% en $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 2# BranchingOrJumping_in $end
$var wire 1 5# instructionMemoryStall $end
$var wire 1 ]" instruction_out [15] $end
$var wire 1 ^" instruction_out [14] $end
$var wire 1 _" instruction_out [13] $end
$var wire 1 `" instruction_out [12] $end
$var wire 1 a" instruction_out [11] $end
$var wire 1 b" instruction_out [10] $end
$var wire 1 c" instruction_out [9] $end
$var wire 1 d" instruction_out [8] $end
$var wire 1 e" instruction_out [7] $end
$var wire 1 f" instruction_out [6] $end
$var wire 1 g" instruction_out [5] $end
$var wire 1 h" instruction_out [4] $end
$var wire 1 i" instruction_out [3] $end
$var wire 1 j" instruction_out [2] $end
$var wire 1 k" instruction_out [1] $end
$var wire 1 l" instruction_out [0] $end
$var wire 1 m" PC_Out [15] $end
$var wire 1 n" PC_Out [14] $end
$var wire 1 o" PC_Out [13] $end
$var wire 1 p" PC_Out [12] $end
$var wire 1 q" PC_Out [11] $end
$var wire 1 r" PC_Out [10] $end
$var wire 1 s" PC_Out [9] $end
$var wire 1 t" PC_Out [8] $end
$var wire 1 u" PC_Out [7] $end
$var wire 1 v" PC_Out [6] $end
$var wire 1 w" PC_Out [5] $end
$var wire 1 x" PC_Out [4] $end
$var wire 1 y" PC_Out [3] $end
$var wire 1 z" PC_Out [2] $end
$var wire 1 {" PC_Out [1] $end
$var wire 1 |" PC_Out [0] $end
$var wire 1 7# valid_out $end
$var wire 1 Q% instruction_in_NOP_sel [15] $end
$var wire 1 R% instruction_in_NOP_sel [14] $end
$var wire 1 S% instruction_in_NOP_sel [13] $end
$var wire 1 T% instruction_in_NOP_sel [12] $end
$var wire 1 U% instruction_in_NOP_sel [11] $end
$var wire 1 V% instruction_in_NOP_sel [10] $end
$var wire 1 W% instruction_in_NOP_sel [9] $end
$var wire 1 X% instruction_in_NOP_sel [8] $end
$var wire 1 Y% instruction_in_NOP_sel [7] $end
$var wire 1 Z% instruction_in_NOP_sel [6] $end
$var wire 1 [% instruction_in_NOP_sel [5] $end
$var wire 1 \% instruction_in_NOP_sel [4] $end
$var wire 1 ]% instruction_in_NOP_sel [3] $end
$var wire 1 ^% instruction_in_NOP_sel [2] $end
$var wire 1 _% instruction_in_NOP_sel [1] $end
$var wire 1 `% instruction_in_NOP_sel [0] $end
$var wire 1 a% valid_in $end

$scope module dff_IF_ID_valid_out $end
$var wire 1 7# q $end
$var wire 1 a% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 b% state $end
$var wire 1 c% in $end
$upscope $end

$scope module regFile_instruction $end
$var wire 1 ]" readData [15] $end
$var wire 1 ^" readData [14] $end
$var wire 1 _" readData [13] $end
$var wire 1 `" readData [12] $end
$var wire 1 a" readData [11] $end
$var wire 1 b" readData [10] $end
$var wire 1 c" readData [9] $end
$var wire 1 d" readData [8] $end
$var wire 1 e" readData [7] $end
$var wire 1 f" readData [6] $end
$var wire 1 g" readData [5] $end
$var wire 1 h" readData [4] $end
$var wire 1 i" readData [3] $end
$var wire 1 j" readData [2] $end
$var wire 1 k" readData [1] $end
$var wire 1 l" readData [0] $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% writeEnable $end
$var wire 1 Q% writeData [15] $end
$var wire 1 R% writeData [14] $end
$var wire 1 S% writeData [13] $end
$var wire 1 T% writeData [12] $end
$var wire 1 U% writeData [11] $end
$var wire 1 V% writeData [10] $end
$var wire 1 W% writeData [9] $end
$var wire 1 X% writeData [8] $end
$var wire 1 Y% writeData [7] $end
$var wire 1 Z% writeData [6] $end
$var wire 1 [% writeData [5] $end
$var wire 1 \% writeData [4] $end
$var wire 1 ]% writeData [3] $end
$var wire 1 ^% writeData [2] $end
$var wire 1 _% writeData [1] $end
$var wire 1 `% writeData [0] $end
$var wire 1 e% in [15] $end
$var wire 1 f% in [14] $end
$var wire 1 g% in [13] $end
$var wire 1 h% in [12] $end
$var wire 1 i% in [11] $end
$var wire 1 j% in [10] $end
$var wire 1 k% in [9] $end
$var wire 1 l% in [8] $end
$var wire 1 m% in [7] $end
$var wire 1 n% in [6] $end
$var wire 1 o% in [5] $end
$var wire 1 p% in [4] $end
$var wire 1 q% in [3] $end
$var wire 1 r% in [2] $end
$var wire 1 s% in [1] $end
$var wire 1 t% in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 ]" q $end
$var wire 1 e% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 u% state $end
$var wire 1 v% in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 ^" q $end
$var wire 1 f% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 w% state $end
$var wire 1 x% in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 _" q $end
$var wire 1 g% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 y% state $end
$var wire 1 z% in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 `" q $end
$var wire 1 h% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 {% state $end
$var wire 1 |% in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 a" q $end
$var wire 1 i% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 }% state $end
$var wire 1 ~% in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 b" q $end
$var wire 1 j% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 !& state $end
$var wire 1 "& in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 c" q $end
$var wire 1 k% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 #& state $end
$var wire 1 $& in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 d" q $end
$var wire 1 l% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 %& state $end
$var wire 1 && in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 e" q $end
$var wire 1 m% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 '& state $end
$var wire 1 (& in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 f" q $end
$var wire 1 n% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 )& state $end
$var wire 1 *& in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 g" q $end
$var wire 1 o% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 +& state $end
$var wire 1 ,& in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 h" q $end
$var wire 1 p% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 -& state $end
$var wire 1 .& in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 i" q $end
$var wire 1 q% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 /& state $end
$var wire 1 0& in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 j" q $end
$var wire 1 r% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 1& state $end
$var wire 1 2& in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 k" q $end
$var wire 1 s% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 3& state $end
$var wire 1 4& in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 l" q $end
$var wire 1 t% d $end
$var wire 1 5! clk $end
$var wire 1 d% rst $end
$var wire 1 P% en $end
$var reg 1 5& state $end
$var wire 1 6& in $end
$upscope $end
$upscope $end

$scope module regFile_PC $end
$var wire 1 m" readData [15] $end
$var wire 1 n" readData [14] $end
$var wire 1 o" readData [13] $end
$var wire 1 p" readData [12] $end
$var wire 1 q" readData [11] $end
$var wire 1 r" readData [10] $end
$var wire 1 s" readData [9] $end
$var wire 1 t" readData [8] $end
$var wire 1 u" readData [7] $end
$var wire 1 v" readData [6] $end
$var wire 1 w" readData [5] $end
$var wire 1 x" readData [4] $end
$var wire 1 y" readData [3] $end
$var wire 1 z" readData [2] $end
$var wire 1 {" readData [1] $end
$var wire 1 |" readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% writeEnable $end
$var wire 1 K! writeData [15] $end
$var wire 1 L! writeData [14] $end
$var wire 1 M! writeData [13] $end
$var wire 1 N! writeData [12] $end
$var wire 1 O! writeData [11] $end
$var wire 1 P! writeData [10] $end
$var wire 1 Q! writeData [9] $end
$var wire 1 R! writeData [8] $end
$var wire 1 S! writeData [7] $end
$var wire 1 T! writeData [6] $end
$var wire 1 U! writeData [5] $end
$var wire 1 V! writeData [4] $end
$var wire 1 W! writeData [3] $end
$var wire 1 X! writeData [2] $end
$var wire 1 Y! writeData [1] $end
$var wire 1 Z! writeData [0] $end
$var wire 1 7& in [15] $end
$var wire 1 8& in [14] $end
$var wire 1 9& in [13] $end
$var wire 1 :& in [12] $end
$var wire 1 ;& in [11] $end
$var wire 1 <& in [10] $end
$var wire 1 =& in [9] $end
$var wire 1 >& in [8] $end
$var wire 1 ?& in [7] $end
$var wire 1 @& in [6] $end
$var wire 1 A& in [5] $end
$var wire 1 B& in [4] $end
$var wire 1 C& in [3] $end
$var wire 1 D& in [2] $end
$var wire 1 E& in [1] $end
$var wire 1 F& in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 m" q $end
$var wire 1 7& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 G& state $end
$var wire 1 H& in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 n" q $end
$var wire 1 8& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 I& state $end
$var wire 1 J& in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 o" q $end
$var wire 1 9& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 K& state $end
$var wire 1 L& in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 p" q $end
$var wire 1 :& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 M& state $end
$var wire 1 N& in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 q" q $end
$var wire 1 ;& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 O& state $end
$var wire 1 P& in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 r" q $end
$var wire 1 <& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 Q& state $end
$var wire 1 R& in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 s" q $end
$var wire 1 =& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 S& state $end
$var wire 1 T& in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 t" q $end
$var wire 1 >& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 U& state $end
$var wire 1 V& in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 u" q $end
$var wire 1 ?& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 W& state $end
$var wire 1 X& in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 v" q $end
$var wire 1 @& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 Y& state $end
$var wire 1 Z& in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 w" q $end
$var wire 1 A& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 [& state $end
$var wire 1 \& in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 x" q $end
$var wire 1 B& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 ]& state $end
$var wire 1 ^& in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 y" q $end
$var wire 1 C& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 _& state $end
$var wire 1 `& in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 z" q $end
$var wire 1 D& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 a& state $end
$var wire 1 b& in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 {" q $end
$var wire 1 E& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 c& state $end
$var wire 1 d& in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 |" q $end
$var wire 1 F& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% en $end
$var reg 1 e& state $end
$var wire 1 f& in $end
$upscope $end
$upscope $end
$upscope $end

$scope module instructionDecode $end
$var wire 1 ]" instruction [15] $end
$var wire 1 ^" instruction [14] $end
$var wire 1 _" instruction [13] $end
$var wire 1 `" instruction [12] $end
$var wire 1 a" instruction [11] $end
$var wire 1 b" instruction [10] $end
$var wire 1 c" instruction [9] $end
$var wire 1 d" instruction [8] $end
$var wire 1 e" instruction [7] $end
$var wire 1 f" instruction [6] $end
$var wire 1 g" instruction [5] $end
$var wire 1 h" instruction [4] $end
$var wire 1 i" instruction [3] $end
$var wire 1 j" instruction [2] $end
$var wire 1 k" instruction [1] $end
$var wire 1 l" instruction [0] $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 g& RegWrite_in $end
$var wire 1 7# valid_in $end
$var wire 1 %# writeRegister [2] $end
$var wire 1 &# writeRegister [1] $end
$var wire 1 '# writeRegister [0] $end
$var wire 1 .# err $end
$var wire 1 -# dump $end
$var wire 1 =" A [15] $end
$var wire 1 >" A [14] $end
$var wire 1 ?" A [13] $end
$var wire 1 @" A [12] $end
$var wire 1 A" A [11] $end
$var wire 1 B" A [10] $end
$var wire 1 C" A [9] $end
$var wire 1 D" A [8] $end
$var wire 1 E" A [7] $end
$var wire 1 F" A [6] $end
$var wire 1 G" A [5] $end
$var wire 1 H" A [4] $end
$var wire 1 I" A [3] $end
$var wire 1 J" A [2] $end
$var wire 1 K" A [1] $end
$var wire 1 L" A [0] $end
$var wire 1 M" B [15] $end
$var wire 1 N" B [14] $end
$var wire 1 O" B [13] $end
$var wire 1 P" B [12] $end
$var wire 1 Q" B [11] $end
$var wire 1 R" B [10] $end
$var wire 1 S" B [9] $end
$var wire 1 T" B [8] $end
$var wire 1 U" B [7] $end
$var wire 1 V" B [6] $end
$var wire 1 W" B [5] $end
$var wire 1 X" B [4] $end
$var wire 1 Y" B [3] $end
$var wire 1 Z" B [2] $end
$var wire 1 [" B [1] $end
$var wire 1 \" B [0] $end
$var wire 1 h& RegWrite $end
$var wire 1 i& controlErr $end
$var wire 1 j& DMemWrite $end
$var wire 1 k& ALUSrc2 $end
$var wire 1 l& PCSrc $end
$var wire 1 m& PCImm $end
$var wire 1 n& MemToReg $end
$var wire 1 o& DMemEn $end
$var wire 1 p& Branching $end
$var wire 1 q& BranchingOrJumping $end
$var wire 1 r& DMemDump $end
$var wire 1 s& Jump $end
$var wire 1 t& invA $end
$var wire 1 u& invB $end
$var wire 1 v& Cin $end
$var wire 1 w& ReadingRs $end
$var wire 1 x& ReadingRt $end
$var wire 1 y& RegDest [1] $end
$var wire 1 z& RegDest [0] $end
$var wire 1 {& SESel [2] $end
$var wire 1 |& SESel [1] $end
$var wire 1 }& SESel [0] $end
$var wire 1 ~& regErr $end
$var wire 1 !' S_extend5_out [15] $end
$var wire 1 "' S_extend5_out [14] $end
$var wire 1 #' S_extend5_out [13] $end
$var wire 1 $' S_extend5_out [12] $end
$var wire 1 %' S_extend5_out [11] $end
$var wire 1 &' S_extend5_out [10] $end
$var wire 1 '' S_extend5_out [9] $end
$var wire 1 (' S_extend5_out [8] $end
$var wire 1 )' S_extend5_out [7] $end
$var wire 1 *' S_extend5_out [6] $end
$var wire 1 +' S_extend5_out [5] $end
$var wire 1 ,' S_extend5_out [4] $end
$var wire 1 -' S_extend5_out [3] $end
$var wire 1 .' S_extend5_out [2] $end
$var wire 1 /' S_extend5_out [1] $end
$var wire 1 0' S_extend5_out [0] $end
$var wire 1 1' S_extend8_out [15] $end
$var wire 1 2' S_extend8_out [14] $end
$var wire 1 3' S_extend8_out [13] $end
$var wire 1 4' S_extend8_out [12] $end
$var wire 1 5' S_extend8_out [11] $end
$var wire 1 6' S_extend8_out [10] $end
$var wire 1 7' S_extend8_out [9] $end
$var wire 1 8' S_extend8_out [8] $end
$var wire 1 9' S_extend8_out [7] $end
$var wire 1 :' S_extend8_out [6] $end
$var wire 1 ;' S_extend8_out [5] $end
$var wire 1 <' S_extend8_out [4] $end
$var wire 1 =' S_extend8_out [3] $end
$var wire 1 >' S_extend8_out [2] $end
$var wire 1 ?' S_extend8_out [1] $end
$var wire 1 @' S_extend8_out [0] $end
$var wire 1 A' S_extend11_out [15] $end
$var wire 1 B' S_extend11_out [14] $end
$var wire 1 C' S_extend11_out [13] $end
$var wire 1 D' S_extend11_out [12] $end
$var wire 1 E' S_extend11_out [11] $end
$var wire 1 F' S_extend11_out [10] $end
$var wire 1 G' S_extend11_out [9] $end
$var wire 1 H' S_extend11_out [8] $end
$var wire 1 I' S_extend11_out [7] $end
$var wire 1 J' S_extend11_out [6] $end
$var wire 1 K' S_extend11_out [5] $end
$var wire 1 L' S_extend11_out [4] $end
$var wire 1 M' S_extend11_out [3] $end
$var wire 1 N' S_extend11_out [2] $end
$var wire 1 O' S_extend11_out [1] $end
$var wire 1 P' S_extend11_out [0] $end
$var wire 1 Q' Z_extend8_out [15] $end
$var wire 1 R' Z_extend8_out [14] $end
$var wire 1 S' Z_extend8_out [13] $end
$var wire 1 T' Z_extend8_out [12] $end
$var wire 1 U' Z_extend8_out [11] $end
$var wire 1 V' Z_extend8_out [10] $end
$var wire 1 W' Z_extend8_out [9] $end
$var wire 1 X' Z_extend8_out [8] $end
$var wire 1 Y' Z_extend8_out [7] $end
$var wire 1 Z' Z_extend8_out [6] $end
$var wire 1 [' Z_extend8_out [5] $end
$var wire 1 \' Z_extend8_out [4] $end
$var wire 1 ]' Z_extend8_out [3] $end
$var wire 1 ^' Z_extend8_out [2] $end
$var wire 1 _' Z_extend8_out [1] $end
$var wire 1 `' Z_extend8_out [0] $end
$var wire 1 a' Z_extend5_out [15] $end
$var wire 1 b' Z_extend5_out [14] $end
$var wire 1 c' Z_extend5_out [13] $end
$var wire 1 d' Z_extend5_out [12] $end
$var wire 1 e' Z_extend5_out [11] $end
$var wire 1 f' Z_extend5_out [10] $end
$var wire 1 g' Z_extend5_out [9] $end
$var wire 1 h' Z_extend5_out [8] $end
$var wire 1 i' Z_extend5_out [7] $end
$var wire 1 j' Z_extend5_out [6] $end
$var wire 1 k' Z_extend5_out [5] $end
$var wire 1 l' Z_extend5_out [4] $end
$var wire 1 m' Z_extend5_out [3] $end
$var wire 1 n' Z_extend5_out [2] $end
$var wire 1 o' Z_extend5_out [1] $end
$var wire 1 p' Z_extend5_out [0] $end

$scope module controlUnit $end
$var parameter 1 q' assert $end
$var parameter 1 r' no_assert $end
$var parameter 5 s' SUBI $end
$var parameter 5 t' ADDI $end
$var parameter 5 u' ANDNI $end
$var parameter 5 v' XORI $end
$var parameter 5 w' ROLI $end
$var parameter 5 x' SLLI $end
$var parameter 5 y' RORI $end
$var parameter 5 z' SRLI $end
$var parameter 5 {' ST $end
$var parameter 5 |' LD $end
$var parameter 5 }' STU $end
$var parameter 5 ~' BTR $end
$var parameter 5 !( ALU_1 $end
$var parameter 2 "( ADD $end
$var parameter 2 #( SUB $end
$var parameter 2 $( XOR $end
$var parameter 2 %( ANDN $end
$var parameter 5 &( ALU_2 $end
$var parameter 2 '( ROL $end
$var parameter 2 (( SLL $end
$var parameter 2 )( ROR $end
$var parameter 2 *( SRL $end
$var parameter 5 +( SEQ $end
$var parameter 5 ,( SLT $end
$var parameter 5 -( SLE $end
$var parameter 5 .( SCO $end
$var parameter 5 /( BNEZ $end
$var parameter 5 0( BEQZ $end
$var parameter 5 1( BLTZ $end
$var parameter 5 2( BGEZ $end
$var parameter 5 3( LBI $end
$var parameter 5 4( SLBI $end
$var parameter 5 5( J $end
$var parameter 5 6( JR $end
$var parameter 5 7( JAL $end
$var parameter 5 8( JALR $end
$var parameter 5 9( SIIC $end
$var parameter 5 :( NOP $end
$var parameter 5 ;( RTI $end
$var parameter 5 <( HALT $end
$var wire 1 ]" OpCode [4] $end
$var wire 1 ^" OpCode [3] $end
$var wire 1 _" OpCode [2] $end
$var wire 1 `" OpCode [1] $end
$var wire 1 a" OpCode [0] $end
$var wire 1 k" Funct [1] $end
$var wire 1 l" Funct [0] $end
$var wire 1 7! rst $end
$var wire 1 7# valid $end
$var wire 1 i& err $end
$var wire 1 h& RegWrite $end
$var wire 1 j& DMemWrite $end
$var wire 1 o& DMemEn $end
$var wire 1 k& ALUSrc2 $end
$var wire 1 l& PCSrc $end
$var wire 1 m& PCImm $end
$var wire 1 n& MemToReg $end
$var wire 1 r& DMemDump $end
$var wire 1 s& Jump $end
$var wire 1 t& invA $end
$var wire 1 u& invB $end
$var wire 1 v& Cin $end
$var wire 1 p& Branching $end
$var wire 1 q& BranchingOrJumping $end
$var wire 1 w& ReadingRs $end
$var wire 1 x& ReadingRt $end
$var wire 1 y& RegDst [1] $end
$var wire 1 z& RegDst [0] $end
$var wire 1 {& SESel [2] $end
$var wire 1 |& SESel [1] $end
$var wire 1 }& SESel [0] $end
$var reg 1 =( errRegister $end
$var reg 1 >( JumpRegister $end
$var reg 1 ?( invA_Register $end
$var reg 1 @( invB_Register $end
$var reg 1 A( Cin_Register $end
$var reg 1 B( RegWriteRegister $end
$var reg 1 C( DMemWriteRegister $end
$var reg 1 D( DMemEnRegister $end
$var reg 1 E( PCImmRegister $end
$var reg 1 F( ALUSrc2Register $end
$var reg 1 G( PCSrcRegister $end
$var reg 1 H( MemToRegRegister $end
$var reg 1 I( DMemDumpRegister $end
$var reg 2 J( RegDstRegister [1:0] $end
$var reg 3 K( SESelRegister [2:0] $end
$var reg 1 L( BranchingRegister $end
$var reg 1 M( BranchOrJumpRegister $end
$var reg 1 N( ReadingRsRegister $end
$var reg 1 O( ReadingRtRegister $end
$upscope $end

$scope module regFile $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 b" readReg1Sel [2] $end
$var wire 1 c" readReg1Sel [1] $end
$var wire 1 d" readReg1Sel [0] $end
$var wire 1 e" readReg2Sel [2] $end
$var wire 1 f" readReg2Sel [1] $end
$var wire 1 g" readReg2Sel [0] $end
$var wire 1 %# writeRegSel [2] $end
$var wire 1 &# writeRegSel [1] $end
$var wire 1 '# writeRegSel [0] $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 g& writeEn $end
$var wire 1 =" readData1 [15] $end
$var wire 1 >" readData1 [14] $end
$var wire 1 ?" readData1 [13] $end
$var wire 1 @" readData1 [12] $end
$var wire 1 A" readData1 [11] $end
$var wire 1 B" readData1 [10] $end
$var wire 1 C" readData1 [9] $end
$var wire 1 D" readData1 [8] $end
$var wire 1 E" readData1 [7] $end
$var wire 1 F" readData1 [6] $end
$var wire 1 G" readData1 [5] $end
$var wire 1 H" readData1 [4] $end
$var wire 1 I" readData1 [3] $end
$var wire 1 J" readData1 [2] $end
$var wire 1 K" readData1 [1] $end
$var wire 1 L" readData1 [0] $end
$var wire 1 M" readData2 [15] $end
$var wire 1 N" readData2 [14] $end
$var wire 1 O" readData2 [13] $end
$var wire 1 P" readData2 [12] $end
$var wire 1 Q" readData2 [11] $end
$var wire 1 R" readData2 [10] $end
$var wire 1 S" readData2 [9] $end
$var wire 1 T" readData2 [8] $end
$var wire 1 U" readData2 [7] $end
$var wire 1 V" readData2 [6] $end
$var wire 1 W" readData2 [5] $end
$var wire 1 X" readData2 [4] $end
$var wire 1 Y" readData2 [3] $end
$var wire 1 Z" readData2 [2] $end
$var wire 1 [" readData2 [1] $end
$var wire 1 \" readData2 [0] $end
$var wire 1 ~& err $end
$var wire 1 P( readOutput1 [15] $end
$var wire 1 Q( readOutput1 [14] $end
$var wire 1 R( readOutput1 [13] $end
$var wire 1 S( readOutput1 [12] $end
$var wire 1 T( readOutput1 [11] $end
$var wire 1 U( readOutput1 [10] $end
$var wire 1 V( readOutput1 [9] $end
$var wire 1 W( readOutput1 [8] $end
$var wire 1 X( readOutput1 [7] $end
$var wire 1 Y( readOutput1 [6] $end
$var wire 1 Z( readOutput1 [5] $end
$var wire 1 [( readOutput1 [4] $end
$var wire 1 \( readOutput1 [3] $end
$var wire 1 ]( readOutput1 [2] $end
$var wire 1 ^( readOutput1 [1] $end
$var wire 1 _( readOutput1 [0] $end
$var wire 1 `( readOutput2 [15] $end
$var wire 1 a( readOutput2 [14] $end
$var wire 1 b( readOutput2 [13] $end
$var wire 1 c( readOutput2 [12] $end
$var wire 1 d( readOutput2 [11] $end
$var wire 1 e( readOutput2 [10] $end
$var wire 1 f( readOutput2 [9] $end
$var wire 1 g( readOutput2 [8] $end
$var wire 1 h( readOutput2 [7] $end
$var wire 1 i( readOutput2 [6] $end
$var wire 1 j( readOutput2 [5] $end
$var wire 1 k( readOutput2 [4] $end
$var wire 1 l( readOutput2 [3] $end
$var wire 1 m( readOutput2 [2] $end
$var wire 1 n( readOutput2 [1] $end
$var wire 1 o( readOutput2 [0] $end
$var wire 1 p( rfBypass1 $end
$var wire 1 q( rfBypass2 $end

$scope module registerFile $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 b" readReg1Sel [2] $end
$var wire 1 c" readReg1Sel [1] $end
$var wire 1 d" readReg1Sel [0] $end
$var wire 1 e" readReg2Sel [2] $end
$var wire 1 f" readReg2Sel [1] $end
$var wire 1 g" readReg2Sel [0] $end
$var wire 1 %# writeRegSel [2] $end
$var wire 1 &# writeRegSel [1] $end
$var wire 1 '# writeRegSel [0] $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 g& writeEn $end
$var wire 1 P( readData1 [15] $end
$var wire 1 Q( readData1 [14] $end
$var wire 1 R( readData1 [13] $end
$var wire 1 S( readData1 [12] $end
$var wire 1 T( readData1 [11] $end
$var wire 1 U( readData1 [10] $end
$var wire 1 V( readData1 [9] $end
$var wire 1 W( readData1 [8] $end
$var wire 1 X( readData1 [7] $end
$var wire 1 Y( readData1 [6] $end
$var wire 1 Z( readData1 [5] $end
$var wire 1 [( readData1 [4] $end
$var wire 1 \( readData1 [3] $end
$var wire 1 ]( readData1 [2] $end
$var wire 1 ^( readData1 [1] $end
$var wire 1 _( readData1 [0] $end
$var wire 1 `( readData2 [15] $end
$var wire 1 a( readData2 [14] $end
$var wire 1 b( readData2 [13] $end
$var wire 1 c( readData2 [12] $end
$var wire 1 d( readData2 [11] $end
$var wire 1 e( readData2 [10] $end
$var wire 1 f( readData2 [9] $end
$var wire 1 g( readData2 [8] $end
$var wire 1 h( readData2 [7] $end
$var wire 1 i( readData2 [6] $end
$var wire 1 j( readData2 [5] $end
$var wire 1 k( readData2 [4] $end
$var wire 1 l( readData2 [3] $end
$var wire 1 m( readData2 [2] $end
$var wire 1 n( readData2 [1] $end
$var wire 1 o( readData2 [0] $end
$var wire 1 ~& err $end
$var wire 1 r( read0Data [15] $end
$var wire 1 s( read0Data [14] $end
$var wire 1 t( read0Data [13] $end
$var wire 1 u( read0Data [12] $end
$var wire 1 v( read0Data [11] $end
$var wire 1 w( read0Data [10] $end
$var wire 1 x( read0Data [9] $end
$var wire 1 y( read0Data [8] $end
$var wire 1 z( read0Data [7] $end
$var wire 1 {( read0Data [6] $end
$var wire 1 |( read0Data [5] $end
$var wire 1 }( read0Data [4] $end
$var wire 1 ~( read0Data [3] $end
$var wire 1 !) read0Data [2] $end
$var wire 1 ") read0Data [1] $end
$var wire 1 #) read0Data [0] $end
$var wire 1 $) read1Data [15] $end
$var wire 1 %) read1Data [14] $end
$var wire 1 &) read1Data [13] $end
$var wire 1 ') read1Data [12] $end
$var wire 1 () read1Data [11] $end
$var wire 1 )) read1Data [10] $end
$var wire 1 *) read1Data [9] $end
$var wire 1 +) read1Data [8] $end
$var wire 1 ,) read1Data [7] $end
$var wire 1 -) read1Data [6] $end
$var wire 1 .) read1Data [5] $end
$var wire 1 /) read1Data [4] $end
$var wire 1 0) read1Data [3] $end
$var wire 1 1) read1Data [2] $end
$var wire 1 2) read1Data [1] $end
$var wire 1 3) read1Data [0] $end
$var wire 1 4) read2Data [15] $end
$var wire 1 5) read2Data [14] $end
$var wire 1 6) read2Data [13] $end
$var wire 1 7) read2Data [12] $end
$var wire 1 8) read2Data [11] $end
$var wire 1 9) read2Data [10] $end
$var wire 1 :) read2Data [9] $end
$var wire 1 ;) read2Data [8] $end
$var wire 1 <) read2Data [7] $end
$var wire 1 =) read2Data [6] $end
$var wire 1 >) read2Data [5] $end
$var wire 1 ?) read2Data [4] $end
$var wire 1 @) read2Data [3] $end
$var wire 1 A) read2Data [2] $end
$var wire 1 B) read2Data [1] $end
$var wire 1 C) read2Data [0] $end
$var wire 1 D) read3Data [15] $end
$var wire 1 E) read3Data [14] $end
$var wire 1 F) read3Data [13] $end
$var wire 1 G) read3Data [12] $end
$var wire 1 H) read3Data [11] $end
$var wire 1 I) read3Data [10] $end
$var wire 1 J) read3Data [9] $end
$var wire 1 K) read3Data [8] $end
$var wire 1 L) read3Data [7] $end
$var wire 1 M) read3Data [6] $end
$var wire 1 N) read3Data [5] $end
$var wire 1 O) read3Data [4] $end
$var wire 1 P) read3Data [3] $end
$var wire 1 Q) read3Data [2] $end
$var wire 1 R) read3Data [1] $end
$var wire 1 S) read3Data [0] $end
$var wire 1 T) read4Data [15] $end
$var wire 1 U) read4Data [14] $end
$var wire 1 V) read4Data [13] $end
$var wire 1 W) read4Data [12] $end
$var wire 1 X) read4Data [11] $end
$var wire 1 Y) read4Data [10] $end
$var wire 1 Z) read4Data [9] $end
$var wire 1 [) read4Data [8] $end
$var wire 1 \) read4Data [7] $end
$var wire 1 ]) read4Data [6] $end
$var wire 1 ^) read4Data [5] $end
$var wire 1 _) read4Data [4] $end
$var wire 1 `) read4Data [3] $end
$var wire 1 a) read4Data [2] $end
$var wire 1 b) read4Data [1] $end
$var wire 1 c) read4Data [0] $end
$var wire 1 d) read5Data [15] $end
$var wire 1 e) read5Data [14] $end
$var wire 1 f) read5Data [13] $end
$var wire 1 g) read5Data [12] $end
$var wire 1 h) read5Data [11] $end
$var wire 1 i) read5Data [10] $end
$var wire 1 j) read5Data [9] $end
$var wire 1 k) read5Data [8] $end
$var wire 1 l) read5Data [7] $end
$var wire 1 m) read5Data [6] $end
$var wire 1 n) read5Data [5] $end
$var wire 1 o) read5Data [4] $end
$var wire 1 p) read5Data [3] $end
$var wire 1 q) read5Data [2] $end
$var wire 1 r) read5Data [1] $end
$var wire 1 s) read5Data [0] $end
$var wire 1 t) read6Data [15] $end
$var wire 1 u) read6Data [14] $end
$var wire 1 v) read6Data [13] $end
$var wire 1 w) read6Data [12] $end
$var wire 1 x) read6Data [11] $end
$var wire 1 y) read6Data [10] $end
$var wire 1 z) read6Data [9] $end
$var wire 1 {) read6Data [8] $end
$var wire 1 |) read6Data [7] $end
$var wire 1 }) read6Data [6] $end
$var wire 1 ~) read6Data [5] $end
$var wire 1 !* read6Data [4] $end
$var wire 1 "* read6Data [3] $end
$var wire 1 #* read6Data [2] $end
$var wire 1 $* read6Data [1] $end
$var wire 1 %* read6Data [0] $end
$var wire 1 &* read7Data [15] $end
$var wire 1 '* read7Data [14] $end
$var wire 1 (* read7Data [13] $end
$var wire 1 )* read7Data [12] $end
$var wire 1 ** read7Data [11] $end
$var wire 1 +* read7Data [10] $end
$var wire 1 ,* read7Data [9] $end
$var wire 1 -* read7Data [8] $end
$var wire 1 .* read7Data [7] $end
$var wire 1 /* read7Data [6] $end
$var wire 1 0* read7Data [5] $end
$var wire 1 1* read7Data [4] $end
$var wire 1 2* read7Data [3] $end
$var wire 1 3* read7Data [2] $end
$var wire 1 4* read7Data [1] $end
$var wire 1 5* read7Data [0] $end
$var wire 1 6* write0 $end
$var wire 1 7* write1 $end
$var wire 1 8* write2 $end
$var wire 1 9* write3 $end
$var wire 1 :* write4 $end
$var wire 1 ;* write5 $end
$var wire 1 <* write6 $end
$var wire 1 =* write7 $end

$scope module r0 $end
$var wire 1 r( readData [15] $end
$var wire 1 s( readData [14] $end
$var wire 1 t( readData [13] $end
$var wire 1 u( readData [12] $end
$var wire 1 v( readData [11] $end
$var wire 1 w( readData [10] $end
$var wire 1 x( readData [9] $end
$var wire 1 y( readData [8] $end
$var wire 1 z( readData [7] $end
$var wire 1 {( readData [6] $end
$var wire 1 |( readData [5] $end
$var wire 1 }( readData [4] $end
$var wire 1 ~( readData [3] $end
$var wire 1 !) readData [2] $end
$var wire 1 ") readData [1] $end
$var wire 1 #) readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* writeEnable $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 >* in [15] $end
$var wire 1 ?* in [14] $end
$var wire 1 @* in [13] $end
$var wire 1 A* in [12] $end
$var wire 1 B* in [11] $end
$var wire 1 C* in [10] $end
$var wire 1 D* in [9] $end
$var wire 1 E* in [8] $end
$var wire 1 F* in [7] $end
$var wire 1 G* in [6] $end
$var wire 1 H* in [5] $end
$var wire 1 I* in [4] $end
$var wire 1 J* in [3] $end
$var wire 1 K* in [2] $end
$var wire 1 L* in [1] $end
$var wire 1 M* in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 r( q $end
$var wire 1 >* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 N* state $end
$var wire 1 O* in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 s( q $end
$var wire 1 ?* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 P* state $end
$var wire 1 Q* in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 t( q $end
$var wire 1 @* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 R* state $end
$var wire 1 S* in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 u( q $end
$var wire 1 A* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 T* state $end
$var wire 1 U* in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 v( q $end
$var wire 1 B* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 V* state $end
$var wire 1 W* in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 w( q $end
$var wire 1 C* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 X* state $end
$var wire 1 Y* in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 x( q $end
$var wire 1 D* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 Z* state $end
$var wire 1 [* in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 y( q $end
$var wire 1 E* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 \* state $end
$var wire 1 ]* in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 z( q $end
$var wire 1 F* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 ^* state $end
$var wire 1 _* in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 {( q $end
$var wire 1 G* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 `* state $end
$var wire 1 a* in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 |( q $end
$var wire 1 H* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 b* state $end
$var wire 1 c* in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 }( q $end
$var wire 1 I* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 d* state $end
$var wire 1 e* in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 ~( q $end
$var wire 1 J* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 f* state $end
$var wire 1 g* in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 !) q $end
$var wire 1 K* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 h* state $end
$var wire 1 i* in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 ") q $end
$var wire 1 L* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 j* state $end
$var wire 1 k* in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 #) q $end
$var wire 1 M* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6* en $end
$var reg 1 l* state $end
$var wire 1 m* in $end
$upscope $end
$upscope $end

$scope module r1 $end
$var wire 1 $) readData [15] $end
$var wire 1 %) readData [14] $end
$var wire 1 &) readData [13] $end
$var wire 1 ') readData [12] $end
$var wire 1 () readData [11] $end
$var wire 1 )) readData [10] $end
$var wire 1 *) readData [9] $end
$var wire 1 +) readData [8] $end
$var wire 1 ,) readData [7] $end
$var wire 1 -) readData [6] $end
$var wire 1 .) readData [5] $end
$var wire 1 /) readData [4] $end
$var wire 1 0) readData [3] $end
$var wire 1 1) readData [2] $end
$var wire 1 2) readData [1] $end
$var wire 1 3) readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* writeEnable $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 n* in [15] $end
$var wire 1 o* in [14] $end
$var wire 1 p* in [13] $end
$var wire 1 q* in [12] $end
$var wire 1 r* in [11] $end
$var wire 1 s* in [10] $end
$var wire 1 t* in [9] $end
$var wire 1 u* in [8] $end
$var wire 1 v* in [7] $end
$var wire 1 w* in [6] $end
$var wire 1 x* in [5] $end
$var wire 1 y* in [4] $end
$var wire 1 z* in [3] $end
$var wire 1 {* in [2] $end
$var wire 1 |* in [1] $end
$var wire 1 }* in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 $) q $end
$var wire 1 n* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 ~* state $end
$var wire 1 !+ in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 %) q $end
$var wire 1 o* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 "+ state $end
$var wire 1 #+ in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 &) q $end
$var wire 1 p* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 $+ state $end
$var wire 1 %+ in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 ') q $end
$var wire 1 q* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 &+ state $end
$var wire 1 '+ in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 () q $end
$var wire 1 r* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 (+ state $end
$var wire 1 )+ in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 )) q $end
$var wire 1 s* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 *+ state $end
$var wire 1 ++ in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 *) q $end
$var wire 1 t* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 ,+ state $end
$var wire 1 -+ in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 +) q $end
$var wire 1 u* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 .+ state $end
$var wire 1 /+ in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 ,) q $end
$var wire 1 v* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 0+ state $end
$var wire 1 1+ in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 -) q $end
$var wire 1 w* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 2+ state $end
$var wire 1 3+ in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 .) q $end
$var wire 1 x* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 4+ state $end
$var wire 1 5+ in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 /) q $end
$var wire 1 y* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 6+ state $end
$var wire 1 7+ in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 0) q $end
$var wire 1 z* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 8+ state $end
$var wire 1 9+ in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 1) q $end
$var wire 1 {* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 :+ state $end
$var wire 1 ;+ in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 2) q $end
$var wire 1 |* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 <+ state $end
$var wire 1 =+ in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 3) q $end
$var wire 1 }* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7* en $end
$var reg 1 >+ state $end
$var wire 1 ?+ in $end
$upscope $end
$upscope $end

$scope module r2 $end
$var wire 1 4) readData [15] $end
$var wire 1 5) readData [14] $end
$var wire 1 6) readData [13] $end
$var wire 1 7) readData [12] $end
$var wire 1 8) readData [11] $end
$var wire 1 9) readData [10] $end
$var wire 1 :) readData [9] $end
$var wire 1 ;) readData [8] $end
$var wire 1 <) readData [7] $end
$var wire 1 =) readData [6] $end
$var wire 1 >) readData [5] $end
$var wire 1 ?) readData [4] $end
$var wire 1 @) readData [3] $end
$var wire 1 A) readData [2] $end
$var wire 1 B) readData [1] $end
$var wire 1 C) readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* writeEnable $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 @+ in [15] $end
$var wire 1 A+ in [14] $end
$var wire 1 B+ in [13] $end
$var wire 1 C+ in [12] $end
$var wire 1 D+ in [11] $end
$var wire 1 E+ in [10] $end
$var wire 1 F+ in [9] $end
$var wire 1 G+ in [8] $end
$var wire 1 H+ in [7] $end
$var wire 1 I+ in [6] $end
$var wire 1 J+ in [5] $end
$var wire 1 K+ in [4] $end
$var wire 1 L+ in [3] $end
$var wire 1 M+ in [2] $end
$var wire 1 N+ in [1] $end
$var wire 1 O+ in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 4) q $end
$var wire 1 @+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 P+ state $end
$var wire 1 Q+ in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 5) q $end
$var wire 1 A+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 R+ state $end
$var wire 1 S+ in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 6) q $end
$var wire 1 B+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 T+ state $end
$var wire 1 U+ in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 7) q $end
$var wire 1 C+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 V+ state $end
$var wire 1 W+ in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 8) q $end
$var wire 1 D+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 X+ state $end
$var wire 1 Y+ in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 9) q $end
$var wire 1 E+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 Z+ state $end
$var wire 1 [+ in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 :) q $end
$var wire 1 F+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 \+ state $end
$var wire 1 ]+ in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 ;) q $end
$var wire 1 G+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 ^+ state $end
$var wire 1 _+ in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 <) q $end
$var wire 1 H+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 `+ state $end
$var wire 1 a+ in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 =) q $end
$var wire 1 I+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 b+ state $end
$var wire 1 c+ in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 >) q $end
$var wire 1 J+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 d+ state $end
$var wire 1 e+ in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 ?) q $end
$var wire 1 K+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 f+ state $end
$var wire 1 g+ in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 @) q $end
$var wire 1 L+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 h+ state $end
$var wire 1 i+ in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 A) q $end
$var wire 1 M+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 j+ state $end
$var wire 1 k+ in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 B) q $end
$var wire 1 N+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 l+ state $end
$var wire 1 m+ in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 C) q $end
$var wire 1 O+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8* en $end
$var reg 1 n+ state $end
$var wire 1 o+ in $end
$upscope $end
$upscope $end

$scope module r3 $end
$var wire 1 D) readData [15] $end
$var wire 1 E) readData [14] $end
$var wire 1 F) readData [13] $end
$var wire 1 G) readData [12] $end
$var wire 1 H) readData [11] $end
$var wire 1 I) readData [10] $end
$var wire 1 J) readData [9] $end
$var wire 1 K) readData [8] $end
$var wire 1 L) readData [7] $end
$var wire 1 M) readData [6] $end
$var wire 1 N) readData [5] $end
$var wire 1 O) readData [4] $end
$var wire 1 P) readData [3] $end
$var wire 1 Q) readData [2] $end
$var wire 1 R) readData [1] $end
$var wire 1 S) readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* writeEnable $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 p+ in [15] $end
$var wire 1 q+ in [14] $end
$var wire 1 r+ in [13] $end
$var wire 1 s+ in [12] $end
$var wire 1 t+ in [11] $end
$var wire 1 u+ in [10] $end
$var wire 1 v+ in [9] $end
$var wire 1 w+ in [8] $end
$var wire 1 x+ in [7] $end
$var wire 1 y+ in [6] $end
$var wire 1 z+ in [5] $end
$var wire 1 {+ in [4] $end
$var wire 1 |+ in [3] $end
$var wire 1 }+ in [2] $end
$var wire 1 ~+ in [1] $end
$var wire 1 !, in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 D) q $end
$var wire 1 p+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 ", state $end
$var wire 1 #, in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 E) q $end
$var wire 1 q+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 $, state $end
$var wire 1 %, in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 F) q $end
$var wire 1 r+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 &, state $end
$var wire 1 ', in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 G) q $end
$var wire 1 s+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 (, state $end
$var wire 1 ), in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 H) q $end
$var wire 1 t+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 *, state $end
$var wire 1 +, in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 I) q $end
$var wire 1 u+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 ,, state $end
$var wire 1 -, in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 J) q $end
$var wire 1 v+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 ., state $end
$var wire 1 /, in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 K) q $end
$var wire 1 w+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 0, state $end
$var wire 1 1, in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 L) q $end
$var wire 1 x+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 2, state $end
$var wire 1 3, in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 M) q $end
$var wire 1 y+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 4, state $end
$var wire 1 5, in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 N) q $end
$var wire 1 z+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 6, state $end
$var wire 1 7, in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 O) q $end
$var wire 1 {+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 8, state $end
$var wire 1 9, in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 P) q $end
$var wire 1 |+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 :, state $end
$var wire 1 ;, in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 Q) q $end
$var wire 1 }+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 <, state $end
$var wire 1 =, in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 R) q $end
$var wire 1 ~+ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 >, state $end
$var wire 1 ?, in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 S) q $end
$var wire 1 !, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9* en $end
$var reg 1 @, state $end
$var wire 1 A, in $end
$upscope $end
$upscope $end

$scope module r4 $end
$var wire 1 T) readData [15] $end
$var wire 1 U) readData [14] $end
$var wire 1 V) readData [13] $end
$var wire 1 W) readData [12] $end
$var wire 1 X) readData [11] $end
$var wire 1 Y) readData [10] $end
$var wire 1 Z) readData [9] $end
$var wire 1 [) readData [8] $end
$var wire 1 \) readData [7] $end
$var wire 1 ]) readData [6] $end
$var wire 1 ^) readData [5] $end
$var wire 1 _) readData [4] $end
$var wire 1 `) readData [3] $end
$var wire 1 a) readData [2] $end
$var wire 1 b) readData [1] $end
$var wire 1 c) readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* writeEnable $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 B, in [15] $end
$var wire 1 C, in [14] $end
$var wire 1 D, in [13] $end
$var wire 1 E, in [12] $end
$var wire 1 F, in [11] $end
$var wire 1 G, in [10] $end
$var wire 1 H, in [9] $end
$var wire 1 I, in [8] $end
$var wire 1 J, in [7] $end
$var wire 1 K, in [6] $end
$var wire 1 L, in [5] $end
$var wire 1 M, in [4] $end
$var wire 1 N, in [3] $end
$var wire 1 O, in [2] $end
$var wire 1 P, in [1] $end
$var wire 1 Q, in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 T) q $end
$var wire 1 B, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 R, state $end
$var wire 1 S, in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 U) q $end
$var wire 1 C, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 T, state $end
$var wire 1 U, in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 V) q $end
$var wire 1 D, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 V, state $end
$var wire 1 W, in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 W) q $end
$var wire 1 E, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 X, state $end
$var wire 1 Y, in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 X) q $end
$var wire 1 F, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 Z, state $end
$var wire 1 [, in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 Y) q $end
$var wire 1 G, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 \, state $end
$var wire 1 ], in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 Z) q $end
$var wire 1 H, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 ^, state $end
$var wire 1 _, in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 [) q $end
$var wire 1 I, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 `, state $end
$var wire 1 a, in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 \) q $end
$var wire 1 J, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 b, state $end
$var wire 1 c, in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 ]) q $end
$var wire 1 K, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 d, state $end
$var wire 1 e, in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 ^) q $end
$var wire 1 L, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 f, state $end
$var wire 1 g, in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 _) q $end
$var wire 1 M, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 h, state $end
$var wire 1 i, in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 `) q $end
$var wire 1 N, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 j, state $end
$var wire 1 k, in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 a) q $end
$var wire 1 O, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 l, state $end
$var wire 1 m, in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 b) q $end
$var wire 1 P, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 n, state $end
$var wire 1 o, in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 c) q $end
$var wire 1 Q, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :* en $end
$var reg 1 p, state $end
$var wire 1 q, in $end
$upscope $end
$upscope $end

$scope module r5 $end
$var wire 1 d) readData [15] $end
$var wire 1 e) readData [14] $end
$var wire 1 f) readData [13] $end
$var wire 1 g) readData [12] $end
$var wire 1 h) readData [11] $end
$var wire 1 i) readData [10] $end
$var wire 1 j) readData [9] $end
$var wire 1 k) readData [8] $end
$var wire 1 l) readData [7] $end
$var wire 1 m) readData [6] $end
$var wire 1 n) readData [5] $end
$var wire 1 o) readData [4] $end
$var wire 1 p) readData [3] $end
$var wire 1 q) readData [2] $end
$var wire 1 r) readData [1] $end
$var wire 1 s) readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* writeEnable $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 r, in [15] $end
$var wire 1 s, in [14] $end
$var wire 1 t, in [13] $end
$var wire 1 u, in [12] $end
$var wire 1 v, in [11] $end
$var wire 1 w, in [10] $end
$var wire 1 x, in [9] $end
$var wire 1 y, in [8] $end
$var wire 1 z, in [7] $end
$var wire 1 {, in [6] $end
$var wire 1 |, in [5] $end
$var wire 1 }, in [4] $end
$var wire 1 ~, in [3] $end
$var wire 1 !- in [2] $end
$var wire 1 "- in [1] $end
$var wire 1 #- in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 d) q $end
$var wire 1 r, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 $- state $end
$var wire 1 %- in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 e) q $end
$var wire 1 s, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 &- state $end
$var wire 1 '- in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 f) q $end
$var wire 1 t, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 (- state $end
$var wire 1 )- in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 g) q $end
$var wire 1 u, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 *- state $end
$var wire 1 +- in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 h) q $end
$var wire 1 v, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 ,- state $end
$var wire 1 -- in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 i) q $end
$var wire 1 w, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 .- state $end
$var wire 1 /- in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 j) q $end
$var wire 1 x, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 0- state $end
$var wire 1 1- in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 k) q $end
$var wire 1 y, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 2- state $end
$var wire 1 3- in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 l) q $end
$var wire 1 z, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 4- state $end
$var wire 1 5- in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 m) q $end
$var wire 1 {, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 6- state $end
$var wire 1 7- in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 n) q $end
$var wire 1 |, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 8- state $end
$var wire 1 9- in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 o) q $end
$var wire 1 }, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 :- state $end
$var wire 1 ;- in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 p) q $end
$var wire 1 ~, d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 <- state $end
$var wire 1 =- in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 q) q $end
$var wire 1 !- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 >- state $end
$var wire 1 ?- in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 r) q $end
$var wire 1 "- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 @- state $end
$var wire 1 A- in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 s) q $end
$var wire 1 #- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;* en $end
$var reg 1 B- state $end
$var wire 1 C- in $end
$upscope $end
$upscope $end

$scope module r6 $end
$var wire 1 t) readData [15] $end
$var wire 1 u) readData [14] $end
$var wire 1 v) readData [13] $end
$var wire 1 w) readData [12] $end
$var wire 1 x) readData [11] $end
$var wire 1 y) readData [10] $end
$var wire 1 z) readData [9] $end
$var wire 1 {) readData [8] $end
$var wire 1 |) readData [7] $end
$var wire 1 }) readData [6] $end
$var wire 1 ~) readData [5] $end
$var wire 1 !* readData [4] $end
$var wire 1 "* readData [3] $end
$var wire 1 #* readData [2] $end
$var wire 1 $* readData [1] $end
$var wire 1 %* readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* writeEnable $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 D- in [15] $end
$var wire 1 E- in [14] $end
$var wire 1 F- in [13] $end
$var wire 1 G- in [12] $end
$var wire 1 H- in [11] $end
$var wire 1 I- in [10] $end
$var wire 1 J- in [9] $end
$var wire 1 K- in [8] $end
$var wire 1 L- in [7] $end
$var wire 1 M- in [6] $end
$var wire 1 N- in [5] $end
$var wire 1 O- in [4] $end
$var wire 1 P- in [3] $end
$var wire 1 Q- in [2] $end
$var wire 1 R- in [1] $end
$var wire 1 S- in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 t) q $end
$var wire 1 D- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 T- state $end
$var wire 1 U- in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 u) q $end
$var wire 1 E- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 V- state $end
$var wire 1 W- in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 v) q $end
$var wire 1 F- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 X- state $end
$var wire 1 Y- in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 w) q $end
$var wire 1 G- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 Z- state $end
$var wire 1 [- in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 x) q $end
$var wire 1 H- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 \- state $end
$var wire 1 ]- in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 y) q $end
$var wire 1 I- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 ^- state $end
$var wire 1 _- in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 z) q $end
$var wire 1 J- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 `- state $end
$var wire 1 a- in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 {) q $end
$var wire 1 K- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 b- state $end
$var wire 1 c- in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 |) q $end
$var wire 1 L- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 d- state $end
$var wire 1 e- in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 }) q $end
$var wire 1 M- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 f- state $end
$var wire 1 g- in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 ~) q $end
$var wire 1 N- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 h- state $end
$var wire 1 i- in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 !* q $end
$var wire 1 O- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 j- state $end
$var wire 1 k- in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 "* q $end
$var wire 1 P- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 l- state $end
$var wire 1 m- in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 #* q $end
$var wire 1 Q- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 n- state $end
$var wire 1 o- in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 $* q $end
$var wire 1 R- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 p- state $end
$var wire 1 q- in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 %* q $end
$var wire 1 S- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <* en $end
$var reg 1 r- state $end
$var wire 1 s- in $end
$upscope $end
$upscope $end

$scope module r7 $end
$var wire 1 &* readData [15] $end
$var wire 1 '* readData [14] $end
$var wire 1 (* readData [13] $end
$var wire 1 )* readData [12] $end
$var wire 1 ** readData [11] $end
$var wire 1 +* readData [10] $end
$var wire 1 ,* readData [9] $end
$var wire 1 -* readData [8] $end
$var wire 1 .* readData [7] $end
$var wire 1 /* readData [6] $end
$var wire 1 0* readData [5] $end
$var wire 1 1* readData [4] $end
$var wire 1 2* readData [3] $end
$var wire 1 3* readData [2] $end
$var wire 1 4* readData [1] $end
$var wire 1 5* readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* writeEnable $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end
$var wire 1 t- in [15] $end
$var wire 1 u- in [14] $end
$var wire 1 v- in [13] $end
$var wire 1 w- in [12] $end
$var wire 1 x- in [11] $end
$var wire 1 y- in [10] $end
$var wire 1 z- in [9] $end
$var wire 1 {- in [8] $end
$var wire 1 |- in [7] $end
$var wire 1 }- in [6] $end
$var wire 1 ~- in [5] $end
$var wire 1 !. in [4] $end
$var wire 1 ". in [3] $end
$var wire 1 #. in [2] $end
$var wire 1 $. in [1] $end
$var wire 1 %. in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 &* q $end
$var wire 1 t- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 &. state $end
$var wire 1 '. in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 '* q $end
$var wire 1 u- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 (. state $end
$var wire 1 ). in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 (* q $end
$var wire 1 v- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 *. state $end
$var wire 1 +. in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 )* q $end
$var wire 1 w- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 ,. state $end
$var wire 1 -. in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 ** q $end
$var wire 1 x- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 .. state $end
$var wire 1 /. in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 +* q $end
$var wire 1 y- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 0. state $end
$var wire 1 1. in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 ,* q $end
$var wire 1 z- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 2. state $end
$var wire 1 3. in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 -* q $end
$var wire 1 {- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 4. state $end
$var wire 1 5. in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 .* q $end
$var wire 1 |- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 6. state $end
$var wire 1 7. in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 /* q $end
$var wire 1 }- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 8. state $end
$var wire 1 9. in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 0* q $end
$var wire 1 ~- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 :. state $end
$var wire 1 ;. in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 1* q $end
$var wire 1 !. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 <. state $end
$var wire 1 =. in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 2* q $end
$var wire 1 ". d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 >. state $end
$var wire 1 ?. in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 3* q $end
$var wire 1 #. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 @. state $end
$var wire 1 A. in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 4* q $end
$var wire 1 $. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 B. state $end
$var wire 1 C. in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 5* q $end
$var wire 1 %. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =* en $end
$var reg 1 D. state $end
$var wire 1 E. in $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module signExtend5 $end
$var wire 1 h" in [4] $end
$var wire 1 i" in [3] $end
$var wire 1 j" in [2] $end
$var wire 1 k" in [1] $end
$var wire 1 l" in [0] $end
$var wire 1 !' out [15] $end
$var wire 1 "' out [14] $end
$var wire 1 #' out [13] $end
$var wire 1 $' out [12] $end
$var wire 1 %' out [11] $end
$var wire 1 &' out [10] $end
$var wire 1 '' out [9] $end
$var wire 1 (' out [8] $end
$var wire 1 )' out [7] $end
$var wire 1 *' out [6] $end
$var wire 1 +' out [5] $end
$var wire 1 ,' out [4] $end
$var wire 1 -' out [3] $end
$var wire 1 .' out [2] $end
$var wire 1 /' out [1] $end
$var wire 1 0' out [0] $end
$upscope $end

$scope module signExtend8 $end
$var wire 1 e" in [7] $end
$var wire 1 f" in [6] $end
$var wire 1 g" in [5] $end
$var wire 1 h" in [4] $end
$var wire 1 i" in [3] $end
$var wire 1 j" in [2] $end
$var wire 1 k" in [1] $end
$var wire 1 l" in [0] $end
$var wire 1 1' out [15] $end
$var wire 1 2' out [14] $end
$var wire 1 3' out [13] $end
$var wire 1 4' out [12] $end
$var wire 1 5' out [11] $end
$var wire 1 6' out [10] $end
$var wire 1 7' out [9] $end
$var wire 1 8' out [8] $end
$var wire 1 9' out [7] $end
$var wire 1 :' out [6] $end
$var wire 1 ;' out [5] $end
$var wire 1 <' out [4] $end
$var wire 1 =' out [3] $end
$var wire 1 >' out [2] $end
$var wire 1 ?' out [1] $end
$var wire 1 @' out [0] $end
$upscope $end

$scope module signExtend11 $end
$var wire 1 b" in [10] $end
$var wire 1 c" in [9] $end
$var wire 1 d" in [8] $end
$var wire 1 e" in [7] $end
$var wire 1 f" in [6] $end
$var wire 1 g" in [5] $end
$var wire 1 h" in [4] $end
$var wire 1 i" in [3] $end
$var wire 1 j" in [2] $end
$var wire 1 k" in [1] $end
$var wire 1 l" in [0] $end
$var wire 1 A' out [15] $end
$var wire 1 B' out [14] $end
$var wire 1 C' out [13] $end
$var wire 1 D' out [12] $end
$var wire 1 E' out [11] $end
$var wire 1 F' out [10] $end
$var wire 1 G' out [9] $end
$var wire 1 H' out [8] $end
$var wire 1 I' out [7] $end
$var wire 1 J' out [6] $end
$var wire 1 K' out [5] $end
$var wire 1 L' out [4] $end
$var wire 1 M' out [3] $end
$var wire 1 N' out [2] $end
$var wire 1 O' out [1] $end
$var wire 1 P' out [0] $end
$upscope $end

$scope module zeroExtend8 $end
$var wire 1 e" in [7] $end
$var wire 1 f" in [6] $end
$var wire 1 g" in [5] $end
$var wire 1 h" in [4] $end
$var wire 1 i" in [3] $end
$var wire 1 j" in [2] $end
$var wire 1 k" in [1] $end
$var wire 1 l" in [0] $end
$var wire 1 Q' out [15] $end
$var wire 1 R' out [14] $end
$var wire 1 S' out [13] $end
$var wire 1 T' out [12] $end
$var wire 1 U' out [11] $end
$var wire 1 V' out [10] $end
$var wire 1 W' out [9] $end
$var wire 1 X' out [8] $end
$var wire 1 Y' out [7] $end
$var wire 1 Z' out [6] $end
$var wire 1 [' out [5] $end
$var wire 1 \' out [4] $end
$var wire 1 ]' out [3] $end
$var wire 1 ^' out [2] $end
$var wire 1 _' out [1] $end
$var wire 1 `' out [0] $end
$upscope $end

$scope module zeroExtend5 $end
$var wire 1 h" in [4] $end
$var wire 1 i" in [3] $end
$var wire 1 j" in [2] $end
$var wire 1 k" in [1] $end
$var wire 1 l" in [0] $end
$var wire 1 a' out [15] $end
$var wire 1 b' out [14] $end
$var wire 1 c' out [13] $end
$var wire 1 d' out [12] $end
$var wire 1 e' out [11] $end
$var wire 1 f' out [10] $end
$var wire 1 g' out [9] $end
$var wire 1 h' out [8] $end
$var wire 1 i' out [7] $end
$var wire 1 j' out [6] $end
$var wire 1 k' out [5] $end
$var wire 1 l' out [4] $end
$var wire 1 m' out [3] $end
$var wire 1 n' out [2] $end
$var wire 1 o' out [1] $end
$var wire 1 p' out [0] $end
$upscope $end
$upscope $end

$scope module detectHazards $end
$var wire 1 F. ID_EX_RegWrite_in $end
$var wire 1 G. EXMEM_RegWrite_in $end
$var wire 1 H. EXMEM_DMemEn_in $end
$var wire 1 I. EXMEM_DMemWrite_in $end
$var wire 1 w& ReadingRs_in $end
$var wire 1 x& ReadingRt_in $end
$var wire 1 b" IF_ID_Rs_in [2] $end
$var wire 1 c" IF_ID_Rs_in [1] $end
$var wire 1 d" IF_ID_Rs_in [0] $end
$var wire 1 e" IF_ID_Rt_in [2] $end
$var wire 1 f" IF_ID_Rt_in [1] $end
$var wire 1 g" IF_ID_Rt_in [0] $end
$var wire 1 "# EX_Mem_WriteRegister_in [2] $end
$var wire 1 ## EX_Mem_WriteRegister_in [1] $end
$var wire 1 $# EX_Mem_WriteRegister_in [0] $end
$var wire 1 }" ID_EX_WriteRegister_in [2] $end
$var wire 1 ~" ID_EX_WriteRegister_in [1] $end
$var wire 1 !# ID_EX_WriteRegister_in [0] $end
$var wire 1 8# stall $end
$var wire 1 3# PC_Write_Enable_out $end
$var wire 1 4# IF_ID_WriteEnable_out $end
$var wire 1 J. ID_EX_raw_Rs $end
$var wire 1 K. ID_EX_raw_Rt $end
$var wire 1 L. EX_MEM_raw_Rs $end
$var wire 1 M. EX_MEM_raw_Rt $end
$var wire 1 N. ID_EX_stall $end
$var wire 1 O. EX_MEM_stall $end
$upscope $end

$scope module ID_EX_Stage $end
$var wire 1 m" PC_In [15] $end
$var wire 1 n" PC_In [14] $end
$var wire 1 o" PC_In [13] $end
$var wire 1 p" PC_In [12] $end
$var wire 1 q" PC_In [11] $end
$var wire 1 r" PC_In [10] $end
$var wire 1 s" PC_In [9] $end
$var wire 1 t" PC_In [8] $end
$var wire 1 u" PC_In [7] $end
$var wire 1 v" PC_In [6] $end
$var wire 1 w" PC_In [5] $end
$var wire 1 x" PC_In [4] $end
$var wire 1 y" PC_In [3] $end
$var wire 1 z" PC_In [2] $end
$var wire 1 {" PC_In [1] $end
$var wire 1 |" PC_In [0] $end
$var wire 1 =" A_in [15] $end
$var wire 1 >" A_in [14] $end
$var wire 1 ?" A_in [13] $end
$var wire 1 @" A_in [12] $end
$var wire 1 A" A_in [11] $end
$var wire 1 B" A_in [10] $end
$var wire 1 C" A_in [9] $end
$var wire 1 D" A_in [8] $end
$var wire 1 E" A_in [7] $end
$var wire 1 F" A_in [6] $end
$var wire 1 G" A_in [5] $end
$var wire 1 H" A_in [4] $end
$var wire 1 I" A_in [3] $end
$var wire 1 J" A_in [2] $end
$var wire 1 K" A_in [1] $end
$var wire 1 L" A_in [0] $end
$var wire 1 M" B_in [15] $end
$var wire 1 N" B_in [14] $end
$var wire 1 O" B_in [13] $end
$var wire 1 P" B_in [12] $end
$var wire 1 Q" B_in [11] $end
$var wire 1 R" B_in [10] $end
$var wire 1 S" B_in [9] $end
$var wire 1 T" B_in [8] $end
$var wire 1 U" B_in [7] $end
$var wire 1 V" B_in [6] $end
$var wire 1 W" B_in [5] $end
$var wire 1 X" B_in [4] $end
$var wire 1 Y" B_in [3] $end
$var wire 1 Z" B_in [2] $end
$var wire 1 [" B_in [1] $end
$var wire 1 \" B_in [0] $end
$var wire 1 !' S_extend5_in [15] $end
$var wire 1 "' S_extend5_in [14] $end
$var wire 1 #' S_extend5_in [13] $end
$var wire 1 $' S_extend5_in [12] $end
$var wire 1 %' S_extend5_in [11] $end
$var wire 1 &' S_extend5_in [10] $end
$var wire 1 '' S_extend5_in [9] $end
$var wire 1 (' S_extend5_in [8] $end
$var wire 1 )' S_extend5_in [7] $end
$var wire 1 *' S_extend5_in [6] $end
$var wire 1 +' S_extend5_in [5] $end
$var wire 1 ,' S_extend5_in [4] $end
$var wire 1 -' S_extend5_in [3] $end
$var wire 1 .' S_extend5_in [2] $end
$var wire 1 /' S_extend5_in [1] $end
$var wire 1 0' S_extend5_in [0] $end
$var wire 1 a' Z_extend5_in [15] $end
$var wire 1 b' Z_extend5_in [14] $end
$var wire 1 c' Z_extend5_in [13] $end
$var wire 1 d' Z_extend5_in [12] $end
$var wire 1 e' Z_extend5_in [11] $end
$var wire 1 f' Z_extend5_in [10] $end
$var wire 1 g' Z_extend5_in [9] $end
$var wire 1 h' Z_extend5_in [8] $end
$var wire 1 i' Z_extend5_in [7] $end
$var wire 1 j' Z_extend5_in [6] $end
$var wire 1 k' Z_extend5_in [5] $end
$var wire 1 l' Z_extend5_in [4] $end
$var wire 1 m' Z_extend5_in [3] $end
$var wire 1 n' Z_extend5_in [2] $end
$var wire 1 o' Z_extend5_in [1] $end
$var wire 1 p' Z_extend5_in [0] $end
$var wire 1 1' S_extend8_in [15] $end
$var wire 1 2' S_extend8_in [14] $end
$var wire 1 3' S_extend8_in [13] $end
$var wire 1 4' S_extend8_in [12] $end
$var wire 1 5' S_extend8_in [11] $end
$var wire 1 6' S_extend8_in [10] $end
$var wire 1 7' S_extend8_in [9] $end
$var wire 1 8' S_extend8_in [8] $end
$var wire 1 9' S_extend8_in [7] $end
$var wire 1 :' S_extend8_in [6] $end
$var wire 1 ;' S_extend8_in [5] $end
$var wire 1 <' S_extend8_in [4] $end
$var wire 1 =' S_extend8_in [3] $end
$var wire 1 >' S_extend8_in [2] $end
$var wire 1 ?' S_extend8_in [1] $end
$var wire 1 @' S_extend8_in [0] $end
$var wire 1 Q' Z_extend8_in [15] $end
$var wire 1 R' Z_extend8_in [14] $end
$var wire 1 S' Z_extend8_in [13] $end
$var wire 1 T' Z_extend8_in [12] $end
$var wire 1 U' Z_extend8_in [11] $end
$var wire 1 V' Z_extend8_in [10] $end
$var wire 1 W' Z_extend8_in [9] $end
$var wire 1 X' Z_extend8_in [8] $end
$var wire 1 Y' Z_extend8_in [7] $end
$var wire 1 Z' Z_extend8_in [6] $end
$var wire 1 [' Z_extend8_in [5] $end
$var wire 1 \' Z_extend8_in [4] $end
$var wire 1 ]' Z_extend8_in [3] $end
$var wire 1 ^' Z_extend8_in [2] $end
$var wire 1 _' Z_extend8_in [1] $end
$var wire 1 `' Z_extend8_in [0] $end
$var wire 1 A' S_extend11_in [15] $end
$var wire 1 B' S_extend11_in [14] $end
$var wire 1 C' S_extend11_in [13] $end
$var wire 1 D' S_extend11_in [12] $end
$var wire 1 E' S_extend11_in [11] $end
$var wire 1 F' S_extend11_in [10] $end
$var wire 1 G' S_extend11_in [9] $end
$var wire 1 H' S_extend11_in [8] $end
$var wire 1 I' S_extend11_in [7] $end
$var wire 1 J' S_extend11_in [6] $end
$var wire 1 K' S_extend11_in [5] $end
$var wire 1 L' S_extend11_in [4] $end
$var wire 1 M' S_extend11_in [3] $end
$var wire 1 N' S_extend11_in [2] $end
$var wire 1 O' S_extend11_in [1] $end
$var wire 1 P' S_extend11_in [0] $end
$var wire 1 ]" instruction_in [15] $end
$var wire 1 ^" instruction_in [14] $end
$var wire 1 _" instruction_in [13] $end
$var wire 1 `" instruction_in [12] $end
$var wire 1 a" instruction_in [11] $end
$var wire 1 b" instruction_in [10] $end
$var wire 1 c" instruction_in [9] $end
$var wire 1 d" instruction_in [8] $end
$var wire 1 e" instruction_in [7] $end
$var wire 1 f" instruction_in [6] $end
$var wire 1 g" instruction_in [5] $end
$var wire 1 h" instruction_in [4] $end
$var wire 1 i" instruction_in [3] $end
$var wire 1 j" instruction_in [2] $end
$var wire 1 k" instruction_in [1] $end
$var wire 1 l" instruction_in [0] $end
$var wire 1 {& SESel_in [2] $end
$var wire 1 |& SESel_in [1] $end
$var wire 1 }& SESel_in [0] $end
$var wire 1 (# SESel_out [2] $end
$var wire 1 )# SESel_out [1] $end
$var wire 1 *# SESel_out [0] $end
$var wire 1 y& RegDst_in [1] $end
$var wire 1 z& RegDst_in [0] $end
$var wire 1 +# RegDst_out [1] $end
$var wire 1 ,# RegDst_out [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var wire 1 h& RegWrite_in $end
$var wire 1 j& DMemWrite_in $end
$var wire 1 o& DMemEn_in $end
$var wire 1 n& MemToReg_in $end
$var wire 1 p& Branching_in $end
$var wire 1 r& DMemDump_in $end
$var wire 1 t& invA_in $end
$var wire 1 u& invB_in $end
$var wire 1 v& Cin_in $end
$var wire 1 k& ALUSrc2_in $end
$var wire 1 8# stall $end
$var wire 1 q& BranchingOrJumping_in $end
$var wire 1 w& ReadingRs_in $end
$var wire 1 x& ReadingRt_in $end
$var wire 1 Q. PC_Out [15] $end
$var wire 1 R. PC_Out [14] $end
$var wire 1 S. PC_Out [13] $end
$var wire 1 T. PC_Out [12] $end
$var wire 1 U. PC_Out [11] $end
$var wire 1 V. PC_Out [10] $end
$var wire 1 W. PC_Out [9] $end
$var wire 1 X. PC_Out [8] $end
$var wire 1 Y. PC_Out [7] $end
$var wire 1 Z. PC_Out [6] $end
$var wire 1 [. PC_Out [5] $end
$var wire 1 \. PC_Out [4] $end
$var wire 1 ]. PC_Out [3] $end
$var wire 1 ^. PC_Out [2] $end
$var wire 1 _. PC_Out [1] $end
$var wire 1 `. PC_Out [0] $end
$var wire 1 a. A_out [15] $end
$var wire 1 b. A_out [14] $end
$var wire 1 c. A_out [13] $end
$var wire 1 d. A_out [12] $end
$var wire 1 e. A_out [11] $end
$var wire 1 f. A_out [10] $end
$var wire 1 g. A_out [9] $end
$var wire 1 h. A_out [8] $end
$var wire 1 i. A_out [7] $end
$var wire 1 j. A_out [6] $end
$var wire 1 k. A_out [5] $end
$var wire 1 l. A_out [4] $end
$var wire 1 m. A_out [3] $end
$var wire 1 n. A_out [2] $end
$var wire 1 o. A_out [1] $end
$var wire 1 p. A_out [0] $end
$var wire 1 q. B_out [15] $end
$var wire 1 r. B_out [14] $end
$var wire 1 s. B_out [13] $end
$var wire 1 t. B_out [12] $end
$var wire 1 u. B_out [11] $end
$var wire 1 v. B_out [10] $end
$var wire 1 w. B_out [9] $end
$var wire 1 x. B_out [8] $end
$var wire 1 y. B_out [7] $end
$var wire 1 z. B_out [6] $end
$var wire 1 {. B_out [5] $end
$var wire 1 |. B_out [4] $end
$var wire 1 }. B_out [3] $end
$var wire 1 ~. B_out [2] $end
$var wire 1 !/ B_out [1] $end
$var wire 1 "/ B_out [0] $end
$var wire 1 #/ S_extend5_out [15] $end
$var wire 1 $/ S_extend5_out [14] $end
$var wire 1 %/ S_extend5_out [13] $end
$var wire 1 &/ S_extend5_out [12] $end
$var wire 1 '/ S_extend5_out [11] $end
$var wire 1 (/ S_extend5_out [10] $end
$var wire 1 )/ S_extend5_out [9] $end
$var wire 1 */ S_extend5_out [8] $end
$var wire 1 +/ S_extend5_out [7] $end
$var wire 1 ,/ S_extend5_out [6] $end
$var wire 1 -/ S_extend5_out [5] $end
$var wire 1 ./ S_extend5_out [4] $end
$var wire 1 // S_extend5_out [3] $end
$var wire 1 0/ S_extend5_out [2] $end
$var wire 1 1/ S_extend5_out [1] $end
$var wire 1 2/ S_extend5_out [0] $end
$var wire 1 3/ Z_extend5_out [15] $end
$var wire 1 4/ Z_extend5_out [14] $end
$var wire 1 5/ Z_extend5_out [13] $end
$var wire 1 6/ Z_extend5_out [12] $end
$var wire 1 7/ Z_extend5_out [11] $end
$var wire 1 8/ Z_extend5_out [10] $end
$var wire 1 9/ Z_extend5_out [9] $end
$var wire 1 :/ Z_extend5_out [8] $end
$var wire 1 ;/ Z_extend5_out [7] $end
$var wire 1 </ Z_extend5_out [6] $end
$var wire 1 =/ Z_extend5_out [5] $end
$var wire 1 >/ Z_extend5_out [4] $end
$var wire 1 ?/ Z_extend5_out [3] $end
$var wire 1 @/ Z_extend5_out [2] $end
$var wire 1 A/ Z_extend5_out [1] $end
$var wire 1 B/ Z_extend5_out [0] $end
$var wire 1 C/ S_extend8_out [15] $end
$var wire 1 D/ S_extend8_out [14] $end
$var wire 1 E/ S_extend8_out [13] $end
$var wire 1 F/ S_extend8_out [12] $end
$var wire 1 G/ S_extend8_out [11] $end
$var wire 1 H/ S_extend8_out [10] $end
$var wire 1 I/ S_extend8_out [9] $end
$var wire 1 J/ S_extend8_out [8] $end
$var wire 1 K/ S_extend8_out [7] $end
$var wire 1 L/ S_extend8_out [6] $end
$var wire 1 M/ S_extend8_out [5] $end
$var wire 1 N/ S_extend8_out [4] $end
$var wire 1 O/ S_extend8_out [3] $end
$var wire 1 P/ S_extend8_out [2] $end
$var wire 1 Q/ S_extend8_out [1] $end
$var wire 1 R/ S_extend8_out [0] $end
$var wire 1 S/ Z_extend8_out [15] $end
$var wire 1 T/ Z_extend8_out [14] $end
$var wire 1 U/ Z_extend8_out [13] $end
$var wire 1 V/ Z_extend8_out [12] $end
$var wire 1 W/ Z_extend8_out [11] $end
$var wire 1 X/ Z_extend8_out [10] $end
$var wire 1 Y/ Z_extend8_out [9] $end
$var wire 1 Z/ Z_extend8_out [8] $end
$var wire 1 [/ Z_extend8_out [7] $end
$var wire 1 \/ Z_extend8_out [6] $end
$var wire 1 ]/ Z_extend8_out [5] $end
$var wire 1 ^/ Z_extend8_out [4] $end
$var wire 1 _/ Z_extend8_out [3] $end
$var wire 1 `/ Z_extend8_out [2] $end
$var wire 1 a/ Z_extend8_out [1] $end
$var wire 1 b/ Z_extend8_out [0] $end
$var wire 1 c/ S_extend11_out [15] $end
$var wire 1 d/ S_extend11_out [14] $end
$var wire 1 e/ S_extend11_out [13] $end
$var wire 1 f/ S_extend11_out [12] $end
$var wire 1 g/ S_extend11_out [11] $end
$var wire 1 h/ S_extend11_out [10] $end
$var wire 1 i/ S_extend11_out [9] $end
$var wire 1 j/ S_extend11_out [8] $end
$var wire 1 k/ S_extend11_out [7] $end
$var wire 1 l/ S_extend11_out [6] $end
$var wire 1 m/ S_extend11_out [5] $end
$var wire 1 n/ S_extend11_out [4] $end
$var wire 1 o/ S_extend11_out [3] $end
$var wire 1 p/ S_extend11_out [2] $end
$var wire 1 q/ S_extend11_out [1] $end
$var wire 1 r/ S_extend11_out [0] $end
$var wire 1 s/ stall_or_instruction_out [15] $end
$var wire 1 t/ stall_or_instruction_out [14] $end
$var wire 1 u/ stall_or_instruction_out [13] $end
$var wire 1 v/ stall_or_instruction_out [12] $end
$var wire 1 w/ stall_or_instruction_out [11] $end
$var wire 1 x/ stall_or_instruction_out [10] $end
$var wire 1 y/ stall_or_instruction_out [9] $end
$var wire 1 z/ stall_or_instruction_out [8] $end
$var wire 1 {/ stall_or_instruction_out [7] $end
$var wire 1 |/ stall_or_instruction_out [6] $end
$var wire 1 }/ stall_or_instruction_out [5] $end
$var wire 1 ~/ stall_or_instruction_out [4] $end
$var wire 1 !0 stall_or_instruction_out [3] $end
$var wire 1 "0 stall_or_instruction_out [2] $end
$var wire 1 #0 stall_or_instruction_out [1] $end
$var wire 1 $0 stall_or_instruction_out [0] $end
$var wire 1 %0 stall_or_instruction_in [15] $end
$var wire 1 &0 stall_or_instruction_in [14] $end
$var wire 1 '0 stall_or_instruction_in [13] $end
$var wire 1 (0 stall_or_instruction_in [12] $end
$var wire 1 )0 stall_or_instruction_in [11] $end
$var wire 1 *0 stall_or_instruction_in [10] $end
$var wire 1 +0 stall_or_instruction_in [9] $end
$var wire 1 ,0 stall_or_instruction_in [8] $end
$var wire 1 -0 stall_or_instruction_in [7] $end
$var wire 1 .0 stall_or_instruction_in [6] $end
$var wire 1 /0 stall_or_instruction_in [5] $end
$var wire 1 00 stall_or_instruction_in [4] $end
$var wire 1 10 stall_or_instruction_in [3] $end
$var wire 1 20 stall_or_instruction_in [2] $end
$var wire 1 30 stall_or_instruction_in [1] $end
$var wire 1 40 stall_or_instruction_in [0] $end
$var wire 1 F. RegWrite_out $end
$var wire 1 50 DMemWrite_out $end
$var wire 1 60 DMemEn_out $end
$var wire 1 70 MemToReg_out $end
$var wire 1 80 Branching_out $end
$var wire 1 90 DMemDump_out $end
$var wire 1 :0 invA_out $end
$var wire 1 ;0 invB_out $end
$var wire 1 <0 Cin_out $end
$var wire 1 =0 ALUSrc2_out $end
$var wire 1 >0 RegWrite_or_stall $end
$var wire 1 ?0 DMemWrite_or_stall $end
$var wire 1 @0 DMemEn_or_stall $end
$var wire 1 A0 MemToReg_or_stall $end
$var wire 1 B0 DMemDump_or_stall $end
$var wire 1 C0 BranchingOrJumping_out $end
$var wire 1 D0 ReadingRt_out $end
$var wire 1 E0 ReadingRs_out $end

$scope module rf_IDEX_PC_Out $end
$var wire 1 Q. readData [15] $end
$var wire 1 R. readData [14] $end
$var wire 1 S. readData [13] $end
$var wire 1 T. readData [12] $end
$var wire 1 U. readData [11] $end
$var wire 1 V. readData [10] $end
$var wire 1 W. readData [9] $end
$var wire 1 X. readData [8] $end
$var wire 1 Y. readData [7] $end
$var wire 1 Z. readData [6] $end
$var wire 1 [. readData [5] $end
$var wire 1 \. readData [4] $end
$var wire 1 ]. readData [3] $end
$var wire 1 ^. readData [2] $end
$var wire 1 _. readData [1] $end
$var wire 1 `. readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. writeEnable $end
$var wire 1 m" writeData [15] $end
$var wire 1 n" writeData [14] $end
$var wire 1 o" writeData [13] $end
$var wire 1 p" writeData [12] $end
$var wire 1 q" writeData [11] $end
$var wire 1 r" writeData [10] $end
$var wire 1 s" writeData [9] $end
$var wire 1 t" writeData [8] $end
$var wire 1 u" writeData [7] $end
$var wire 1 v" writeData [6] $end
$var wire 1 w" writeData [5] $end
$var wire 1 x" writeData [4] $end
$var wire 1 y" writeData [3] $end
$var wire 1 z" writeData [2] $end
$var wire 1 {" writeData [1] $end
$var wire 1 |" writeData [0] $end
$var wire 1 F0 in [15] $end
$var wire 1 G0 in [14] $end
$var wire 1 H0 in [13] $end
$var wire 1 I0 in [12] $end
$var wire 1 J0 in [11] $end
$var wire 1 K0 in [10] $end
$var wire 1 L0 in [9] $end
$var wire 1 M0 in [8] $end
$var wire 1 N0 in [7] $end
$var wire 1 O0 in [6] $end
$var wire 1 P0 in [5] $end
$var wire 1 Q0 in [4] $end
$var wire 1 R0 in [3] $end
$var wire 1 S0 in [2] $end
$var wire 1 T0 in [1] $end
$var wire 1 U0 in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 Q. q $end
$var wire 1 F0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 V0 state $end
$var wire 1 W0 in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 R. q $end
$var wire 1 G0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 X0 state $end
$var wire 1 Y0 in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 S. q $end
$var wire 1 H0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 Z0 state $end
$var wire 1 [0 in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 T. q $end
$var wire 1 I0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 \0 state $end
$var wire 1 ]0 in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 U. q $end
$var wire 1 J0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ^0 state $end
$var wire 1 _0 in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 V. q $end
$var wire 1 K0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 `0 state $end
$var wire 1 a0 in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 W. q $end
$var wire 1 L0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 b0 state $end
$var wire 1 c0 in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 X. q $end
$var wire 1 M0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 d0 state $end
$var wire 1 e0 in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 Y. q $end
$var wire 1 N0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 f0 state $end
$var wire 1 g0 in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 Z. q $end
$var wire 1 O0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 h0 state $end
$var wire 1 i0 in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 [. q $end
$var wire 1 P0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 j0 state $end
$var wire 1 k0 in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 \. q $end
$var wire 1 Q0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 l0 state $end
$var wire 1 m0 in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 ]. q $end
$var wire 1 R0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 n0 state $end
$var wire 1 o0 in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 ^. q $end
$var wire 1 S0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 p0 state $end
$var wire 1 q0 in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 _. q $end
$var wire 1 T0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 r0 state $end
$var wire 1 s0 in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 `. q $end
$var wire 1 U0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 t0 state $end
$var wire 1 u0 in $end
$upscope $end
$upscope $end

$scope module rf_IDEX_Aout $end
$var wire 1 a. readData [15] $end
$var wire 1 b. readData [14] $end
$var wire 1 c. readData [13] $end
$var wire 1 d. readData [12] $end
$var wire 1 e. readData [11] $end
$var wire 1 f. readData [10] $end
$var wire 1 g. readData [9] $end
$var wire 1 h. readData [8] $end
$var wire 1 i. readData [7] $end
$var wire 1 j. readData [6] $end
$var wire 1 k. readData [5] $end
$var wire 1 l. readData [4] $end
$var wire 1 m. readData [3] $end
$var wire 1 n. readData [2] $end
$var wire 1 o. readData [1] $end
$var wire 1 p. readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. writeEnable $end
$var wire 1 =" writeData [15] $end
$var wire 1 >" writeData [14] $end
$var wire 1 ?" writeData [13] $end
$var wire 1 @" writeData [12] $end
$var wire 1 A" writeData [11] $end
$var wire 1 B" writeData [10] $end
$var wire 1 C" writeData [9] $end
$var wire 1 D" writeData [8] $end
$var wire 1 E" writeData [7] $end
$var wire 1 F" writeData [6] $end
$var wire 1 G" writeData [5] $end
$var wire 1 H" writeData [4] $end
$var wire 1 I" writeData [3] $end
$var wire 1 J" writeData [2] $end
$var wire 1 K" writeData [1] $end
$var wire 1 L" writeData [0] $end
$var wire 1 v0 in [15] $end
$var wire 1 w0 in [14] $end
$var wire 1 x0 in [13] $end
$var wire 1 y0 in [12] $end
$var wire 1 z0 in [11] $end
$var wire 1 {0 in [10] $end
$var wire 1 |0 in [9] $end
$var wire 1 }0 in [8] $end
$var wire 1 ~0 in [7] $end
$var wire 1 !1 in [6] $end
$var wire 1 "1 in [5] $end
$var wire 1 #1 in [4] $end
$var wire 1 $1 in [3] $end
$var wire 1 %1 in [2] $end
$var wire 1 &1 in [1] $end
$var wire 1 '1 in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 a. q $end
$var wire 1 v0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 (1 state $end
$var wire 1 )1 in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 b. q $end
$var wire 1 w0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 *1 state $end
$var wire 1 +1 in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 c. q $end
$var wire 1 x0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ,1 state $end
$var wire 1 -1 in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 d. q $end
$var wire 1 y0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 .1 state $end
$var wire 1 /1 in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 e. q $end
$var wire 1 z0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 01 state $end
$var wire 1 11 in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 f. q $end
$var wire 1 {0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 21 state $end
$var wire 1 31 in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 g. q $end
$var wire 1 |0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 41 state $end
$var wire 1 51 in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 h. q $end
$var wire 1 }0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 61 state $end
$var wire 1 71 in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 i. q $end
$var wire 1 ~0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 81 state $end
$var wire 1 91 in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 j. q $end
$var wire 1 !1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 :1 state $end
$var wire 1 ;1 in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 k. q $end
$var wire 1 "1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 <1 state $end
$var wire 1 =1 in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 l. q $end
$var wire 1 #1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 >1 state $end
$var wire 1 ?1 in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 m. q $end
$var wire 1 $1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 @1 state $end
$var wire 1 A1 in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 n. q $end
$var wire 1 %1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 B1 state $end
$var wire 1 C1 in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 o. q $end
$var wire 1 &1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 D1 state $end
$var wire 1 E1 in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 p. q $end
$var wire 1 '1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 F1 state $end
$var wire 1 G1 in $end
$upscope $end
$upscope $end

$scope module rf_IDEX_Bout $end
$var wire 1 q. readData [15] $end
$var wire 1 r. readData [14] $end
$var wire 1 s. readData [13] $end
$var wire 1 t. readData [12] $end
$var wire 1 u. readData [11] $end
$var wire 1 v. readData [10] $end
$var wire 1 w. readData [9] $end
$var wire 1 x. readData [8] $end
$var wire 1 y. readData [7] $end
$var wire 1 z. readData [6] $end
$var wire 1 {. readData [5] $end
$var wire 1 |. readData [4] $end
$var wire 1 }. readData [3] $end
$var wire 1 ~. readData [2] $end
$var wire 1 !/ readData [1] $end
$var wire 1 "/ readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. writeEnable $end
$var wire 1 M" writeData [15] $end
$var wire 1 N" writeData [14] $end
$var wire 1 O" writeData [13] $end
$var wire 1 P" writeData [12] $end
$var wire 1 Q" writeData [11] $end
$var wire 1 R" writeData [10] $end
$var wire 1 S" writeData [9] $end
$var wire 1 T" writeData [8] $end
$var wire 1 U" writeData [7] $end
$var wire 1 V" writeData [6] $end
$var wire 1 W" writeData [5] $end
$var wire 1 X" writeData [4] $end
$var wire 1 Y" writeData [3] $end
$var wire 1 Z" writeData [2] $end
$var wire 1 [" writeData [1] $end
$var wire 1 \" writeData [0] $end
$var wire 1 H1 in [15] $end
$var wire 1 I1 in [14] $end
$var wire 1 J1 in [13] $end
$var wire 1 K1 in [12] $end
$var wire 1 L1 in [11] $end
$var wire 1 M1 in [10] $end
$var wire 1 N1 in [9] $end
$var wire 1 O1 in [8] $end
$var wire 1 P1 in [7] $end
$var wire 1 Q1 in [6] $end
$var wire 1 R1 in [5] $end
$var wire 1 S1 in [4] $end
$var wire 1 T1 in [3] $end
$var wire 1 U1 in [2] $end
$var wire 1 V1 in [1] $end
$var wire 1 W1 in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 q. q $end
$var wire 1 H1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 X1 state $end
$var wire 1 Y1 in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 r. q $end
$var wire 1 I1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 Z1 state $end
$var wire 1 [1 in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 s. q $end
$var wire 1 J1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 \1 state $end
$var wire 1 ]1 in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 t. q $end
$var wire 1 K1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ^1 state $end
$var wire 1 _1 in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 u. q $end
$var wire 1 L1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 `1 state $end
$var wire 1 a1 in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 v. q $end
$var wire 1 M1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 b1 state $end
$var wire 1 c1 in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 w. q $end
$var wire 1 N1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 d1 state $end
$var wire 1 e1 in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 x. q $end
$var wire 1 O1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 f1 state $end
$var wire 1 g1 in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 y. q $end
$var wire 1 P1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 h1 state $end
$var wire 1 i1 in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 z. q $end
$var wire 1 Q1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 j1 state $end
$var wire 1 k1 in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 {. q $end
$var wire 1 R1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 l1 state $end
$var wire 1 m1 in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 |. q $end
$var wire 1 S1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 n1 state $end
$var wire 1 o1 in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 }. q $end
$var wire 1 T1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 p1 state $end
$var wire 1 q1 in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 ~. q $end
$var wire 1 U1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 r1 state $end
$var wire 1 s1 in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 !/ q $end
$var wire 1 V1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 t1 state $end
$var wire 1 u1 in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 "/ q $end
$var wire 1 W1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 v1 state $end
$var wire 1 w1 in $end
$upscope $end
$upscope $end

$scope module rf_IDEX_S_extend5_out $end
$var wire 1 #/ readData [15] $end
$var wire 1 $/ readData [14] $end
$var wire 1 %/ readData [13] $end
$var wire 1 &/ readData [12] $end
$var wire 1 '/ readData [11] $end
$var wire 1 (/ readData [10] $end
$var wire 1 )/ readData [9] $end
$var wire 1 */ readData [8] $end
$var wire 1 +/ readData [7] $end
$var wire 1 ,/ readData [6] $end
$var wire 1 -/ readData [5] $end
$var wire 1 ./ readData [4] $end
$var wire 1 // readData [3] $end
$var wire 1 0/ readData [2] $end
$var wire 1 1/ readData [1] $end
$var wire 1 2/ readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. writeEnable $end
$var wire 1 !' writeData [15] $end
$var wire 1 "' writeData [14] $end
$var wire 1 #' writeData [13] $end
$var wire 1 $' writeData [12] $end
$var wire 1 %' writeData [11] $end
$var wire 1 &' writeData [10] $end
$var wire 1 '' writeData [9] $end
$var wire 1 (' writeData [8] $end
$var wire 1 )' writeData [7] $end
$var wire 1 *' writeData [6] $end
$var wire 1 +' writeData [5] $end
$var wire 1 ,' writeData [4] $end
$var wire 1 -' writeData [3] $end
$var wire 1 .' writeData [2] $end
$var wire 1 /' writeData [1] $end
$var wire 1 0' writeData [0] $end
$var wire 1 x1 in [15] $end
$var wire 1 y1 in [14] $end
$var wire 1 z1 in [13] $end
$var wire 1 {1 in [12] $end
$var wire 1 |1 in [11] $end
$var wire 1 }1 in [10] $end
$var wire 1 ~1 in [9] $end
$var wire 1 !2 in [8] $end
$var wire 1 "2 in [7] $end
$var wire 1 #2 in [6] $end
$var wire 1 $2 in [5] $end
$var wire 1 %2 in [4] $end
$var wire 1 &2 in [3] $end
$var wire 1 '2 in [2] $end
$var wire 1 (2 in [1] $end
$var wire 1 )2 in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 #/ q $end
$var wire 1 x1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 *2 state $end
$var wire 1 +2 in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 $/ q $end
$var wire 1 y1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ,2 state $end
$var wire 1 -2 in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 %/ q $end
$var wire 1 z1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 .2 state $end
$var wire 1 /2 in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 &/ q $end
$var wire 1 {1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 02 state $end
$var wire 1 12 in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 '/ q $end
$var wire 1 |1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 22 state $end
$var wire 1 32 in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 (/ q $end
$var wire 1 }1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 42 state $end
$var wire 1 52 in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 )/ q $end
$var wire 1 ~1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 62 state $end
$var wire 1 72 in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 */ q $end
$var wire 1 !2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 82 state $end
$var wire 1 92 in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 +/ q $end
$var wire 1 "2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 :2 state $end
$var wire 1 ;2 in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 ,/ q $end
$var wire 1 #2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 <2 state $end
$var wire 1 =2 in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 -/ q $end
$var wire 1 $2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 >2 state $end
$var wire 1 ?2 in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 ./ q $end
$var wire 1 %2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 @2 state $end
$var wire 1 A2 in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 // q $end
$var wire 1 &2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 B2 state $end
$var wire 1 C2 in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 0/ q $end
$var wire 1 '2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 D2 state $end
$var wire 1 E2 in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 1/ q $end
$var wire 1 (2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 F2 state $end
$var wire 1 G2 in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 2/ q $end
$var wire 1 )2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 H2 state $end
$var wire 1 I2 in $end
$upscope $end
$upscope $end

$scope module rf_IDEX_Z_extend5_out $end
$var wire 1 3/ readData [15] $end
$var wire 1 4/ readData [14] $end
$var wire 1 5/ readData [13] $end
$var wire 1 6/ readData [12] $end
$var wire 1 7/ readData [11] $end
$var wire 1 8/ readData [10] $end
$var wire 1 9/ readData [9] $end
$var wire 1 :/ readData [8] $end
$var wire 1 ;/ readData [7] $end
$var wire 1 </ readData [6] $end
$var wire 1 =/ readData [5] $end
$var wire 1 >/ readData [4] $end
$var wire 1 ?/ readData [3] $end
$var wire 1 @/ readData [2] $end
$var wire 1 A/ readData [1] $end
$var wire 1 B/ readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. writeEnable $end
$var wire 1 a' writeData [15] $end
$var wire 1 b' writeData [14] $end
$var wire 1 c' writeData [13] $end
$var wire 1 d' writeData [12] $end
$var wire 1 e' writeData [11] $end
$var wire 1 f' writeData [10] $end
$var wire 1 g' writeData [9] $end
$var wire 1 h' writeData [8] $end
$var wire 1 i' writeData [7] $end
$var wire 1 j' writeData [6] $end
$var wire 1 k' writeData [5] $end
$var wire 1 l' writeData [4] $end
$var wire 1 m' writeData [3] $end
$var wire 1 n' writeData [2] $end
$var wire 1 o' writeData [1] $end
$var wire 1 p' writeData [0] $end
$var wire 1 J2 in [15] $end
$var wire 1 K2 in [14] $end
$var wire 1 L2 in [13] $end
$var wire 1 M2 in [12] $end
$var wire 1 N2 in [11] $end
$var wire 1 O2 in [10] $end
$var wire 1 P2 in [9] $end
$var wire 1 Q2 in [8] $end
$var wire 1 R2 in [7] $end
$var wire 1 S2 in [6] $end
$var wire 1 T2 in [5] $end
$var wire 1 U2 in [4] $end
$var wire 1 V2 in [3] $end
$var wire 1 W2 in [2] $end
$var wire 1 X2 in [1] $end
$var wire 1 Y2 in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 3/ q $end
$var wire 1 J2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 Z2 state $end
$var wire 1 [2 in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 4/ q $end
$var wire 1 K2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 \2 state $end
$var wire 1 ]2 in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 5/ q $end
$var wire 1 L2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ^2 state $end
$var wire 1 _2 in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 6/ q $end
$var wire 1 M2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 `2 state $end
$var wire 1 a2 in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 7/ q $end
$var wire 1 N2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 b2 state $end
$var wire 1 c2 in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 8/ q $end
$var wire 1 O2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 d2 state $end
$var wire 1 e2 in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 9/ q $end
$var wire 1 P2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 f2 state $end
$var wire 1 g2 in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 :/ q $end
$var wire 1 Q2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 h2 state $end
$var wire 1 i2 in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 ;/ q $end
$var wire 1 R2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 j2 state $end
$var wire 1 k2 in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 </ q $end
$var wire 1 S2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 l2 state $end
$var wire 1 m2 in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 =/ q $end
$var wire 1 T2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 n2 state $end
$var wire 1 o2 in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 >/ q $end
$var wire 1 U2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 p2 state $end
$var wire 1 q2 in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 ?/ q $end
$var wire 1 V2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 r2 state $end
$var wire 1 s2 in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 @/ q $end
$var wire 1 W2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 t2 state $end
$var wire 1 u2 in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 A/ q $end
$var wire 1 X2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 v2 state $end
$var wire 1 w2 in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 B/ q $end
$var wire 1 Y2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 x2 state $end
$var wire 1 y2 in $end
$upscope $end
$upscope $end

$scope module rf_IDEX_S_extend8_out $end
$var wire 1 C/ readData [15] $end
$var wire 1 D/ readData [14] $end
$var wire 1 E/ readData [13] $end
$var wire 1 F/ readData [12] $end
$var wire 1 G/ readData [11] $end
$var wire 1 H/ readData [10] $end
$var wire 1 I/ readData [9] $end
$var wire 1 J/ readData [8] $end
$var wire 1 K/ readData [7] $end
$var wire 1 L/ readData [6] $end
$var wire 1 M/ readData [5] $end
$var wire 1 N/ readData [4] $end
$var wire 1 O/ readData [3] $end
$var wire 1 P/ readData [2] $end
$var wire 1 Q/ readData [1] $end
$var wire 1 R/ readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. writeEnable $end
$var wire 1 1' writeData [15] $end
$var wire 1 2' writeData [14] $end
$var wire 1 3' writeData [13] $end
$var wire 1 4' writeData [12] $end
$var wire 1 5' writeData [11] $end
$var wire 1 6' writeData [10] $end
$var wire 1 7' writeData [9] $end
$var wire 1 8' writeData [8] $end
$var wire 1 9' writeData [7] $end
$var wire 1 :' writeData [6] $end
$var wire 1 ;' writeData [5] $end
$var wire 1 <' writeData [4] $end
$var wire 1 =' writeData [3] $end
$var wire 1 >' writeData [2] $end
$var wire 1 ?' writeData [1] $end
$var wire 1 @' writeData [0] $end
$var wire 1 z2 in [15] $end
$var wire 1 {2 in [14] $end
$var wire 1 |2 in [13] $end
$var wire 1 }2 in [12] $end
$var wire 1 ~2 in [11] $end
$var wire 1 !3 in [10] $end
$var wire 1 "3 in [9] $end
$var wire 1 #3 in [8] $end
$var wire 1 $3 in [7] $end
$var wire 1 %3 in [6] $end
$var wire 1 &3 in [5] $end
$var wire 1 '3 in [4] $end
$var wire 1 (3 in [3] $end
$var wire 1 )3 in [2] $end
$var wire 1 *3 in [1] $end
$var wire 1 +3 in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 C/ q $end
$var wire 1 z2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ,3 state $end
$var wire 1 -3 in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 D/ q $end
$var wire 1 {2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 .3 state $end
$var wire 1 /3 in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 E/ q $end
$var wire 1 |2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 03 state $end
$var wire 1 13 in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 F/ q $end
$var wire 1 }2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 23 state $end
$var wire 1 33 in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 G/ q $end
$var wire 1 ~2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 43 state $end
$var wire 1 53 in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 H/ q $end
$var wire 1 !3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 63 state $end
$var wire 1 73 in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 I/ q $end
$var wire 1 "3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 83 state $end
$var wire 1 93 in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 J/ q $end
$var wire 1 #3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 :3 state $end
$var wire 1 ;3 in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 K/ q $end
$var wire 1 $3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 <3 state $end
$var wire 1 =3 in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 L/ q $end
$var wire 1 %3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 >3 state $end
$var wire 1 ?3 in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 M/ q $end
$var wire 1 &3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 @3 state $end
$var wire 1 A3 in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 N/ q $end
$var wire 1 '3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 B3 state $end
$var wire 1 C3 in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 O/ q $end
$var wire 1 (3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 D3 state $end
$var wire 1 E3 in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 P/ q $end
$var wire 1 )3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 F3 state $end
$var wire 1 G3 in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 Q/ q $end
$var wire 1 *3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 H3 state $end
$var wire 1 I3 in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 R/ q $end
$var wire 1 +3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 J3 state $end
$var wire 1 K3 in $end
$upscope $end
$upscope $end

$scope module rf_IDEX_Z_extend8_out $end
$var wire 1 S/ readData [15] $end
$var wire 1 T/ readData [14] $end
$var wire 1 U/ readData [13] $end
$var wire 1 V/ readData [12] $end
$var wire 1 W/ readData [11] $end
$var wire 1 X/ readData [10] $end
$var wire 1 Y/ readData [9] $end
$var wire 1 Z/ readData [8] $end
$var wire 1 [/ readData [7] $end
$var wire 1 \/ readData [6] $end
$var wire 1 ]/ readData [5] $end
$var wire 1 ^/ readData [4] $end
$var wire 1 _/ readData [3] $end
$var wire 1 `/ readData [2] $end
$var wire 1 a/ readData [1] $end
$var wire 1 b/ readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. writeEnable $end
$var wire 1 Q' writeData [15] $end
$var wire 1 R' writeData [14] $end
$var wire 1 S' writeData [13] $end
$var wire 1 T' writeData [12] $end
$var wire 1 U' writeData [11] $end
$var wire 1 V' writeData [10] $end
$var wire 1 W' writeData [9] $end
$var wire 1 X' writeData [8] $end
$var wire 1 Y' writeData [7] $end
$var wire 1 Z' writeData [6] $end
$var wire 1 [' writeData [5] $end
$var wire 1 \' writeData [4] $end
$var wire 1 ]' writeData [3] $end
$var wire 1 ^' writeData [2] $end
$var wire 1 _' writeData [1] $end
$var wire 1 `' writeData [0] $end
$var wire 1 L3 in [15] $end
$var wire 1 M3 in [14] $end
$var wire 1 N3 in [13] $end
$var wire 1 O3 in [12] $end
$var wire 1 P3 in [11] $end
$var wire 1 Q3 in [10] $end
$var wire 1 R3 in [9] $end
$var wire 1 S3 in [8] $end
$var wire 1 T3 in [7] $end
$var wire 1 U3 in [6] $end
$var wire 1 V3 in [5] $end
$var wire 1 W3 in [4] $end
$var wire 1 X3 in [3] $end
$var wire 1 Y3 in [2] $end
$var wire 1 Z3 in [1] $end
$var wire 1 [3 in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 S/ q $end
$var wire 1 L3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 \3 state $end
$var wire 1 ]3 in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 T/ q $end
$var wire 1 M3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ^3 state $end
$var wire 1 _3 in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 U/ q $end
$var wire 1 N3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 `3 state $end
$var wire 1 a3 in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 V/ q $end
$var wire 1 O3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 b3 state $end
$var wire 1 c3 in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 W/ q $end
$var wire 1 P3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 d3 state $end
$var wire 1 e3 in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 X/ q $end
$var wire 1 Q3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 f3 state $end
$var wire 1 g3 in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 Y/ q $end
$var wire 1 R3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 h3 state $end
$var wire 1 i3 in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 Z/ q $end
$var wire 1 S3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 j3 state $end
$var wire 1 k3 in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 [/ q $end
$var wire 1 T3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 l3 state $end
$var wire 1 m3 in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 \/ q $end
$var wire 1 U3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 n3 state $end
$var wire 1 o3 in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 ]/ q $end
$var wire 1 V3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 p3 state $end
$var wire 1 q3 in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 ^/ q $end
$var wire 1 W3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 r3 state $end
$var wire 1 s3 in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 _/ q $end
$var wire 1 X3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 t3 state $end
$var wire 1 u3 in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 `/ q $end
$var wire 1 Y3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 v3 state $end
$var wire 1 w3 in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 a/ q $end
$var wire 1 Z3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 x3 state $end
$var wire 1 y3 in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 b/ q $end
$var wire 1 [3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 z3 state $end
$var wire 1 {3 in $end
$upscope $end
$upscope $end

$scope module rf_IDEX_S_extend11_out $end
$var wire 1 c/ readData [15] $end
$var wire 1 d/ readData [14] $end
$var wire 1 e/ readData [13] $end
$var wire 1 f/ readData [12] $end
$var wire 1 g/ readData [11] $end
$var wire 1 h/ readData [10] $end
$var wire 1 i/ readData [9] $end
$var wire 1 j/ readData [8] $end
$var wire 1 k/ readData [7] $end
$var wire 1 l/ readData [6] $end
$var wire 1 m/ readData [5] $end
$var wire 1 n/ readData [4] $end
$var wire 1 o/ readData [3] $end
$var wire 1 p/ readData [2] $end
$var wire 1 q/ readData [1] $end
$var wire 1 r/ readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. writeEnable $end
$var wire 1 A' writeData [15] $end
$var wire 1 B' writeData [14] $end
$var wire 1 C' writeData [13] $end
$var wire 1 D' writeData [12] $end
$var wire 1 E' writeData [11] $end
$var wire 1 F' writeData [10] $end
$var wire 1 G' writeData [9] $end
$var wire 1 H' writeData [8] $end
$var wire 1 I' writeData [7] $end
$var wire 1 J' writeData [6] $end
$var wire 1 K' writeData [5] $end
$var wire 1 L' writeData [4] $end
$var wire 1 M' writeData [3] $end
$var wire 1 N' writeData [2] $end
$var wire 1 O' writeData [1] $end
$var wire 1 P' writeData [0] $end
$var wire 1 |3 in [15] $end
$var wire 1 }3 in [14] $end
$var wire 1 ~3 in [13] $end
$var wire 1 !4 in [12] $end
$var wire 1 "4 in [11] $end
$var wire 1 #4 in [10] $end
$var wire 1 $4 in [9] $end
$var wire 1 %4 in [8] $end
$var wire 1 &4 in [7] $end
$var wire 1 '4 in [6] $end
$var wire 1 (4 in [5] $end
$var wire 1 )4 in [4] $end
$var wire 1 *4 in [3] $end
$var wire 1 +4 in [2] $end
$var wire 1 ,4 in [1] $end
$var wire 1 -4 in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 c/ q $end
$var wire 1 |3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 .4 state $end
$var wire 1 /4 in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 d/ q $end
$var wire 1 }3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 04 state $end
$var wire 1 14 in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 e/ q $end
$var wire 1 ~3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 24 state $end
$var wire 1 34 in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 f/ q $end
$var wire 1 !4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 44 state $end
$var wire 1 54 in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 g/ q $end
$var wire 1 "4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 64 state $end
$var wire 1 74 in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 h/ q $end
$var wire 1 #4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 84 state $end
$var wire 1 94 in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 i/ q $end
$var wire 1 $4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 :4 state $end
$var wire 1 ;4 in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 j/ q $end
$var wire 1 %4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 <4 state $end
$var wire 1 =4 in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 k/ q $end
$var wire 1 &4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 >4 state $end
$var wire 1 ?4 in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 l/ q $end
$var wire 1 '4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 @4 state $end
$var wire 1 A4 in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 m/ q $end
$var wire 1 (4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 B4 state $end
$var wire 1 C4 in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 n/ q $end
$var wire 1 )4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 D4 state $end
$var wire 1 E4 in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 o/ q $end
$var wire 1 *4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 F4 state $end
$var wire 1 G4 in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 p/ q $end
$var wire 1 +4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 H4 state $end
$var wire 1 I4 in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 q/ q $end
$var wire 1 ,4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 J4 state $end
$var wire 1 K4 in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 r/ q $end
$var wire 1 -4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 L4 state $end
$var wire 1 M4 in $end
$upscope $end
$upscope $end

$scope module rf_IDEX_instruction_out $end
$var wire 1 s/ readData [15] $end
$var wire 1 t/ readData [14] $end
$var wire 1 u/ readData [13] $end
$var wire 1 v/ readData [12] $end
$var wire 1 w/ readData [11] $end
$var wire 1 x/ readData [10] $end
$var wire 1 y/ readData [9] $end
$var wire 1 z/ readData [8] $end
$var wire 1 {/ readData [7] $end
$var wire 1 |/ readData [6] $end
$var wire 1 }/ readData [5] $end
$var wire 1 ~/ readData [4] $end
$var wire 1 !0 readData [3] $end
$var wire 1 "0 readData [2] $end
$var wire 1 #0 readData [1] $end
$var wire 1 $0 readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. writeEnable $end
$var wire 1 %0 writeData [15] $end
$var wire 1 &0 writeData [14] $end
$var wire 1 '0 writeData [13] $end
$var wire 1 (0 writeData [12] $end
$var wire 1 )0 writeData [11] $end
$var wire 1 *0 writeData [10] $end
$var wire 1 +0 writeData [9] $end
$var wire 1 ,0 writeData [8] $end
$var wire 1 -0 writeData [7] $end
$var wire 1 .0 writeData [6] $end
$var wire 1 /0 writeData [5] $end
$var wire 1 00 writeData [4] $end
$var wire 1 10 writeData [3] $end
$var wire 1 20 writeData [2] $end
$var wire 1 30 writeData [1] $end
$var wire 1 40 writeData [0] $end
$var wire 1 N4 in [15] $end
$var wire 1 O4 in [14] $end
$var wire 1 P4 in [13] $end
$var wire 1 Q4 in [12] $end
$var wire 1 R4 in [11] $end
$var wire 1 S4 in [10] $end
$var wire 1 T4 in [9] $end
$var wire 1 U4 in [8] $end
$var wire 1 V4 in [7] $end
$var wire 1 W4 in [6] $end
$var wire 1 X4 in [5] $end
$var wire 1 Y4 in [4] $end
$var wire 1 Z4 in [3] $end
$var wire 1 [4 in [2] $end
$var wire 1 \4 in [1] $end
$var wire 1 ]4 in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 s/ q $end
$var wire 1 N4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ^4 state $end
$var wire 1 _4 in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 t/ q $end
$var wire 1 O4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 `4 state $end
$var wire 1 a4 in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 u/ q $end
$var wire 1 P4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 b4 state $end
$var wire 1 c4 in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 v/ q $end
$var wire 1 Q4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 d4 state $end
$var wire 1 e4 in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 w/ q $end
$var wire 1 R4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 f4 state $end
$var wire 1 g4 in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 x/ q $end
$var wire 1 S4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 h4 state $end
$var wire 1 i4 in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 y/ q $end
$var wire 1 T4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 j4 state $end
$var wire 1 k4 in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 z/ q $end
$var wire 1 U4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 l4 state $end
$var wire 1 m4 in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 {/ q $end
$var wire 1 V4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 n4 state $end
$var wire 1 o4 in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 |/ q $end
$var wire 1 W4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 p4 state $end
$var wire 1 q4 in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 }/ q $end
$var wire 1 X4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 r4 state $end
$var wire 1 s4 in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 ~/ q $end
$var wire 1 Y4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 t4 state $end
$var wire 1 u4 in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 !0 q $end
$var wire 1 Z4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 v4 state $end
$var wire 1 w4 in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 "0 q $end
$var wire 1 [4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 x4 state $end
$var wire 1 y4 in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 #0 q $end
$var wire 1 \4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 z4 state $end
$var wire 1 {4 in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 $0 q $end
$var wire 1 ]4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 |4 state $end
$var wire 1 }4 in $end
$upscope $end
$upscope $end

$scope module dff_IDEX_RegWrite_out $end
$var wire 1 F. q $end
$var wire 1 >0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ~4 state $end
$var wire 1 !5 in $end
$upscope $end

$scope module dff_IDEX_DMemWrite_out $end
$var wire 1 50 q $end
$var wire 1 ?0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 "5 state $end
$var wire 1 #5 in $end
$upscope $end

$scope module dff_IDEX_DMemEn_in_out $end
$var wire 1 60 q $end
$var wire 1 @0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 $5 state $end
$var wire 1 %5 in $end
$upscope $end

$scope module dff_IDEX_MemToReg_out $end
$var wire 1 70 q $end
$var wire 1 A0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 &5 state $end
$var wire 1 '5 in $end
$upscope $end

$scope module dff_IDEX_DMemDump_out $end
$var wire 1 90 q $end
$var wire 1 B0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 (5 state $end
$var wire 1 )5 in $end
$upscope $end

$scope module dff_IDEX_invA_out $end
$var wire 1 :0 q $end
$var wire 1 t& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 *5 state $end
$var wire 1 +5 in $end
$upscope $end

$scope module dff_IDEX_invB_out $end
$var wire 1 ;0 q $end
$var wire 1 u& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 ,5 state $end
$var wire 1 -5 in $end
$upscope $end

$scope module dff_IDEX_Cin_out $end
$var wire 1 <0 q $end
$var wire 1 v& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 .5 state $end
$var wire 1 /5 in $end
$upscope $end

$scope module dff_IDEX_ALUSrc2_out $end
$var wire 1 =0 q $end
$var wire 1 k& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 05 state $end
$var wire 1 15 in $end
$upscope $end

$scope module dff_IDEX_Branching_out $end
$var wire 1 80 q $end
$var wire 1 p& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 25 state $end
$var wire 1 35 in $end
$upscope $end

$scope module dff_IDEX_ReadingRs_out $end
$var wire 1 E0 q $end
$var wire 1 w& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 45 state $end
$var wire 1 55 in $end
$upscope $end

$scope module dff_IDEX_ReadingRt_out $end
$var wire 1 D0 q $end
$var wire 1 x& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 65 state $end
$var wire 1 75 in $end
$upscope $end

$scope module dff_IDEX_SESel_out0 $end
$var wire 1 *# q $end
$var wire 1 }& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 85 state $end
$var wire 1 95 in $end
$upscope $end

$scope module dff_IDEX_SESel_out1 $end
$var wire 1 )# q $end
$var wire 1 |& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 :5 state $end
$var wire 1 ;5 in $end
$upscope $end

$scope module dff_IDEX_SESel_out2 $end
$var wire 1 (# q $end
$var wire 1 {& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 <5 state $end
$var wire 1 =5 in $end
$upscope $end

$scope module dff_IDEX_RegDst_out0 $end
$var wire 1 ,# q $end
$var wire 1 z& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 >5 state $end
$var wire 1 ?5 in $end
$upscope $end

$scope module dff_IDEX_RegDst_out1 $end
$var wire 1 +# q $end
$var wire 1 y& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 @5 state $end
$var wire 1 A5 in $end
$upscope $end

$scope module dff_IDEX_BorJ_out $end
$var wire 1 C0 q $end
$var wire 1 q& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P. en $end
$var reg 1 B5 state $end
$var wire 1 C5 in $end
$upscope $end
$upscope $end

$scope module instructionExecute $end
$var wire 1 s/ instr [15] $end
$var wire 1 t/ instr [14] $end
$var wire 1 u/ instr [13] $end
$var wire 1 v/ instr [12] $end
$var wire 1 w/ instr [11] $end
$var wire 1 x/ instr [10] $end
$var wire 1 y/ instr [9] $end
$var wire 1 z/ instr [8] $end
$var wire 1 {/ instr [7] $end
$var wire 1 |/ instr [6] $end
$var wire 1 }/ instr [5] $end
$var wire 1 ~/ instr [4] $end
$var wire 1 !0 instr [3] $end
$var wire 1 "0 instr [2] $end
$var wire 1 #0 instr [1] $end
$var wire 1 $0 instr [0] $end
$var wire 1 Q. next_PC_normal [15] $end
$var wire 1 R. next_PC_normal [14] $end
$var wire 1 S. next_PC_normal [13] $end
$var wire 1 T. next_PC_normal [12] $end
$var wire 1 U. next_PC_normal [11] $end
$var wire 1 V. next_PC_normal [10] $end
$var wire 1 W. next_PC_normal [9] $end
$var wire 1 X. next_PC_normal [8] $end
$var wire 1 Y. next_PC_normal [7] $end
$var wire 1 Z. next_PC_normal [6] $end
$var wire 1 [. next_PC_normal [5] $end
$var wire 1 \. next_PC_normal [4] $end
$var wire 1 ]. next_PC_normal [3] $end
$var wire 1 ^. next_PC_normal [2] $end
$var wire 1 _. next_PC_normal [1] $end
$var wire 1 `. next_PC_normal [0] $end
$var wire 1 a. A [15] $end
$var wire 1 b. A [14] $end
$var wire 1 c. A [13] $end
$var wire 1 d. A [12] $end
$var wire 1 e. A [11] $end
$var wire 1 f. A [10] $end
$var wire 1 g. A [9] $end
$var wire 1 h. A [8] $end
$var wire 1 i. A [7] $end
$var wire 1 j. A [6] $end
$var wire 1 k. A [5] $end
$var wire 1 l. A [4] $end
$var wire 1 m. A [3] $end
$var wire 1 n. A [2] $end
$var wire 1 o. A [1] $end
$var wire 1 p. A [0] $end
$var wire 1 q. B [15] $end
$var wire 1 r. B [14] $end
$var wire 1 s. B [13] $end
$var wire 1 t. B [12] $end
$var wire 1 u. B [11] $end
$var wire 1 v. B [10] $end
$var wire 1 w. B [9] $end
$var wire 1 x. B [8] $end
$var wire 1 y. B [7] $end
$var wire 1 z. B [6] $end
$var wire 1 {. B [5] $end
$var wire 1 |. B [4] $end
$var wire 1 }. B [3] $end
$var wire 1 ~. B [2] $end
$var wire 1 !/ B [1] $end
$var wire 1 "/ B [0] $end
$var wire 1 #/ S_extend5_in [15] $end
$var wire 1 $/ S_extend5_in [14] $end
$var wire 1 %/ S_extend5_in [13] $end
$var wire 1 &/ S_extend5_in [12] $end
$var wire 1 '/ S_extend5_in [11] $end
$var wire 1 (/ S_extend5_in [10] $end
$var wire 1 )/ S_extend5_in [9] $end
$var wire 1 */ S_extend5_in [8] $end
$var wire 1 +/ S_extend5_in [7] $end
$var wire 1 ,/ S_extend5_in [6] $end
$var wire 1 -/ S_extend5_in [5] $end
$var wire 1 ./ S_extend5_in [4] $end
$var wire 1 // S_extend5_in [3] $end
$var wire 1 0/ S_extend5_in [2] $end
$var wire 1 1/ S_extend5_in [1] $end
$var wire 1 2/ S_extend5_in [0] $end
$var wire 1 C/ S_extend8_in [15] $end
$var wire 1 D/ S_extend8_in [14] $end
$var wire 1 E/ S_extend8_in [13] $end
$var wire 1 F/ S_extend8_in [12] $end
$var wire 1 G/ S_extend8_in [11] $end
$var wire 1 H/ S_extend8_in [10] $end
$var wire 1 I/ S_extend8_in [9] $end
$var wire 1 J/ S_extend8_in [8] $end
$var wire 1 K/ S_extend8_in [7] $end
$var wire 1 L/ S_extend8_in [6] $end
$var wire 1 M/ S_extend8_in [5] $end
$var wire 1 N/ S_extend8_in [4] $end
$var wire 1 O/ S_extend8_in [3] $end
$var wire 1 P/ S_extend8_in [2] $end
$var wire 1 Q/ S_extend8_in [1] $end
$var wire 1 R/ S_extend8_in [0] $end
$var wire 1 c/ S_extend11_in [15] $end
$var wire 1 d/ S_extend11_in [14] $end
$var wire 1 e/ S_extend11_in [13] $end
$var wire 1 f/ S_extend11_in [12] $end
$var wire 1 g/ S_extend11_in [11] $end
$var wire 1 h/ S_extend11_in [10] $end
$var wire 1 i/ S_extend11_in [9] $end
$var wire 1 j/ S_extend11_in [8] $end
$var wire 1 k/ S_extend11_in [7] $end
$var wire 1 l/ S_extend11_in [6] $end
$var wire 1 m/ S_extend11_in [5] $end
$var wire 1 n/ S_extend11_in [4] $end
$var wire 1 o/ S_extend11_in [3] $end
$var wire 1 p/ S_extend11_in [2] $end
$var wire 1 q/ S_extend11_in [1] $end
$var wire 1 r/ S_extend11_in [0] $end
$var wire 1 S/ Z_extend8_in [15] $end
$var wire 1 T/ Z_extend8_in [14] $end
$var wire 1 U/ Z_extend8_in [13] $end
$var wire 1 V/ Z_extend8_in [12] $end
$var wire 1 W/ Z_extend8_in [11] $end
$var wire 1 X/ Z_extend8_in [10] $end
$var wire 1 Y/ Z_extend8_in [9] $end
$var wire 1 Z/ Z_extend8_in [8] $end
$var wire 1 [/ Z_extend8_in [7] $end
$var wire 1 \/ Z_extend8_in [6] $end
$var wire 1 ]/ Z_extend8_in [5] $end
$var wire 1 ^/ Z_extend8_in [4] $end
$var wire 1 _/ Z_extend8_in [3] $end
$var wire 1 `/ Z_extend8_in [2] $end
$var wire 1 a/ Z_extend8_in [1] $end
$var wire 1 b/ Z_extend8_in [0] $end
$var wire 1 3/ Z_extend5_in [15] $end
$var wire 1 4/ Z_extend5_in [14] $end
$var wire 1 5/ Z_extend5_in [13] $end
$var wire 1 6/ Z_extend5_in [12] $end
$var wire 1 7/ Z_extend5_in [11] $end
$var wire 1 8/ Z_extend5_in [10] $end
$var wire 1 9/ Z_extend5_in [9] $end
$var wire 1 :/ Z_extend5_in [8] $end
$var wire 1 ;/ Z_extend5_in [7] $end
$var wire 1 </ Z_extend5_in [6] $end
$var wire 1 =/ Z_extend5_in [5] $end
$var wire 1 >/ Z_extend5_in [4] $end
$var wire 1 ?/ Z_extend5_in [3] $end
$var wire 1 @/ Z_extend5_in [2] $end
$var wire 1 A/ Z_extend5_in [1] $end
$var wire 1 B/ Z_extend5_in [0] $end
$var wire 1 :0 invA $end
$var wire 1 ;0 invB $end
$var wire 1 <0 Cin $end
$var wire 1 80 Branching $end
$var wire 1 (# SESel [2] $end
$var wire 1 )# SESel [1] $end
$var wire 1 *# SESel [0] $end
$var wire 1 +# RegDst [1] $end
$var wire 1 ,# RegDst [0] $end
$var wire 1 =0 ALUSrc2 $end
$var wire 1 /# reg7_En $end
$var wire 1 0# branchingPCEnable_out $end
$var wire 1 -" aluOutput [15] $end
$var wire 1 ." aluOutput [14] $end
$var wire 1 /" aluOutput [13] $end
$var wire 1 0" aluOutput [12] $end
$var wire 1 1" aluOutput [11] $end
$var wire 1 2" aluOutput [10] $end
$var wire 1 3" aluOutput [9] $end
$var wire 1 4" aluOutput [8] $end
$var wire 1 5" aluOutput [7] $end
$var wire 1 6" aluOutput [6] $end
$var wire 1 7" aluOutput [5] $end
$var wire 1 8" aluOutput [4] $end
$var wire 1 9" aluOutput [3] $end
$var wire 1 :" aluOutput [2] $end
$var wire 1 ;" aluOutput [1] $end
$var wire 1 <" aluOutput [0] $end
$var wire 1 ;! updatedPC [15] $end
$var wire 1 <! updatedPC [14] $end
$var wire 1 =! updatedPC [13] $end
$var wire 1 >! updatedPC [12] $end
$var wire 1 ?! updatedPC [11] $end
$var wire 1 @! updatedPC [10] $end
$var wire 1 A! updatedPC [9] $end
$var wire 1 B! updatedPC [8] $end
$var wire 1 C! updatedPC [7] $end
$var wire 1 D! updatedPC [6] $end
$var wire 1 E! updatedPC [5] $end
$var wire 1 F! updatedPC [4] $end
$var wire 1 G! updatedPC [3] $end
$var wire 1 H! updatedPC [2] $end
$var wire 1 I! updatedPC [1] $end
$var wire 1 J! updatedPC [0] $end
$var wire 1 }" writeRegister [2] $end
$var wire 1 ~" writeRegister [1] $end
$var wire 1 !# writeRegister [0] $end
$var wire 1 D5 aluSecondInput [15] $end
$var wire 1 E5 aluSecondInput [14] $end
$var wire 1 F5 aluSecondInput [13] $end
$var wire 1 G5 aluSecondInput [12] $end
$var wire 1 H5 aluSecondInput [11] $end
$var wire 1 I5 aluSecondInput [10] $end
$var wire 1 J5 aluSecondInput [9] $end
$var wire 1 K5 aluSecondInput [8] $end
$var wire 1 L5 aluSecondInput [7] $end
$var wire 1 M5 aluSecondInput [6] $end
$var wire 1 N5 aluSecondInput [5] $end
$var wire 1 O5 aluSecondInput [4] $end
$var wire 1 P5 aluSecondInput [3] $end
$var wire 1 Q5 aluSecondInput [2] $end
$var wire 1 R5 aluSecondInput [1] $end
$var wire 1 S5 aluSecondInput [0] $end
$var wire 1 T5 jal_and_j_enable $end
$var wire 1 U5 jr_and_jalr_enable $end
$var wire 1 V5 branchEN $end
$var wire 1 W5 PC_Increment [15] $end
$var wire 1 X5 PC_Increment [14] $end
$var wire 1 Y5 PC_Increment [13] $end
$var wire 1 Z5 PC_Increment [12] $end
$var wire 1 [5 PC_Increment [11] $end
$var wire 1 \5 PC_Increment [10] $end
$var wire 1 ]5 PC_Increment [9] $end
$var wire 1 ^5 PC_Increment [8] $end
$var wire 1 _5 PC_Increment [7] $end
$var wire 1 `5 PC_Increment [6] $end
$var wire 1 a5 PC_Increment [5] $end
$var wire 1 b5 PC_Increment [4] $end
$var wire 1 c5 PC_Increment [3] $end
$var wire 1 d5 PC_Increment [2] $end
$var wire 1 e5 PC_Increment [1] $end
$var wire 1 f5 PC_Increment [0] $end
$var wire 1 g5 branchOffset [15] $end
$var wire 1 h5 branchOffset [14] $end
$var wire 1 i5 branchOffset [13] $end
$var wire 1 j5 branchOffset [12] $end
$var wire 1 k5 branchOffset [11] $end
$var wire 1 l5 branchOffset [10] $end
$var wire 1 m5 branchOffset [9] $end
$var wire 1 n5 branchOffset [8] $end
$var wire 1 o5 branchOffset [7] $end
$var wire 1 p5 branchOffset [6] $end
$var wire 1 q5 branchOffset [5] $end
$var wire 1 r5 branchOffset [4] $end
$var wire 1 s5 branchOffset [3] $end
$var wire 1 t5 branchOffset [2] $end
$var wire 1 u5 branchOffset [1] $end
$var wire 1 v5 branchOffset [0] $end
$var wire 1 w5 calculatedPC [15] $end
$var wire 1 x5 calculatedPC [14] $end
$var wire 1 y5 calculatedPC [13] $end
$var wire 1 z5 calculatedPC [12] $end
$var wire 1 {5 calculatedPC [11] $end
$var wire 1 |5 calculatedPC [10] $end
$var wire 1 }5 calculatedPC [9] $end
$var wire 1 ~5 calculatedPC [8] $end
$var wire 1 !6 calculatedPC [7] $end
$var wire 1 "6 calculatedPC [6] $end
$var wire 1 #6 calculatedPC [5] $end
$var wire 1 $6 calculatedPC [4] $end
$var wire 1 %6 calculatedPC [3] $end
$var wire 1 &6 calculatedPC [2] $end
$var wire 1 '6 calculatedPC [1] $end
$var wire 1 (6 calculatedPC [0] $end
$var wire 1 )6 jalr_jr_updatedPC [15] $end
$var wire 1 *6 jalr_jr_updatedPC [14] $end
$var wire 1 +6 jalr_jr_updatedPC [13] $end
$var wire 1 ,6 jalr_jr_updatedPC [12] $end
$var wire 1 -6 jalr_jr_updatedPC [11] $end
$var wire 1 .6 jalr_jr_updatedPC [10] $end
$var wire 1 /6 jalr_jr_updatedPC [9] $end
$var wire 1 06 jalr_jr_updatedPC [8] $end
$var wire 1 16 jalr_jr_updatedPC [7] $end
$var wire 1 26 jalr_jr_updatedPC [6] $end
$var wire 1 36 jalr_jr_updatedPC [5] $end
$var wire 1 46 jalr_jr_updatedPC [4] $end
$var wire 1 56 jalr_jr_updatedPC [3] $end
$var wire 1 66 jalr_jr_updatedPC [2] $end
$var wire 1 76 jalr_jr_updatedPC [1] $end
$var wire 1 86 jalr_jr_updatedPC [0] $end
$var wire 1 96 cout1 $end
$var wire 1 :6 cout2 $end
$var wire 1 ;6 zero_flag $end
$var wire 1 <6 pos_flag $end
$var wire 1 =6 neg_flag $end
$var wire 1 >6 err $end
$var reg 16 ?6 signExtendedImmediateReg [15:0] $end

$scope module writeRegSelMux $end
$var parameter 32 @6 NUM_BITS $end
$var wire 1 ~/ InA [2] $end
$var wire 1 !0 InA [1] $end
$var wire 1 "0 InA [0] $end
$var wire 1 {/ InB [2] $end
$var wire 1 |/ InB [1] $end
$var wire 1 }/ InB [0] $end
$var wire 1 x/ InC [2] $end
$var wire 1 y/ InC [1] $end
$var wire 1 z/ InC [0] $end
$var wire 1 A6 InD [2] $end
$var wire 1 B6 InD [1] $end
$var wire 1 C6 InD [0] $end
$var wire 1 +# S [1] $end
$var wire 1 ,# S [0] $end
$var wire 1 }" Out [2] $end
$var wire 1 ~" Out [1] $end
$var wire 1 !# Out [0] $end
$var wire 1 D6 A_B_Out [2] $end
$var wire 1 E6 A_B_Out [1] $end
$var wire 1 F6 A_B_Out [0] $end
$var wire 1 G6 C_D_Out [2] $end
$var wire 1 H6 C_D_Out [1] $end
$var wire 1 I6 C_D_Out [0] $end

$scope module A_B_mux $end
$var parameter 32 J6 NUM_BITS $end
$var wire 1 ~/ InA [2] $end
$var wire 1 !0 InA [1] $end
$var wire 1 "0 InA [0] $end
$var wire 1 {/ InB [2] $end
$var wire 1 |/ InB [1] $end
$var wire 1 }/ InB [0] $end
$var wire 1 ,# S $end
$var wire 1 D6 Out [2] $end
$var wire 1 E6 Out [1] $end
$var wire 1 F6 Out [0] $end
$upscope $end

$scope module C_D_mux $end
$var parameter 32 K6 NUM_BITS $end
$var wire 1 x/ InA [2] $end
$var wire 1 y/ InA [1] $end
$var wire 1 z/ InA [0] $end
$var wire 1 A6 InB [2] $end
$var wire 1 B6 InB [1] $end
$var wire 1 C6 InB [0] $end
$var wire 1 ,# S $end
$var wire 1 G6 Out [2] $end
$var wire 1 H6 Out [1] $end
$var wire 1 I6 Out [0] $end
$upscope $end

$scope module finalMux $end
$var parameter 32 L6 NUM_BITS $end
$var wire 1 D6 InA [2] $end
$var wire 1 E6 InA [1] $end
$var wire 1 F6 InA [0] $end
$var wire 1 G6 InB [2] $end
$var wire 1 H6 InB [1] $end
$var wire 1 I6 InB [0] $end
$var wire 1 +# S $end
$var wire 1 }" Out [2] $end
$var wire 1 ~" Out [1] $end
$var wire 1 !# Out [0] $end
$upscope $end
$upscope $end

$scope module adder2 $end
$var wire 1 C/ A [15] $end
$var wire 1 D/ A [14] $end
$var wire 1 E/ A [13] $end
$var wire 1 F/ A [12] $end
$var wire 1 G/ A [11] $end
$var wire 1 H/ A [10] $end
$var wire 1 I/ A [9] $end
$var wire 1 J/ A [8] $end
$var wire 1 K/ A [7] $end
$var wire 1 L/ A [6] $end
$var wire 1 M/ A [5] $end
$var wire 1 N/ A [4] $end
$var wire 1 O/ A [3] $end
$var wire 1 P/ A [2] $end
$var wire 1 Q/ A [1] $end
$var wire 1 R/ A [0] $end
$var wire 1 a. B [15] $end
$var wire 1 b. B [14] $end
$var wire 1 c. B [13] $end
$var wire 1 d. B [12] $end
$var wire 1 e. B [11] $end
$var wire 1 f. B [10] $end
$var wire 1 g. B [9] $end
$var wire 1 h. B [8] $end
$var wire 1 i. B [7] $end
$var wire 1 j. B [6] $end
$var wire 1 k. B [5] $end
$var wire 1 l. B [4] $end
$var wire 1 m. B [3] $end
$var wire 1 n. B [2] $end
$var wire 1 o. B [1] $end
$var wire 1 p. B [0] $end
$var wire 1 M6 C_in $end
$var wire 1 )6 S [15] $end
$var wire 1 *6 S [14] $end
$var wire 1 +6 S [13] $end
$var wire 1 ,6 S [12] $end
$var wire 1 -6 S [11] $end
$var wire 1 .6 S [10] $end
$var wire 1 /6 S [9] $end
$var wire 1 06 S [8] $end
$var wire 1 16 S [7] $end
$var wire 1 26 S [6] $end
$var wire 1 36 S [5] $end
$var wire 1 46 S [4] $end
$var wire 1 56 S [3] $end
$var wire 1 66 S [2] $end
$var wire 1 76 S [1] $end
$var wire 1 86 S [0] $end
$var wire 1 :6 C_out $end
$var wire 1 N6 C_in1 $end
$var wire 1 O6 C_in2 $end
$var wire 1 P6 C_in3 $end

$scope module rcaBit3_0 $end
$var parameter 32 Q6 N $end
$var wire 1 O/ A [3] $end
$var wire 1 P/ A [2] $end
$var wire 1 Q/ A [1] $end
$var wire 1 R/ A [0] $end
$var wire 1 m. B [3] $end
$var wire 1 n. B [2] $end
$var wire 1 o. B [1] $end
$var wire 1 p. B [0] $end
$var wire 1 M6 C_in $end
$var wire 1 56 S [3] $end
$var wire 1 66 S [2] $end
$var wire 1 76 S [1] $end
$var wire 1 86 S [0] $end
$var wire 1 N6 C_out $end
$var wire 1 R6 C_in1 $end
$var wire 1 S6 C_in2 $end
$var wire 1 T6 C_in3 $end

$scope module rcaBit0 $end
$var wire 1 R/ A $end
$var wire 1 p. B $end
$var wire 1 M6 C_in $end
$var wire 1 86 S $end
$var wire 1 R6 C_out $end
$var wire 1 U6 A_nand_B $end
$var wire 1 V6 A_nand_Cin $end
$var wire 1 W6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 R/ in1 $end
$var wire 1 p. in2 $end
$var wire 1 M6 in3 $end
$var wire 1 86 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 R/ in1 $end
$var wire 1 p. in2 $end
$var wire 1 U6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 R/ in1 $end
$var wire 1 M6 in2 $end
$var wire 1 V6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 p. in1 $end
$var wire 1 M6 in2 $end
$var wire 1 W6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 U6 in1 $end
$var wire 1 V6 in2 $end
$var wire 1 W6 in3 $end
$var wire 1 R6 out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 Q/ A $end
$var wire 1 o. B $end
$var wire 1 R6 C_in $end
$var wire 1 76 S $end
$var wire 1 S6 C_out $end
$var wire 1 X6 A_nand_B $end
$var wire 1 Y6 A_nand_Cin $end
$var wire 1 Z6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Q/ in1 $end
$var wire 1 o. in2 $end
$var wire 1 R6 in3 $end
$var wire 1 76 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Q/ in1 $end
$var wire 1 o. in2 $end
$var wire 1 X6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Q/ in1 $end
$var wire 1 R6 in2 $end
$var wire 1 Y6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 o. in1 $end
$var wire 1 R6 in2 $end
$var wire 1 Z6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 X6 in1 $end
$var wire 1 Y6 in2 $end
$var wire 1 Z6 in3 $end
$var wire 1 S6 out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 P/ A $end
$var wire 1 n. B $end
$var wire 1 S6 C_in $end
$var wire 1 66 S $end
$var wire 1 T6 C_out $end
$var wire 1 [6 A_nand_B $end
$var wire 1 \6 A_nand_Cin $end
$var wire 1 ]6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 P/ in1 $end
$var wire 1 n. in2 $end
$var wire 1 S6 in3 $end
$var wire 1 66 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 P/ in1 $end
$var wire 1 n. in2 $end
$var wire 1 [6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 P/ in1 $end
$var wire 1 S6 in2 $end
$var wire 1 \6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 n. in1 $end
$var wire 1 S6 in2 $end
$var wire 1 ]6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 [6 in1 $end
$var wire 1 \6 in2 $end
$var wire 1 ]6 in3 $end
$var wire 1 T6 out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 O/ A $end
$var wire 1 m. B $end
$var wire 1 T6 C_in $end
$var wire 1 56 S $end
$var wire 1 N6 C_out $end
$var wire 1 ^6 A_nand_B $end
$var wire 1 _6 A_nand_Cin $end
$var wire 1 `6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 O/ in1 $end
$var wire 1 m. in2 $end
$var wire 1 T6 in3 $end
$var wire 1 56 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 O/ in1 $end
$var wire 1 m. in2 $end
$var wire 1 ^6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 O/ in1 $end
$var wire 1 T6 in2 $end
$var wire 1 _6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 m. in1 $end
$var wire 1 T6 in2 $end
$var wire 1 `6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ^6 in1 $end
$var wire 1 _6 in2 $end
$var wire 1 `6 in3 $end
$var wire 1 N6 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit7_4 $end
$var parameter 32 a6 N $end
$var wire 1 K/ A [3] $end
$var wire 1 L/ A [2] $end
$var wire 1 M/ A [1] $end
$var wire 1 N/ A [0] $end
$var wire 1 i. B [3] $end
$var wire 1 j. B [2] $end
$var wire 1 k. B [1] $end
$var wire 1 l. B [0] $end
$var wire 1 N6 C_in $end
$var wire 1 16 S [3] $end
$var wire 1 26 S [2] $end
$var wire 1 36 S [1] $end
$var wire 1 46 S [0] $end
$var wire 1 O6 C_out $end
$var wire 1 b6 C_in1 $end
$var wire 1 c6 C_in2 $end
$var wire 1 d6 C_in3 $end

$scope module rcaBit0 $end
$var wire 1 N/ A $end
$var wire 1 l. B $end
$var wire 1 N6 C_in $end
$var wire 1 46 S $end
$var wire 1 b6 C_out $end
$var wire 1 e6 A_nand_B $end
$var wire 1 f6 A_nand_Cin $end
$var wire 1 g6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 N/ in1 $end
$var wire 1 l. in2 $end
$var wire 1 N6 in3 $end
$var wire 1 46 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 N/ in1 $end
$var wire 1 l. in2 $end
$var wire 1 e6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 N/ in1 $end
$var wire 1 N6 in2 $end
$var wire 1 f6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 l. in1 $end
$var wire 1 N6 in2 $end
$var wire 1 g6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 e6 in1 $end
$var wire 1 f6 in2 $end
$var wire 1 g6 in3 $end
$var wire 1 b6 out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 M/ A $end
$var wire 1 k. B $end
$var wire 1 b6 C_in $end
$var wire 1 36 S $end
$var wire 1 c6 C_out $end
$var wire 1 h6 A_nand_B $end
$var wire 1 i6 A_nand_Cin $end
$var wire 1 j6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 M/ in1 $end
$var wire 1 k. in2 $end
$var wire 1 b6 in3 $end
$var wire 1 36 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 M/ in1 $end
$var wire 1 k. in2 $end
$var wire 1 h6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 M/ in1 $end
$var wire 1 b6 in2 $end
$var wire 1 i6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 k. in1 $end
$var wire 1 b6 in2 $end
$var wire 1 j6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 h6 in1 $end
$var wire 1 i6 in2 $end
$var wire 1 j6 in3 $end
$var wire 1 c6 out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 L/ A $end
$var wire 1 j. B $end
$var wire 1 c6 C_in $end
$var wire 1 26 S $end
$var wire 1 d6 C_out $end
$var wire 1 k6 A_nand_B $end
$var wire 1 l6 A_nand_Cin $end
$var wire 1 m6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 L/ in1 $end
$var wire 1 j. in2 $end
$var wire 1 c6 in3 $end
$var wire 1 26 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 L/ in1 $end
$var wire 1 j. in2 $end
$var wire 1 k6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 L/ in1 $end
$var wire 1 c6 in2 $end
$var wire 1 l6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 j. in1 $end
$var wire 1 c6 in2 $end
$var wire 1 m6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 k6 in1 $end
$var wire 1 l6 in2 $end
$var wire 1 m6 in3 $end
$var wire 1 d6 out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 K/ A $end
$var wire 1 i. B $end
$var wire 1 d6 C_in $end
$var wire 1 16 S $end
$var wire 1 O6 C_out $end
$var wire 1 n6 A_nand_B $end
$var wire 1 o6 A_nand_Cin $end
$var wire 1 p6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 K/ in1 $end
$var wire 1 i. in2 $end
$var wire 1 d6 in3 $end
$var wire 1 16 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 K/ in1 $end
$var wire 1 i. in2 $end
$var wire 1 n6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 K/ in1 $end
$var wire 1 d6 in2 $end
$var wire 1 o6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 i. in1 $end
$var wire 1 d6 in2 $end
$var wire 1 p6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 n6 in1 $end
$var wire 1 o6 in2 $end
$var wire 1 p6 in3 $end
$var wire 1 O6 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit11_8 $end
$var parameter 32 q6 N $end
$var wire 1 G/ A [3] $end
$var wire 1 H/ A [2] $end
$var wire 1 I/ A [1] $end
$var wire 1 J/ A [0] $end
$var wire 1 e. B [3] $end
$var wire 1 f. B [2] $end
$var wire 1 g. B [1] $end
$var wire 1 h. B [0] $end
$var wire 1 O6 C_in $end
$var wire 1 -6 S [3] $end
$var wire 1 .6 S [2] $end
$var wire 1 /6 S [1] $end
$var wire 1 06 S [0] $end
$var wire 1 P6 C_out $end
$var wire 1 r6 C_in1 $end
$var wire 1 s6 C_in2 $end
$var wire 1 t6 C_in3 $end

$scope module rcaBit0 $end
$var wire 1 J/ A $end
$var wire 1 h. B $end
$var wire 1 O6 C_in $end
$var wire 1 06 S $end
$var wire 1 r6 C_out $end
$var wire 1 u6 A_nand_B $end
$var wire 1 v6 A_nand_Cin $end
$var wire 1 w6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 J/ in1 $end
$var wire 1 h. in2 $end
$var wire 1 O6 in3 $end
$var wire 1 06 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 J/ in1 $end
$var wire 1 h. in2 $end
$var wire 1 u6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 J/ in1 $end
$var wire 1 O6 in2 $end
$var wire 1 v6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 h. in1 $end
$var wire 1 O6 in2 $end
$var wire 1 w6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 u6 in1 $end
$var wire 1 v6 in2 $end
$var wire 1 w6 in3 $end
$var wire 1 r6 out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 I/ A $end
$var wire 1 g. B $end
$var wire 1 r6 C_in $end
$var wire 1 /6 S $end
$var wire 1 s6 C_out $end
$var wire 1 x6 A_nand_B $end
$var wire 1 y6 A_nand_Cin $end
$var wire 1 z6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 I/ in1 $end
$var wire 1 g. in2 $end
$var wire 1 r6 in3 $end
$var wire 1 /6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 I/ in1 $end
$var wire 1 g. in2 $end
$var wire 1 x6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 I/ in1 $end
$var wire 1 r6 in2 $end
$var wire 1 y6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 g. in1 $end
$var wire 1 r6 in2 $end
$var wire 1 z6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 x6 in1 $end
$var wire 1 y6 in2 $end
$var wire 1 z6 in3 $end
$var wire 1 s6 out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 H/ A $end
$var wire 1 f. B $end
$var wire 1 s6 C_in $end
$var wire 1 .6 S $end
$var wire 1 t6 C_out $end
$var wire 1 {6 A_nand_B $end
$var wire 1 |6 A_nand_Cin $end
$var wire 1 }6 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 H/ in1 $end
$var wire 1 f. in2 $end
$var wire 1 s6 in3 $end
$var wire 1 .6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 H/ in1 $end
$var wire 1 f. in2 $end
$var wire 1 {6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 H/ in1 $end
$var wire 1 s6 in2 $end
$var wire 1 |6 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 f. in1 $end
$var wire 1 s6 in2 $end
$var wire 1 }6 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 {6 in1 $end
$var wire 1 |6 in2 $end
$var wire 1 }6 in3 $end
$var wire 1 t6 out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 G/ A $end
$var wire 1 e. B $end
$var wire 1 t6 C_in $end
$var wire 1 -6 S $end
$var wire 1 P6 C_out $end
$var wire 1 ~6 A_nand_B $end
$var wire 1 !7 A_nand_Cin $end
$var wire 1 "7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 G/ in1 $end
$var wire 1 e. in2 $end
$var wire 1 t6 in3 $end
$var wire 1 -6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 G/ in1 $end
$var wire 1 e. in2 $end
$var wire 1 ~6 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 G/ in1 $end
$var wire 1 t6 in2 $end
$var wire 1 !7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 e. in1 $end
$var wire 1 t6 in2 $end
$var wire 1 "7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ~6 in1 $end
$var wire 1 !7 in2 $end
$var wire 1 "7 in3 $end
$var wire 1 P6 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit15_12 $end
$var parameter 32 #7 N $end
$var wire 1 C/ A [3] $end
$var wire 1 D/ A [2] $end
$var wire 1 E/ A [1] $end
$var wire 1 F/ A [0] $end
$var wire 1 a. B [3] $end
$var wire 1 b. B [2] $end
$var wire 1 c. B [1] $end
$var wire 1 d. B [0] $end
$var wire 1 P6 C_in $end
$var wire 1 )6 S [3] $end
$var wire 1 *6 S [2] $end
$var wire 1 +6 S [1] $end
$var wire 1 ,6 S [0] $end
$var wire 1 :6 C_out $end
$var wire 1 $7 C_in1 $end
$var wire 1 %7 C_in2 $end
$var wire 1 &7 C_in3 $end

$scope module rcaBit0 $end
$var wire 1 F/ A $end
$var wire 1 d. B $end
$var wire 1 P6 C_in $end
$var wire 1 ,6 S $end
$var wire 1 $7 C_out $end
$var wire 1 '7 A_nand_B $end
$var wire 1 (7 A_nand_Cin $end
$var wire 1 )7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 F/ in1 $end
$var wire 1 d. in2 $end
$var wire 1 P6 in3 $end
$var wire 1 ,6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 F/ in1 $end
$var wire 1 d. in2 $end
$var wire 1 '7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 F/ in1 $end
$var wire 1 P6 in2 $end
$var wire 1 (7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 d. in1 $end
$var wire 1 P6 in2 $end
$var wire 1 )7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 '7 in1 $end
$var wire 1 (7 in2 $end
$var wire 1 )7 in3 $end
$var wire 1 $7 out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 E/ A $end
$var wire 1 c. B $end
$var wire 1 $7 C_in $end
$var wire 1 +6 S $end
$var wire 1 %7 C_out $end
$var wire 1 *7 A_nand_B $end
$var wire 1 +7 A_nand_Cin $end
$var wire 1 ,7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 E/ in1 $end
$var wire 1 c. in2 $end
$var wire 1 $7 in3 $end
$var wire 1 +6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 E/ in1 $end
$var wire 1 c. in2 $end
$var wire 1 *7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 E/ in1 $end
$var wire 1 $7 in2 $end
$var wire 1 +7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 c. in1 $end
$var wire 1 $7 in2 $end
$var wire 1 ,7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 *7 in1 $end
$var wire 1 +7 in2 $end
$var wire 1 ,7 in3 $end
$var wire 1 %7 out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 D/ A $end
$var wire 1 b. B $end
$var wire 1 %7 C_in $end
$var wire 1 *6 S $end
$var wire 1 &7 C_out $end
$var wire 1 -7 A_nand_B $end
$var wire 1 .7 A_nand_Cin $end
$var wire 1 /7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 D/ in1 $end
$var wire 1 b. in2 $end
$var wire 1 %7 in3 $end
$var wire 1 *6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 D/ in1 $end
$var wire 1 b. in2 $end
$var wire 1 -7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 D/ in1 $end
$var wire 1 %7 in2 $end
$var wire 1 .7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 b. in1 $end
$var wire 1 %7 in2 $end
$var wire 1 /7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 -7 in1 $end
$var wire 1 .7 in2 $end
$var wire 1 /7 in3 $end
$var wire 1 &7 out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 C/ A $end
$var wire 1 a. B $end
$var wire 1 &7 C_in $end
$var wire 1 )6 S $end
$var wire 1 :6 C_out $end
$var wire 1 07 A_nand_B $end
$var wire 1 17 A_nand_Cin $end
$var wire 1 27 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 C/ in1 $end
$var wire 1 a. in2 $end
$var wire 1 &7 in3 $end
$var wire 1 )6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 C/ in1 $end
$var wire 1 a. in2 $end
$var wire 1 07 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 C/ in1 $end
$var wire 1 &7 in2 $end
$var wire 1 17 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 a. in1 $end
$var wire 1 &7 in2 $end
$var wire 1 27 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 07 in1 $end
$var wire 1 17 in2 $end
$var wire 1 27 in3 $end
$var wire 1 :6 out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module branchControl $end
$var wire 1 s/ Op [4] $end
$var wire 1 t/ Op [3] $end
$var wire 1 u/ Op [2] $end
$var wire 1 v/ Op [1] $end
$var wire 1 w/ Op [0] $end
$var wire 1 <6 pos_flag $end
$var wire 1 =6 neg_flag $end
$var wire 1 ;6 zero_flag $end
$var wire 1 V5 branchEN $end
$var reg 1 37 branchEnReg $end
$var wire 1 47 bnez $end
$var wire 1 57 bgez $end
$upscope $end

$scope module jumpControl $end
$var parameter 1 67 assert $end
$var parameter 1 77 no_assert $end
$var wire 1 s/ opcode [4] $end
$var wire 1 t/ opcode [3] $end
$var wire 1 u/ opcode [2] $end
$var wire 1 v/ opcode [1] $end
$var wire 1 w/ opcode [0] $end
$var reg 1 87 jal_and_j_enable $end
$var reg 1 97 reg7_En $end
$var reg 1 :7 jr_and_jalr_enable $end
$upscope $end

$scope module adder1 $end
$var wire 1 W5 A [15] $end
$var wire 1 X5 A [14] $end
$var wire 1 Y5 A [13] $end
$var wire 1 Z5 A [12] $end
$var wire 1 [5 A [11] $end
$var wire 1 \5 A [10] $end
$var wire 1 ]5 A [9] $end
$var wire 1 ^5 A [8] $end
$var wire 1 _5 A [7] $end
$var wire 1 `5 A [6] $end
$var wire 1 a5 A [5] $end
$var wire 1 b5 A [4] $end
$var wire 1 c5 A [3] $end
$var wire 1 d5 A [2] $end
$var wire 1 e5 A [1] $end
$var wire 1 f5 A [0] $end
$var wire 1 Q. B [15] $end
$var wire 1 R. B [14] $end
$var wire 1 S. B [13] $end
$var wire 1 T. B [12] $end
$var wire 1 U. B [11] $end
$var wire 1 V. B [10] $end
$var wire 1 W. B [9] $end
$var wire 1 X. B [8] $end
$var wire 1 Y. B [7] $end
$var wire 1 Z. B [6] $end
$var wire 1 [. B [5] $end
$var wire 1 \. B [4] $end
$var wire 1 ]. B [3] $end
$var wire 1 ^. B [2] $end
$var wire 1 _. B [1] $end
$var wire 1 `. B [0] $end
$var wire 1 ;7 C_in $end
$var wire 1 w5 S [15] $end
$var wire 1 x5 S [14] $end
$var wire 1 y5 S [13] $end
$var wire 1 z5 S [12] $end
$var wire 1 {5 S [11] $end
$var wire 1 |5 S [10] $end
$var wire 1 }5 S [9] $end
$var wire 1 ~5 S [8] $end
$var wire 1 !6 S [7] $end
$var wire 1 "6 S [6] $end
$var wire 1 #6 S [5] $end
$var wire 1 $6 S [4] $end
$var wire 1 %6 S [3] $end
$var wire 1 &6 S [2] $end
$var wire 1 '6 S [1] $end
$var wire 1 (6 S [0] $end
$var wire 1 96 C_out $end
$var wire 1 <7 C_in1 $end
$var wire 1 =7 C_in2 $end
$var wire 1 >7 C_in3 $end

$scope module rcaBit3_0 $end
$var parameter 32 ?7 N $end
$var wire 1 c5 A [3] $end
$var wire 1 d5 A [2] $end
$var wire 1 e5 A [1] $end
$var wire 1 f5 A [0] $end
$var wire 1 ]. B [3] $end
$var wire 1 ^. B [2] $end
$var wire 1 _. B [1] $end
$var wire 1 `. B [0] $end
$var wire 1 ;7 C_in $end
$var wire 1 %6 S [3] $end
$var wire 1 &6 S [2] $end
$var wire 1 '6 S [1] $end
$var wire 1 (6 S [0] $end
$var wire 1 <7 C_out $end
$var wire 1 @7 C_in1 $end
$var wire 1 A7 C_in2 $end
$var wire 1 B7 C_in3 $end

$scope module rcaBit0 $end
$var wire 1 f5 A $end
$var wire 1 `. B $end
$var wire 1 ;7 C_in $end
$var wire 1 (6 S $end
$var wire 1 @7 C_out $end
$var wire 1 C7 A_nand_B $end
$var wire 1 D7 A_nand_Cin $end
$var wire 1 E7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 f5 in1 $end
$var wire 1 `. in2 $end
$var wire 1 ;7 in3 $end
$var wire 1 (6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 f5 in1 $end
$var wire 1 `. in2 $end
$var wire 1 C7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 f5 in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 D7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 `. in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 E7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 C7 in1 $end
$var wire 1 D7 in2 $end
$var wire 1 E7 in3 $end
$var wire 1 @7 out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 e5 A $end
$var wire 1 _. B $end
$var wire 1 @7 C_in $end
$var wire 1 '6 S $end
$var wire 1 A7 C_out $end
$var wire 1 F7 A_nand_B $end
$var wire 1 G7 A_nand_Cin $end
$var wire 1 H7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 e5 in1 $end
$var wire 1 _. in2 $end
$var wire 1 @7 in3 $end
$var wire 1 '6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 e5 in1 $end
$var wire 1 _. in2 $end
$var wire 1 F7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 e5 in1 $end
$var wire 1 @7 in2 $end
$var wire 1 G7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 _. in1 $end
$var wire 1 @7 in2 $end
$var wire 1 H7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 F7 in1 $end
$var wire 1 G7 in2 $end
$var wire 1 H7 in3 $end
$var wire 1 A7 out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 d5 A $end
$var wire 1 ^. B $end
$var wire 1 A7 C_in $end
$var wire 1 &6 S $end
$var wire 1 B7 C_out $end
$var wire 1 I7 A_nand_B $end
$var wire 1 J7 A_nand_Cin $end
$var wire 1 K7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 d5 in1 $end
$var wire 1 ^. in2 $end
$var wire 1 A7 in3 $end
$var wire 1 &6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 d5 in1 $end
$var wire 1 ^. in2 $end
$var wire 1 I7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 d5 in1 $end
$var wire 1 A7 in2 $end
$var wire 1 J7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ^. in1 $end
$var wire 1 A7 in2 $end
$var wire 1 K7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 I7 in1 $end
$var wire 1 J7 in2 $end
$var wire 1 K7 in3 $end
$var wire 1 B7 out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 c5 A $end
$var wire 1 ]. B $end
$var wire 1 B7 C_in $end
$var wire 1 %6 S $end
$var wire 1 <7 C_out $end
$var wire 1 L7 A_nand_B $end
$var wire 1 M7 A_nand_Cin $end
$var wire 1 N7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 c5 in1 $end
$var wire 1 ]. in2 $end
$var wire 1 B7 in3 $end
$var wire 1 %6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 c5 in1 $end
$var wire 1 ]. in2 $end
$var wire 1 L7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 c5 in1 $end
$var wire 1 B7 in2 $end
$var wire 1 M7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ]. in1 $end
$var wire 1 B7 in2 $end
$var wire 1 N7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 L7 in1 $end
$var wire 1 M7 in2 $end
$var wire 1 N7 in3 $end
$var wire 1 <7 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit7_4 $end
$var parameter 32 O7 N $end
$var wire 1 _5 A [3] $end
$var wire 1 `5 A [2] $end
$var wire 1 a5 A [1] $end
$var wire 1 b5 A [0] $end
$var wire 1 Y. B [3] $end
$var wire 1 Z. B [2] $end
$var wire 1 [. B [1] $end
$var wire 1 \. B [0] $end
$var wire 1 <7 C_in $end
$var wire 1 !6 S [3] $end
$var wire 1 "6 S [2] $end
$var wire 1 #6 S [1] $end
$var wire 1 $6 S [0] $end
$var wire 1 =7 C_out $end
$var wire 1 P7 C_in1 $end
$var wire 1 Q7 C_in2 $end
$var wire 1 R7 C_in3 $end

$scope module rcaBit0 $end
$var wire 1 b5 A $end
$var wire 1 \. B $end
$var wire 1 <7 C_in $end
$var wire 1 $6 S $end
$var wire 1 P7 C_out $end
$var wire 1 S7 A_nand_B $end
$var wire 1 T7 A_nand_Cin $end
$var wire 1 U7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 b5 in1 $end
$var wire 1 \. in2 $end
$var wire 1 <7 in3 $end
$var wire 1 $6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 b5 in1 $end
$var wire 1 \. in2 $end
$var wire 1 S7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 b5 in1 $end
$var wire 1 <7 in2 $end
$var wire 1 T7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 \. in1 $end
$var wire 1 <7 in2 $end
$var wire 1 U7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 S7 in1 $end
$var wire 1 T7 in2 $end
$var wire 1 U7 in3 $end
$var wire 1 P7 out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 a5 A $end
$var wire 1 [. B $end
$var wire 1 P7 C_in $end
$var wire 1 #6 S $end
$var wire 1 Q7 C_out $end
$var wire 1 V7 A_nand_B $end
$var wire 1 W7 A_nand_Cin $end
$var wire 1 X7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 a5 in1 $end
$var wire 1 [. in2 $end
$var wire 1 P7 in3 $end
$var wire 1 #6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 a5 in1 $end
$var wire 1 [. in2 $end
$var wire 1 V7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 a5 in1 $end
$var wire 1 P7 in2 $end
$var wire 1 W7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 [. in1 $end
$var wire 1 P7 in2 $end
$var wire 1 X7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 V7 in1 $end
$var wire 1 W7 in2 $end
$var wire 1 X7 in3 $end
$var wire 1 Q7 out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 `5 A $end
$var wire 1 Z. B $end
$var wire 1 Q7 C_in $end
$var wire 1 "6 S $end
$var wire 1 R7 C_out $end
$var wire 1 Y7 A_nand_B $end
$var wire 1 Z7 A_nand_Cin $end
$var wire 1 [7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 `5 in1 $end
$var wire 1 Z. in2 $end
$var wire 1 Q7 in3 $end
$var wire 1 "6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 `5 in1 $end
$var wire 1 Z. in2 $end
$var wire 1 Y7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 `5 in1 $end
$var wire 1 Q7 in2 $end
$var wire 1 Z7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 Z. in1 $end
$var wire 1 Q7 in2 $end
$var wire 1 [7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 Y7 in1 $end
$var wire 1 Z7 in2 $end
$var wire 1 [7 in3 $end
$var wire 1 R7 out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 _5 A $end
$var wire 1 Y. B $end
$var wire 1 R7 C_in $end
$var wire 1 !6 S $end
$var wire 1 =7 C_out $end
$var wire 1 \7 A_nand_B $end
$var wire 1 ]7 A_nand_Cin $end
$var wire 1 ^7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 _5 in1 $end
$var wire 1 Y. in2 $end
$var wire 1 R7 in3 $end
$var wire 1 !6 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 _5 in1 $end
$var wire 1 Y. in2 $end
$var wire 1 \7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 _5 in1 $end
$var wire 1 R7 in2 $end
$var wire 1 ]7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 Y. in1 $end
$var wire 1 R7 in2 $end
$var wire 1 ^7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 \7 in1 $end
$var wire 1 ]7 in2 $end
$var wire 1 ^7 in3 $end
$var wire 1 =7 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit11_8 $end
$var parameter 32 _7 N $end
$var wire 1 [5 A [3] $end
$var wire 1 \5 A [2] $end
$var wire 1 ]5 A [1] $end
$var wire 1 ^5 A [0] $end
$var wire 1 U. B [3] $end
$var wire 1 V. B [2] $end
$var wire 1 W. B [1] $end
$var wire 1 X. B [0] $end
$var wire 1 =7 C_in $end
$var wire 1 {5 S [3] $end
$var wire 1 |5 S [2] $end
$var wire 1 }5 S [1] $end
$var wire 1 ~5 S [0] $end
$var wire 1 >7 C_out $end
$var wire 1 `7 C_in1 $end
$var wire 1 a7 C_in2 $end
$var wire 1 b7 C_in3 $end

$scope module rcaBit0 $end
$var wire 1 ^5 A $end
$var wire 1 X. B $end
$var wire 1 =7 C_in $end
$var wire 1 ~5 S $end
$var wire 1 `7 C_out $end
$var wire 1 c7 A_nand_B $end
$var wire 1 d7 A_nand_Cin $end
$var wire 1 e7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 ^5 in1 $end
$var wire 1 X. in2 $end
$var wire 1 =7 in3 $end
$var wire 1 ~5 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 ^5 in1 $end
$var wire 1 X. in2 $end
$var wire 1 c7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 ^5 in1 $end
$var wire 1 =7 in2 $end
$var wire 1 d7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 X. in1 $end
$var wire 1 =7 in2 $end
$var wire 1 e7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 c7 in1 $end
$var wire 1 d7 in2 $end
$var wire 1 e7 in3 $end
$var wire 1 `7 out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 ]5 A $end
$var wire 1 W. B $end
$var wire 1 `7 C_in $end
$var wire 1 }5 S $end
$var wire 1 a7 C_out $end
$var wire 1 f7 A_nand_B $end
$var wire 1 g7 A_nand_Cin $end
$var wire 1 h7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 ]5 in1 $end
$var wire 1 W. in2 $end
$var wire 1 `7 in3 $end
$var wire 1 }5 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 ]5 in1 $end
$var wire 1 W. in2 $end
$var wire 1 f7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 ]5 in1 $end
$var wire 1 `7 in2 $end
$var wire 1 g7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 W. in1 $end
$var wire 1 `7 in2 $end
$var wire 1 h7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 f7 in1 $end
$var wire 1 g7 in2 $end
$var wire 1 h7 in3 $end
$var wire 1 a7 out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 \5 A $end
$var wire 1 V. B $end
$var wire 1 a7 C_in $end
$var wire 1 |5 S $end
$var wire 1 b7 C_out $end
$var wire 1 i7 A_nand_B $end
$var wire 1 j7 A_nand_Cin $end
$var wire 1 k7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 \5 in1 $end
$var wire 1 V. in2 $end
$var wire 1 a7 in3 $end
$var wire 1 |5 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 \5 in1 $end
$var wire 1 V. in2 $end
$var wire 1 i7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 \5 in1 $end
$var wire 1 a7 in2 $end
$var wire 1 j7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 V. in1 $end
$var wire 1 a7 in2 $end
$var wire 1 k7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 i7 in1 $end
$var wire 1 j7 in2 $end
$var wire 1 k7 in3 $end
$var wire 1 b7 out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 [5 A $end
$var wire 1 U. B $end
$var wire 1 b7 C_in $end
$var wire 1 {5 S $end
$var wire 1 >7 C_out $end
$var wire 1 l7 A_nand_B $end
$var wire 1 m7 A_nand_Cin $end
$var wire 1 n7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 [5 in1 $end
$var wire 1 U. in2 $end
$var wire 1 b7 in3 $end
$var wire 1 {5 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 [5 in1 $end
$var wire 1 U. in2 $end
$var wire 1 l7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 [5 in1 $end
$var wire 1 b7 in2 $end
$var wire 1 m7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 U. in1 $end
$var wire 1 b7 in2 $end
$var wire 1 n7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 l7 in1 $end
$var wire 1 m7 in2 $end
$var wire 1 n7 in3 $end
$var wire 1 >7 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit15_12 $end
$var parameter 32 o7 N $end
$var wire 1 W5 A [3] $end
$var wire 1 X5 A [2] $end
$var wire 1 Y5 A [1] $end
$var wire 1 Z5 A [0] $end
$var wire 1 Q. B [3] $end
$var wire 1 R. B [2] $end
$var wire 1 S. B [1] $end
$var wire 1 T. B [0] $end
$var wire 1 >7 C_in $end
$var wire 1 w5 S [3] $end
$var wire 1 x5 S [2] $end
$var wire 1 y5 S [1] $end
$var wire 1 z5 S [0] $end
$var wire 1 96 C_out $end
$var wire 1 p7 C_in1 $end
$var wire 1 q7 C_in2 $end
$var wire 1 r7 C_in3 $end

$scope module rcaBit0 $end
$var wire 1 Z5 A $end
$var wire 1 T. B $end
$var wire 1 >7 C_in $end
$var wire 1 z5 S $end
$var wire 1 p7 C_out $end
$var wire 1 s7 A_nand_B $end
$var wire 1 t7 A_nand_Cin $end
$var wire 1 u7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Z5 in1 $end
$var wire 1 T. in2 $end
$var wire 1 >7 in3 $end
$var wire 1 z5 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Z5 in1 $end
$var wire 1 T. in2 $end
$var wire 1 s7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Z5 in1 $end
$var wire 1 >7 in2 $end
$var wire 1 t7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 T. in1 $end
$var wire 1 >7 in2 $end
$var wire 1 u7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 s7 in1 $end
$var wire 1 t7 in2 $end
$var wire 1 u7 in3 $end
$var wire 1 p7 out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 Y5 A $end
$var wire 1 S. B $end
$var wire 1 p7 C_in $end
$var wire 1 y5 S $end
$var wire 1 q7 C_out $end
$var wire 1 v7 A_nand_B $end
$var wire 1 w7 A_nand_Cin $end
$var wire 1 x7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Y5 in1 $end
$var wire 1 S. in2 $end
$var wire 1 p7 in3 $end
$var wire 1 y5 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Y5 in1 $end
$var wire 1 S. in2 $end
$var wire 1 v7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Y5 in1 $end
$var wire 1 p7 in2 $end
$var wire 1 w7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 S. in1 $end
$var wire 1 p7 in2 $end
$var wire 1 x7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 v7 in1 $end
$var wire 1 w7 in2 $end
$var wire 1 x7 in3 $end
$var wire 1 q7 out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 X5 A $end
$var wire 1 R. B $end
$var wire 1 q7 C_in $end
$var wire 1 x5 S $end
$var wire 1 r7 C_out $end
$var wire 1 y7 A_nand_B $end
$var wire 1 z7 A_nand_Cin $end
$var wire 1 {7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 X5 in1 $end
$var wire 1 R. in2 $end
$var wire 1 q7 in3 $end
$var wire 1 x5 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 X5 in1 $end
$var wire 1 R. in2 $end
$var wire 1 y7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 X5 in1 $end
$var wire 1 q7 in2 $end
$var wire 1 z7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 R. in1 $end
$var wire 1 q7 in2 $end
$var wire 1 {7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 y7 in1 $end
$var wire 1 z7 in2 $end
$var wire 1 {7 in3 $end
$var wire 1 r7 out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 W5 A $end
$var wire 1 Q. B $end
$var wire 1 r7 C_in $end
$var wire 1 w5 S $end
$var wire 1 96 C_out $end
$var wire 1 |7 A_nand_B $end
$var wire 1 }7 A_nand_Cin $end
$var wire 1 ~7 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 W5 in1 $end
$var wire 1 Q. in2 $end
$var wire 1 r7 in3 $end
$var wire 1 w5 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 W5 in1 $end
$var wire 1 Q. in2 $end
$var wire 1 |7 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 W5 in1 $end
$var wire 1 r7 in2 $end
$var wire 1 }7 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 Q. in1 $end
$var wire 1 r7 in2 $end
$var wire 1 ~7 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 |7 in1 $end
$var wire 1 }7 in2 $end
$var wire 1 ~7 in3 $end
$var wire 1 96 out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module mainALU $end
$var parameter 5 !8 SUBI $end
$var parameter 5 "8 ADDI $end
$var parameter 5 #8 ANDNI $end
$var parameter 5 $8 XORI $end
$var parameter 5 %8 ROLI $end
$var parameter 5 &8 SLLI $end
$var parameter 5 '8 RORI $end
$var parameter 5 (8 SRLI $end
$var parameter 5 )8 ST $end
$var parameter 5 *8 LD $end
$var parameter 5 +8 STU $end
$var parameter 5 ,8 BTR $end
$var parameter 5 -8 ALU_1 $end
$var parameter 2 .8 ADD $end
$var parameter 2 /8 SUB $end
$var parameter 2 08 XOR $end
$var parameter 2 18 ANDN $end
$var parameter 5 28 ALU_2 $end
$var parameter 2 38 ROL $end
$var parameter 2 48 SLL $end
$var parameter 2 58 ROR $end
$var parameter 2 68 SRL $end
$var parameter 5 78 SEQ $end
$var parameter 5 88 SLT $end
$var parameter 5 98 SLE $end
$var parameter 5 :8 SCO $end
$var parameter 5 ;8 BNEZ $end
$var parameter 5 <8 BEQZ $end
$var parameter 5 =8 BLTZ $end
$var parameter 5 >8 BGEZ $end
$var parameter 5 ?8 LBI $end
$var parameter 5 @8 SLBI $end
$var parameter 5 A8 J $end
$var parameter 5 B8 JR $end
$var parameter 5 C8 JAL $end
$var parameter 5 D8 JALR $end
$var parameter 5 E8 SIIC $end
$var parameter 5 F8 NOP $end
$var parameter 5 G8 RTI $end
$var parameter 5 H8 HALT $end
$var wire 1 a. A [15] $end
$var wire 1 b. A [14] $end
$var wire 1 c. A [13] $end
$var wire 1 d. A [12] $end
$var wire 1 e. A [11] $end
$var wire 1 f. A [10] $end
$var wire 1 g. A [9] $end
$var wire 1 h. A [8] $end
$var wire 1 i. A [7] $end
$var wire 1 j. A [6] $end
$var wire 1 k. A [5] $end
$var wire 1 l. A [4] $end
$var wire 1 m. A [3] $end
$var wire 1 n. A [2] $end
$var wire 1 o. A [1] $end
$var wire 1 p. A [0] $end
$var wire 1 D5 B [15] $end
$var wire 1 E5 B [14] $end
$var wire 1 F5 B [13] $end
$var wire 1 G5 B [12] $end
$var wire 1 H5 B [11] $end
$var wire 1 I5 B [10] $end
$var wire 1 J5 B [9] $end
$var wire 1 K5 B [8] $end
$var wire 1 L5 B [7] $end
$var wire 1 M5 B [6] $end
$var wire 1 N5 B [5] $end
$var wire 1 O5 B [4] $end
$var wire 1 P5 B [3] $end
$var wire 1 Q5 B [2] $end
$var wire 1 R5 B [1] $end
$var wire 1 S5 B [0] $end
$var wire 1 s/ Op [4] $end
$var wire 1 t/ Op [3] $end
$var wire 1 u/ Op [2] $end
$var wire 1 v/ Op [1] $end
$var wire 1 w/ Op [0] $end
$var wire 1 #0 Funct [1] $end
$var wire 1 $0 Funct [0] $end
$var wire 1 :0 invA $end
$var wire 1 ;0 invB $end
$var wire 1 <0 Cin $end
$var wire 1 -" Out [15] $end
$var wire 1 ." Out [14] $end
$var wire 1 /" Out [13] $end
$var wire 1 0" Out [12] $end
$var wire 1 1" Out [11] $end
$var wire 1 2" Out [10] $end
$var wire 1 3" Out [9] $end
$var wire 1 4" Out [8] $end
$var wire 1 5" Out [7] $end
$var wire 1 6" Out [6] $end
$var wire 1 7" Out [5] $end
$var wire 1 8" Out [4] $end
$var wire 1 9" Out [3] $end
$var wire 1 :" Out [2] $end
$var wire 1 ;" Out [1] $end
$var wire 1 <" Out [0] $end
$var wire 1 ;6 Zero $end
$var wire 1 <6 Pos $end
$var wire 1 =6 Neg $end
$var wire 1 >6 err $end
$var wire 1 I8 coutRCA $end
$var wire 1 J8 outRCA [15] $end
$var wire 1 K8 outRCA [14] $end
$var wire 1 L8 outRCA [13] $end
$var wire 1 M8 outRCA [12] $end
$var wire 1 N8 outRCA [11] $end
$var wire 1 O8 outRCA [10] $end
$var wire 1 P8 outRCA [9] $end
$var wire 1 Q8 outRCA [8] $end
$var wire 1 R8 outRCA [7] $end
$var wire 1 S8 outRCA [6] $end
$var wire 1 T8 outRCA [5] $end
$var wire 1 U8 outRCA [4] $end
$var wire 1 V8 outRCA [3] $end
$var wire 1 W8 outRCA [2] $end
$var wire 1 X8 outRCA [1] $end
$var wire 1 Y8 outRCA [0] $end
$var reg 16 Z8 outReg [15:0] $end
$var reg 1 [8 errRegister $end
$var wire 1 \8 outLeftRotate [15] $end
$var wire 1 ]8 outLeftRotate [14] $end
$var wire 1 ^8 outLeftRotate [13] $end
$var wire 1 _8 outLeftRotate [12] $end
$var wire 1 `8 outLeftRotate [11] $end
$var wire 1 a8 outLeftRotate [10] $end
$var wire 1 b8 outLeftRotate [9] $end
$var wire 1 c8 outLeftRotate [8] $end
$var wire 1 d8 outLeftRotate [7] $end
$var wire 1 e8 outLeftRotate [6] $end
$var wire 1 f8 outLeftRotate [5] $end
$var wire 1 g8 outLeftRotate [4] $end
$var wire 1 h8 outLeftRotate [3] $end
$var wire 1 i8 outLeftRotate [2] $end
$var wire 1 j8 outLeftRotate [1] $end
$var wire 1 k8 outLeftRotate [0] $end
$var wire 1 l8 outRightRotate [15] $end
$var wire 1 m8 outRightRotate [14] $end
$var wire 1 n8 outRightRotate [13] $end
$var wire 1 o8 outRightRotate [12] $end
$var wire 1 p8 outRightRotate [11] $end
$var wire 1 q8 outRightRotate [10] $end
$var wire 1 r8 outRightRotate [9] $end
$var wire 1 s8 outRightRotate [8] $end
$var wire 1 t8 outRightRotate [7] $end
$var wire 1 u8 outRightRotate [6] $end
$var wire 1 v8 outRightRotate [5] $end
$var wire 1 w8 outRightRotate [4] $end
$var wire 1 x8 outRightRotate [3] $end
$var wire 1 y8 outRightRotate [2] $end
$var wire 1 z8 outRightRotate [1] $end
$var wire 1 {8 outRightRotate [0] $end
$var wire 1 |8 outLeftShift [15] $end
$var wire 1 }8 outLeftShift [14] $end
$var wire 1 ~8 outLeftShift [13] $end
$var wire 1 !9 outLeftShift [12] $end
$var wire 1 "9 outLeftShift [11] $end
$var wire 1 #9 outLeftShift [10] $end
$var wire 1 $9 outLeftShift [9] $end
$var wire 1 %9 outLeftShift [8] $end
$var wire 1 &9 outLeftShift [7] $end
$var wire 1 '9 outLeftShift [6] $end
$var wire 1 (9 outLeftShift [5] $end
$var wire 1 )9 outLeftShift [4] $end
$var wire 1 *9 outLeftShift [3] $end
$var wire 1 +9 outLeftShift [2] $end
$var wire 1 ,9 outLeftShift [1] $end
$var wire 1 -9 outLeftShift [0] $end
$var wire 1 .9 outRightShift [15] $end
$var wire 1 /9 outRightShift [14] $end
$var wire 1 09 outRightShift [13] $end
$var wire 1 19 outRightShift [12] $end
$var wire 1 29 outRightShift [11] $end
$var wire 1 39 outRightShift [10] $end
$var wire 1 49 outRightShift [9] $end
$var wire 1 59 outRightShift [8] $end
$var wire 1 69 outRightShift [7] $end
$var wire 1 79 outRightShift [6] $end
$var wire 1 89 outRightShift [5] $end
$var wire 1 99 outRightShift [4] $end
$var wire 1 :9 outRightShift [3] $end
$var wire 1 ;9 outRightShift [2] $end
$var wire 1 <9 outRightShift [1] $end
$var wire 1 =9 outRightShift [0] $end
$var wire 1 >9 outBitRotate [15] $end
$var wire 1 ?9 outBitRotate [14] $end
$var wire 1 @9 outBitRotate [13] $end
$var wire 1 A9 outBitRotate [12] $end
$var wire 1 B9 outBitRotate [11] $end
$var wire 1 C9 outBitRotate [10] $end
$var wire 1 D9 outBitRotate [9] $end
$var wire 1 E9 outBitRotate [8] $end
$var wire 1 F9 outBitRotate [7] $end
$var wire 1 G9 outBitRotate [6] $end
$var wire 1 H9 outBitRotate [5] $end
$var wire 1 I9 outBitRotate [4] $end
$var wire 1 J9 outBitRotate [3] $end
$var wire 1 K9 outBitRotate [2] $end
$var wire 1 L9 outBitRotate [1] $end
$var wire 1 M9 outBitRotate [0] $end
$var wire 1 N9 newA [15] $end
$var wire 1 O9 newA [14] $end
$var wire 1 P9 newA [13] $end
$var wire 1 Q9 newA [12] $end
$var wire 1 R9 newA [11] $end
$var wire 1 S9 newA [10] $end
$var wire 1 T9 newA [9] $end
$var wire 1 U9 newA [8] $end
$var wire 1 V9 newA [7] $end
$var wire 1 W9 newA [6] $end
$var wire 1 X9 newA [5] $end
$var wire 1 Y9 newA [4] $end
$var wire 1 Z9 newA [3] $end
$var wire 1 [9 newA [2] $end
$var wire 1 \9 newA [1] $end
$var wire 1 ]9 newA [0] $end
$var wire 1 ^9 newB [15] $end
$var wire 1 _9 newB [14] $end
$var wire 1 `9 newB [13] $end
$var wire 1 a9 newB [12] $end
$var wire 1 b9 newB [11] $end
$var wire 1 c9 newB [10] $end
$var wire 1 d9 newB [9] $end
$var wire 1 e9 newB [8] $end
$var wire 1 f9 newB [7] $end
$var wire 1 g9 newB [6] $end
$var wire 1 h9 newB [5] $end
$var wire 1 i9 newB [4] $end
$var wire 1 j9 newB [3] $end
$var wire 1 k9 newB [2] $end
$var wire 1 l9 newB [1] $end
$var wire 1 m9 newB [0] $end

$scope module rippleCarryAdder $end
$var wire 1 N9 A [15] $end
$var wire 1 O9 A [14] $end
$var wire 1 P9 A [13] $end
$var wire 1 Q9 A [12] $end
$var wire 1 R9 A [11] $end
$var wire 1 S9 A [10] $end
$var wire 1 T9 A [9] $end
$var wire 1 U9 A [8] $end
$var wire 1 V9 A [7] $end
$var wire 1 W9 A [6] $end
$var wire 1 X9 A [5] $end
$var wire 1 Y9 A [4] $end
$var wire 1 Z9 A [3] $end
$var wire 1 [9 A [2] $end
$var wire 1 \9 A [1] $end
$var wire 1 ]9 A [0] $end
$var wire 1 ^9 B [15] $end
$var wire 1 _9 B [14] $end
$var wire 1 `9 B [13] $end
$var wire 1 a9 B [12] $end
$var wire 1 b9 B [11] $end
$var wire 1 c9 B [10] $end
$var wire 1 d9 B [9] $end
$var wire 1 e9 B [8] $end
$var wire 1 f9 B [7] $end
$var wire 1 g9 B [6] $end
$var wire 1 h9 B [5] $end
$var wire 1 i9 B [4] $end
$var wire 1 j9 B [3] $end
$var wire 1 k9 B [2] $end
$var wire 1 l9 B [1] $end
$var wire 1 m9 B [0] $end
$var wire 1 <0 C_in $end
$var wire 1 J8 S [15] $end
$var wire 1 K8 S [14] $end
$var wire 1 L8 S [13] $end
$var wire 1 M8 S [12] $end
$var wire 1 N8 S [11] $end
$var wire 1 O8 S [10] $end
$var wire 1 P8 S [9] $end
$var wire 1 Q8 S [8] $end
$var wire 1 R8 S [7] $end
$var wire 1 S8 S [6] $end
$var wire 1 T8 S [5] $end
$var wire 1 U8 S [4] $end
$var wire 1 V8 S [3] $end
$var wire 1 W8 S [2] $end
$var wire 1 X8 S [1] $end
$var wire 1 Y8 S [0] $end
$var wire 1 I8 C_out $end
$var wire 1 n9 C_in1 $end
$var wire 1 o9 C_in2 $end
$var wire 1 p9 C_in3 $end

$scope module rcaBit3_0 $end
$var parameter 32 q9 N $end
$var wire 1 Z9 A [3] $end
$var wire 1 [9 A [2] $end
$var wire 1 \9 A [1] $end
$var wire 1 ]9 A [0] $end
$var wire 1 j9 B [3] $end
$var wire 1 k9 B [2] $end
$var wire 1 l9 B [1] $end
$var wire 1 m9 B [0] $end
$var wire 1 <0 C_in $end
$var wire 1 V8 S [3] $end
$var wire 1 W8 S [2] $end
$var wire 1 X8 S [1] $end
$var wire 1 Y8 S [0] $end
$var wire 1 n9 C_out $end
$var wire 1 r9 C_in1 $end
$var wire 1 s9 C_in2 $end
$var wire 1 t9 C_in3 $end

$scope module rcaBit0 $end
$var wire 1 ]9 A $end
$var wire 1 m9 B $end
$var wire 1 <0 C_in $end
$var wire 1 Y8 S $end
$var wire 1 r9 C_out $end
$var wire 1 u9 A_nand_B $end
$var wire 1 v9 A_nand_Cin $end
$var wire 1 w9 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 ]9 in1 $end
$var wire 1 m9 in2 $end
$var wire 1 <0 in3 $end
$var wire 1 Y8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 ]9 in1 $end
$var wire 1 m9 in2 $end
$var wire 1 u9 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 ]9 in1 $end
$var wire 1 <0 in2 $end
$var wire 1 v9 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 m9 in1 $end
$var wire 1 <0 in2 $end
$var wire 1 w9 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 u9 in1 $end
$var wire 1 v9 in2 $end
$var wire 1 w9 in3 $end
$var wire 1 r9 out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 \9 A $end
$var wire 1 l9 B $end
$var wire 1 r9 C_in $end
$var wire 1 X8 S $end
$var wire 1 s9 C_out $end
$var wire 1 x9 A_nand_B $end
$var wire 1 y9 A_nand_Cin $end
$var wire 1 z9 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 \9 in1 $end
$var wire 1 l9 in2 $end
$var wire 1 r9 in3 $end
$var wire 1 X8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 \9 in1 $end
$var wire 1 l9 in2 $end
$var wire 1 x9 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 \9 in1 $end
$var wire 1 r9 in2 $end
$var wire 1 y9 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 l9 in1 $end
$var wire 1 r9 in2 $end
$var wire 1 z9 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 x9 in1 $end
$var wire 1 y9 in2 $end
$var wire 1 z9 in3 $end
$var wire 1 s9 out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 [9 A $end
$var wire 1 k9 B $end
$var wire 1 s9 C_in $end
$var wire 1 W8 S $end
$var wire 1 t9 C_out $end
$var wire 1 {9 A_nand_B $end
$var wire 1 |9 A_nand_Cin $end
$var wire 1 }9 B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 [9 in1 $end
$var wire 1 k9 in2 $end
$var wire 1 s9 in3 $end
$var wire 1 W8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 [9 in1 $end
$var wire 1 k9 in2 $end
$var wire 1 {9 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 [9 in1 $end
$var wire 1 s9 in2 $end
$var wire 1 |9 out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 k9 in1 $end
$var wire 1 s9 in2 $end
$var wire 1 }9 out $end
$upscope $end

$scope module final_nand $end
$var wire 1 {9 in1 $end
$var wire 1 |9 in2 $end
$var wire 1 }9 in3 $end
$var wire 1 t9 out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 Z9 A $end
$var wire 1 j9 B $end
$var wire 1 t9 C_in $end
$var wire 1 V8 S $end
$var wire 1 n9 C_out $end
$var wire 1 ~9 A_nand_B $end
$var wire 1 !: A_nand_Cin $end
$var wire 1 ": B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Z9 in1 $end
$var wire 1 j9 in2 $end
$var wire 1 t9 in3 $end
$var wire 1 V8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Z9 in1 $end
$var wire 1 j9 in2 $end
$var wire 1 ~9 out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Z9 in1 $end
$var wire 1 t9 in2 $end
$var wire 1 !: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 j9 in1 $end
$var wire 1 t9 in2 $end
$var wire 1 ": out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ~9 in1 $end
$var wire 1 !: in2 $end
$var wire 1 ": in3 $end
$var wire 1 n9 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit7_4 $end
$var parameter 32 #: N $end
$var wire 1 V9 A [3] $end
$var wire 1 W9 A [2] $end
$var wire 1 X9 A [1] $end
$var wire 1 Y9 A [0] $end
$var wire 1 f9 B [3] $end
$var wire 1 g9 B [2] $end
$var wire 1 h9 B [1] $end
$var wire 1 i9 B [0] $end
$var wire 1 n9 C_in $end
$var wire 1 R8 S [3] $end
$var wire 1 S8 S [2] $end
$var wire 1 T8 S [1] $end
$var wire 1 U8 S [0] $end
$var wire 1 o9 C_out $end
$var wire 1 $: C_in1 $end
$var wire 1 %: C_in2 $end
$var wire 1 &: C_in3 $end

$scope module rcaBit0 $end
$var wire 1 Y9 A $end
$var wire 1 i9 B $end
$var wire 1 n9 C_in $end
$var wire 1 U8 S $end
$var wire 1 $: C_out $end
$var wire 1 ': A_nand_B $end
$var wire 1 (: A_nand_Cin $end
$var wire 1 ): B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Y9 in1 $end
$var wire 1 i9 in2 $end
$var wire 1 n9 in3 $end
$var wire 1 U8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Y9 in1 $end
$var wire 1 i9 in2 $end
$var wire 1 ': out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Y9 in1 $end
$var wire 1 n9 in2 $end
$var wire 1 (: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 i9 in1 $end
$var wire 1 n9 in2 $end
$var wire 1 ): out $end
$upscope $end

$scope module final_nand $end
$var wire 1 ': in1 $end
$var wire 1 (: in2 $end
$var wire 1 ): in3 $end
$var wire 1 $: out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 X9 A $end
$var wire 1 h9 B $end
$var wire 1 $: C_in $end
$var wire 1 T8 S $end
$var wire 1 %: C_out $end
$var wire 1 *: A_nand_B $end
$var wire 1 +: A_nand_Cin $end
$var wire 1 ,: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 X9 in1 $end
$var wire 1 h9 in2 $end
$var wire 1 $: in3 $end
$var wire 1 T8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 X9 in1 $end
$var wire 1 h9 in2 $end
$var wire 1 *: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 X9 in1 $end
$var wire 1 $: in2 $end
$var wire 1 +: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 h9 in1 $end
$var wire 1 $: in2 $end
$var wire 1 ,: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 *: in1 $end
$var wire 1 +: in2 $end
$var wire 1 ,: in3 $end
$var wire 1 %: out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 W9 A $end
$var wire 1 g9 B $end
$var wire 1 %: C_in $end
$var wire 1 S8 S $end
$var wire 1 &: C_out $end
$var wire 1 -: A_nand_B $end
$var wire 1 .: A_nand_Cin $end
$var wire 1 /: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 W9 in1 $end
$var wire 1 g9 in2 $end
$var wire 1 %: in3 $end
$var wire 1 S8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 W9 in1 $end
$var wire 1 g9 in2 $end
$var wire 1 -: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 W9 in1 $end
$var wire 1 %: in2 $end
$var wire 1 .: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 g9 in1 $end
$var wire 1 %: in2 $end
$var wire 1 /: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 -: in1 $end
$var wire 1 .: in2 $end
$var wire 1 /: in3 $end
$var wire 1 &: out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 V9 A $end
$var wire 1 f9 B $end
$var wire 1 &: C_in $end
$var wire 1 R8 S $end
$var wire 1 o9 C_out $end
$var wire 1 0: A_nand_B $end
$var wire 1 1: A_nand_Cin $end
$var wire 1 2: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 V9 in1 $end
$var wire 1 f9 in2 $end
$var wire 1 &: in3 $end
$var wire 1 R8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 V9 in1 $end
$var wire 1 f9 in2 $end
$var wire 1 0: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 V9 in1 $end
$var wire 1 &: in2 $end
$var wire 1 1: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 f9 in1 $end
$var wire 1 &: in2 $end
$var wire 1 2: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 0: in1 $end
$var wire 1 1: in2 $end
$var wire 1 2: in3 $end
$var wire 1 o9 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit11_8 $end
$var parameter 32 3: N $end
$var wire 1 R9 A [3] $end
$var wire 1 S9 A [2] $end
$var wire 1 T9 A [1] $end
$var wire 1 U9 A [0] $end
$var wire 1 b9 B [3] $end
$var wire 1 c9 B [2] $end
$var wire 1 d9 B [1] $end
$var wire 1 e9 B [0] $end
$var wire 1 o9 C_in $end
$var wire 1 N8 S [3] $end
$var wire 1 O8 S [2] $end
$var wire 1 P8 S [1] $end
$var wire 1 Q8 S [0] $end
$var wire 1 p9 C_out $end
$var wire 1 4: C_in1 $end
$var wire 1 5: C_in2 $end
$var wire 1 6: C_in3 $end

$scope module rcaBit0 $end
$var wire 1 U9 A $end
$var wire 1 e9 B $end
$var wire 1 o9 C_in $end
$var wire 1 Q8 S $end
$var wire 1 4: C_out $end
$var wire 1 7: A_nand_B $end
$var wire 1 8: A_nand_Cin $end
$var wire 1 9: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 U9 in1 $end
$var wire 1 e9 in2 $end
$var wire 1 o9 in3 $end
$var wire 1 Q8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 U9 in1 $end
$var wire 1 e9 in2 $end
$var wire 1 7: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 U9 in1 $end
$var wire 1 o9 in2 $end
$var wire 1 8: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 e9 in1 $end
$var wire 1 o9 in2 $end
$var wire 1 9: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 7: in1 $end
$var wire 1 8: in2 $end
$var wire 1 9: in3 $end
$var wire 1 4: out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 T9 A $end
$var wire 1 d9 B $end
$var wire 1 4: C_in $end
$var wire 1 P8 S $end
$var wire 1 5: C_out $end
$var wire 1 :: A_nand_B $end
$var wire 1 ;: A_nand_Cin $end
$var wire 1 <: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 T9 in1 $end
$var wire 1 d9 in2 $end
$var wire 1 4: in3 $end
$var wire 1 P8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 T9 in1 $end
$var wire 1 d9 in2 $end
$var wire 1 :: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 T9 in1 $end
$var wire 1 4: in2 $end
$var wire 1 ;: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 d9 in1 $end
$var wire 1 4: in2 $end
$var wire 1 <: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 :: in1 $end
$var wire 1 ;: in2 $end
$var wire 1 <: in3 $end
$var wire 1 5: out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 S9 A $end
$var wire 1 c9 B $end
$var wire 1 5: C_in $end
$var wire 1 O8 S $end
$var wire 1 6: C_out $end
$var wire 1 =: A_nand_B $end
$var wire 1 >: A_nand_Cin $end
$var wire 1 ?: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 S9 in1 $end
$var wire 1 c9 in2 $end
$var wire 1 5: in3 $end
$var wire 1 O8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 S9 in1 $end
$var wire 1 c9 in2 $end
$var wire 1 =: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 S9 in1 $end
$var wire 1 5: in2 $end
$var wire 1 >: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 c9 in1 $end
$var wire 1 5: in2 $end
$var wire 1 ?: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 =: in1 $end
$var wire 1 >: in2 $end
$var wire 1 ?: in3 $end
$var wire 1 6: out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 R9 A $end
$var wire 1 b9 B $end
$var wire 1 6: C_in $end
$var wire 1 N8 S $end
$var wire 1 p9 C_out $end
$var wire 1 @: A_nand_B $end
$var wire 1 A: A_nand_Cin $end
$var wire 1 B: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 R9 in1 $end
$var wire 1 b9 in2 $end
$var wire 1 6: in3 $end
$var wire 1 N8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 R9 in1 $end
$var wire 1 b9 in2 $end
$var wire 1 @: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 R9 in1 $end
$var wire 1 6: in2 $end
$var wire 1 A: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 b9 in1 $end
$var wire 1 6: in2 $end
$var wire 1 B: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 @: in1 $end
$var wire 1 A: in2 $end
$var wire 1 B: in3 $end
$var wire 1 p9 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module rcaBit15_12 $end
$var parameter 32 C: N $end
$var wire 1 N9 A [3] $end
$var wire 1 O9 A [2] $end
$var wire 1 P9 A [1] $end
$var wire 1 Q9 A [0] $end
$var wire 1 ^9 B [3] $end
$var wire 1 _9 B [2] $end
$var wire 1 `9 B [1] $end
$var wire 1 a9 B [0] $end
$var wire 1 p9 C_in $end
$var wire 1 J8 S [3] $end
$var wire 1 K8 S [2] $end
$var wire 1 L8 S [1] $end
$var wire 1 M8 S [0] $end
$var wire 1 I8 C_out $end
$var wire 1 D: C_in1 $end
$var wire 1 E: C_in2 $end
$var wire 1 F: C_in3 $end

$scope module rcaBit0 $end
$var wire 1 Q9 A $end
$var wire 1 a9 B $end
$var wire 1 p9 C_in $end
$var wire 1 M8 S $end
$var wire 1 D: C_out $end
$var wire 1 G: A_nand_B $end
$var wire 1 H: A_nand_Cin $end
$var wire 1 I: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 Q9 in1 $end
$var wire 1 a9 in2 $end
$var wire 1 p9 in3 $end
$var wire 1 M8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 Q9 in1 $end
$var wire 1 a9 in2 $end
$var wire 1 G: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 Q9 in1 $end
$var wire 1 p9 in2 $end
$var wire 1 H: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 a9 in1 $end
$var wire 1 p9 in2 $end
$var wire 1 I: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 G: in1 $end
$var wire 1 H: in2 $end
$var wire 1 I: in3 $end
$var wire 1 D: out $end
$upscope $end
$upscope $end

$scope module rcaBit1 $end
$var wire 1 P9 A $end
$var wire 1 `9 B $end
$var wire 1 D: C_in $end
$var wire 1 L8 S $end
$var wire 1 E: C_out $end
$var wire 1 J: A_nand_B $end
$var wire 1 K: A_nand_Cin $end
$var wire 1 L: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 P9 in1 $end
$var wire 1 `9 in2 $end
$var wire 1 D: in3 $end
$var wire 1 L8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 P9 in1 $end
$var wire 1 `9 in2 $end
$var wire 1 J: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 P9 in1 $end
$var wire 1 D: in2 $end
$var wire 1 K: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 `9 in1 $end
$var wire 1 D: in2 $end
$var wire 1 L: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 J: in1 $end
$var wire 1 K: in2 $end
$var wire 1 L: in3 $end
$var wire 1 E: out $end
$upscope $end
$upscope $end

$scope module rcaBit2 $end
$var wire 1 O9 A $end
$var wire 1 _9 B $end
$var wire 1 E: C_in $end
$var wire 1 K8 S $end
$var wire 1 F: C_out $end
$var wire 1 M: A_nand_B $end
$var wire 1 N: A_nand_Cin $end
$var wire 1 O: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 O9 in1 $end
$var wire 1 _9 in2 $end
$var wire 1 E: in3 $end
$var wire 1 K8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 O9 in1 $end
$var wire 1 _9 in2 $end
$var wire 1 M: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 O9 in1 $end
$var wire 1 E: in2 $end
$var wire 1 N: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 _9 in1 $end
$var wire 1 E: in2 $end
$var wire 1 O: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 M: in1 $end
$var wire 1 N: in2 $end
$var wire 1 O: in3 $end
$var wire 1 F: out $end
$upscope $end
$upscope $end

$scope module rcaBit3 $end
$var wire 1 N9 A $end
$var wire 1 ^9 B $end
$var wire 1 F: C_in $end
$var wire 1 J8 S $end
$var wire 1 I8 C_out $end
$var wire 1 P: A_nand_B $end
$var wire 1 Q: A_nand_Cin $end
$var wire 1 R: B_nand_Cin $end

$scope module A_B_Cin_Xor $end
$var wire 1 N9 in1 $end
$var wire 1 ^9 in2 $end
$var wire 1 F: in3 $end
$var wire 1 J8 out $end
$upscope $end

$scope module A_B_nand $end
$var wire 1 N9 in1 $end
$var wire 1 ^9 in2 $end
$var wire 1 P: out $end
$upscope $end

$scope module A_Cin_nand $end
$var wire 1 N9 in1 $end
$var wire 1 F: in2 $end
$var wire 1 Q: out $end
$upscope $end

$scope module B_Cin_nand $end
$var wire 1 ^9 in1 $end
$var wire 1 F: in2 $end
$var wire 1 R: out $end
$upscope $end

$scope module final_nand $end
$var wire 1 P: in1 $end
$var wire 1 Q: in2 $end
$var wire 1 R: in3 $end
$var wire 1 I8 out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lr1 $end
$var parameter 32 S: N $end
$var parameter 32 T: C $end
$var wire 1 a. In [15] $end
$var wire 1 b. In [14] $end
$var wire 1 c. In [13] $end
$var wire 1 d. In [12] $end
$var wire 1 e. In [11] $end
$var wire 1 f. In [10] $end
$var wire 1 g. In [9] $end
$var wire 1 h. In [8] $end
$var wire 1 i. In [7] $end
$var wire 1 j. In [6] $end
$var wire 1 k. In [5] $end
$var wire 1 l. In [4] $end
$var wire 1 m. In [3] $end
$var wire 1 n. In [2] $end
$var wire 1 o. In [1] $end
$var wire 1 p. In [0] $end
$var wire 1 P5 Cnt [3] $end
$var wire 1 Q5 Cnt [2] $end
$var wire 1 R5 Cnt [1] $end
$var wire 1 S5 Cnt [0] $end
$var wire 1 \8 Out [15] $end
$var wire 1 ]8 Out [14] $end
$var wire 1 ^8 Out [13] $end
$var wire 1 _8 Out [12] $end
$var wire 1 `8 Out [11] $end
$var wire 1 a8 Out [10] $end
$var wire 1 b8 Out [9] $end
$var wire 1 c8 Out [8] $end
$var wire 1 d8 Out [7] $end
$var wire 1 e8 Out [6] $end
$var wire 1 f8 Out [5] $end
$var wire 1 g8 Out [4] $end
$var wire 1 h8 Out [3] $end
$var wire 1 i8 Out [2] $end
$var wire 1 j8 Out [1] $end
$var wire 1 k8 Out [0] $end
$var wire 1 U: leftRotate8 [15] $end
$var wire 1 V: leftRotate8 [14] $end
$var wire 1 W: leftRotate8 [13] $end
$var wire 1 X: leftRotate8 [12] $end
$var wire 1 Y: leftRotate8 [11] $end
$var wire 1 Z: leftRotate8 [10] $end
$var wire 1 [: leftRotate8 [9] $end
$var wire 1 \: leftRotate8 [8] $end
$var wire 1 ]: leftRotate8 [7] $end
$var wire 1 ^: leftRotate8 [6] $end
$var wire 1 _: leftRotate8 [5] $end
$var wire 1 `: leftRotate8 [4] $end
$var wire 1 a: leftRotate8 [3] $end
$var wire 1 b: leftRotate8 [2] $end
$var wire 1 c: leftRotate8 [1] $end
$var wire 1 d: leftRotate8 [0] $end
$var wire 1 e: leftRotate8_out [15] $end
$var wire 1 f: leftRotate8_out [14] $end
$var wire 1 g: leftRotate8_out [13] $end
$var wire 1 h: leftRotate8_out [12] $end
$var wire 1 i: leftRotate8_out [11] $end
$var wire 1 j: leftRotate8_out [10] $end
$var wire 1 k: leftRotate8_out [9] $end
$var wire 1 l: leftRotate8_out [8] $end
$var wire 1 m: leftRotate8_out [7] $end
$var wire 1 n: leftRotate8_out [6] $end
$var wire 1 o: leftRotate8_out [5] $end
$var wire 1 p: leftRotate8_out [4] $end
$var wire 1 q: leftRotate8_out [3] $end
$var wire 1 r: leftRotate8_out [2] $end
$var wire 1 s: leftRotate8_out [1] $end
$var wire 1 t: leftRotate8_out [0] $end
$var wire 1 u: leftRotate4 [15] $end
$var wire 1 v: leftRotate4 [14] $end
$var wire 1 w: leftRotate4 [13] $end
$var wire 1 x: leftRotate4 [12] $end
$var wire 1 y: leftRotate4 [11] $end
$var wire 1 z: leftRotate4 [10] $end
$var wire 1 {: leftRotate4 [9] $end
$var wire 1 |: leftRotate4 [8] $end
$var wire 1 }: leftRotate4 [7] $end
$var wire 1 ~: leftRotate4 [6] $end
$var wire 1 !; leftRotate4 [5] $end
$var wire 1 "; leftRotate4 [4] $end
$var wire 1 #; leftRotate4 [3] $end
$var wire 1 $; leftRotate4 [2] $end
$var wire 1 %; leftRotate4 [1] $end
$var wire 1 &; leftRotate4 [0] $end
$var wire 1 '; leftRotate4_out [15] $end
$var wire 1 (; leftRotate4_out [14] $end
$var wire 1 ); leftRotate4_out [13] $end
$var wire 1 *; leftRotate4_out [12] $end
$var wire 1 +; leftRotate4_out [11] $end
$var wire 1 ,; leftRotate4_out [10] $end
$var wire 1 -; leftRotate4_out [9] $end
$var wire 1 .; leftRotate4_out [8] $end
$var wire 1 /; leftRotate4_out [7] $end
$var wire 1 0; leftRotate4_out [6] $end
$var wire 1 1; leftRotate4_out [5] $end
$var wire 1 2; leftRotate4_out [4] $end
$var wire 1 3; leftRotate4_out [3] $end
$var wire 1 4; leftRotate4_out [2] $end
$var wire 1 5; leftRotate4_out [1] $end
$var wire 1 6; leftRotate4_out [0] $end
$var wire 1 7; leftRotate2 [15] $end
$var wire 1 8; leftRotate2 [14] $end
$var wire 1 9; leftRotate2 [13] $end
$var wire 1 :; leftRotate2 [12] $end
$var wire 1 ;; leftRotate2 [11] $end
$var wire 1 <; leftRotate2 [10] $end
$var wire 1 =; leftRotate2 [9] $end
$var wire 1 >; leftRotate2 [8] $end
$var wire 1 ?; leftRotate2 [7] $end
$var wire 1 @; leftRotate2 [6] $end
$var wire 1 A; leftRotate2 [5] $end
$var wire 1 B; leftRotate2 [4] $end
$var wire 1 C; leftRotate2 [3] $end
$var wire 1 D; leftRotate2 [2] $end
$var wire 1 E; leftRotate2 [1] $end
$var wire 1 F; leftRotate2 [0] $end
$var wire 1 G; leftRotate2_out [15] $end
$var wire 1 H; leftRotate2_out [14] $end
$var wire 1 I; leftRotate2_out [13] $end
$var wire 1 J; leftRotate2_out [12] $end
$var wire 1 K; leftRotate2_out [11] $end
$var wire 1 L; leftRotate2_out [10] $end
$var wire 1 M; leftRotate2_out [9] $end
$var wire 1 N; leftRotate2_out [8] $end
$var wire 1 O; leftRotate2_out [7] $end
$var wire 1 P; leftRotate2_out [6] $end
$var wire 1 Q; leftRotate2_out [5] $end
$var wire 1 R; leftRotate2_out [4] $end
$var wire 1 S; leftRotate2_out [3] $end
$var wire 1 T; leftRotate2_out [2] $end
$var wire 1 U; leftRotate2_out [1] $end
$var wire 1 V; leftRotate2_out [0] $end
$var wire 1 W; leftRotate1 [15] $end
$var wire 1 X; leftRotate1 [14] $end
$var wire 1 Y; leftRotate1 [13] $end
$var wire 1 Z; leftRotate1 [12] $end
$var wire 1 [; leftRotate1 [11] $end
$var wire 1 \; leftRotate1 [10] $end
$var wire 1 ]; leftRotate1 [9] $end
$var wire 1 ^; leftRotate1 [8] $end
$var wire 1 _; leftRotate1 [7] $end
$var wire 1 `; leftRotate1 [6] $end
$var wire 1 a; leftRotate1 [5] $end
$var wire 1 b; leftRotate1 [4] $end
$var wire 1 c; leftRotate1 [3] $end
$var wire 1 d; leftRotate1 [2] $end
$var wire 1 e; leftRotate1 [1] $end
$var wire 1 f; leftRotate1 [0] $end

$scope module rotate8_mux $end
$var parameter 32 g; NUM_BITS $end
$var wire 1 a. InA [15] $end
$var wire 1 b. InA [14] $end
$var wire 1 c. InA [13] $end
$var wire 1 d. InA [12] $end
$var wire 1 e. InA [11] $end
$var wire 1 f. InA [10] $end
$var wire 1 g. InA [9] $end
$var wire 1 h. InA [8] $end
$var wire 1 i. InA [7] $end
$var wire 1 j. InA [6] $end
$var wire 1 k. InA [5] $end
$var wire 1 l. InA [4] $end
$var wire 1 m. InA [3] $end
$var wire 1 n. InA [2] $end
$var wire 1 o. InA [1] $end
$var wire 1 p. InA [0] $end
$var wire 1 U: InB [15] $end
$var wire 1 V: InB [14] $end
$var wire 1 W: InB [13] $end
$var wire 1 X: InB [12] $end
$var wire 1 Y: InB [11] $end
$var wire 1 Z: InB [10] $end
$var wire 1 [: InB [9] $end
$var wire 1 \: InB [8] $end
$var wire 1 ]: InB [7] $end
$var wire 1 ^: InB [6] $end
$var wire 1 _: InB [5] $end
$var wire 1 `: InB [4] $end
$var wire 1 a: InB [3] $end
$var wire 1 b: InB [2] $end
$var wire 1 c: InB [1] $end
$var wire 1 d: InB [0] $end
$var wire 1 P5 S $end
$var wire 1 e: Out [15] $end
$var wire 1 f: Out [14] $end
$var wire 1 g: Out [13] $end
$var wire 1 h: Out [12] $end
$var wire 1 i: Out [11] $end
$var wire 1 j: Out [10] $end
$var wire 1 k: Out [9] $end
$var wire 1 l: Out [8] $end
$var wire 1 m: Out [7] $end
$var wire 1 n: Out [6] $end
$var wire 1 o: Out [5] $end
$var wire 1 p: Out [4] $end
$var wire 1 q: Out [3] $end
$var wire 1 r: Out [2] $end
$var wire 1 s: Out [1] $end
$var wire 1 t: Out [0] $end
$upscope $end

$scope module rotate4_mux $end
$var parameter 32 h; NUM_BITS $end
$var wire 1 e: InA [15] $end
$var wire 1 f: InA [14] $end
$var wire 1 g: InA [13] $end
$var wire 1 h: InA [12] $end
$var wire 1 i: InA [11] $end
$var wire 1 j: InA [10] $end
$var wire 1 k: InA [9] $end
$var wire 1 l: InA [8] $end
$var wire 1 m: InA [7] $end
$var wire 1 n: InA [6] $end
$var wire 1 o: InA [5] $end
$var wire 1 p: InA [4] $end
$var wire 1 q: InA [3] $end
$var wire 1 r: InA [2] $end
$var wire 1 s: InA [1] $end
$var wire 1 t: InA [0] $end
$var wire 1 u: InB [15] $end
$var wire 1 v: InB [14] $end
$var wire 1 w: InB [13] $end
$var wire 1 x: InB [12] $end
$var wire 1 y: InB [11] $end
$var wire 1 z: InB [10] $end
$var wire 1 {: InB [9] $end
$var wire 1 |: InB [8] $end
$var wire 1 }: InB [7] $end
$var wire 1 ~: InB [6] $end
$var wire 1 !; InB [5] $end
$var wire 1 "; InB [4] $end
$var wire 1 #; InB [3] $end
$var wire 1 $; InB [2] $end
$var wire 1 %; InB [1] $end
$var wire 1 &; InB [0] $end
$var wire 1 Q5 S $end
$var wire 1 '; Out [15] $end
$var wire 1 (; Out [14] $end
$var wire 1 ); Out [13] $end
$var wire 1 *; Out [12] $end
$var wire 1 +; Out [11] $end
$var wire 1 ,; Out [10] $end
$var wire 1 -; Out [9] $end
$var wire 1 .; Out [8] $end
$var wire 1 /; Out [7] $end
$var wire 1 0; Out [6] $end
$var wire 1 1; Out [5] $end
$var wire 1 2; Out [4] $end
$var wire 1 3; Out [3] $end
$var wire 1 4; Out [2] $end
$var wire 1 5; Out [1] $end
$var wire 1 6; Out [0] $end
$upscope $end

$scope module rotate2_mux $end
$var parameter 32 i; NUM_BITS $end
$var wire 1 '; InA [15] $end
$var wire 1 (; InA [14] $end
$var wire 1 ); InA [13] $end
$var wire 1 *; InA [12] $end
$var wire 1 +; InA [11] $end
$var wire 1 ,; InA [10] $end
$var wire 1 -; InA [9] $end
$var wire 1 .; InA [8] $end
$var wire 1 /; InA [7] $end
$var wire 1 0; InA [6] $end
$var wire 1 1; InA [5] $end
$var wire 1 2; InA [4] $end
$var wire 1 3; InA [3] $end
$var wire 1 4; InA [2] $end
$var wire 1 5; InA [1] $end
$var wire 1 6; InA [0] $end
$var wire 1 7; InB [15] $end
$var wire 1 8; InB [14] $end
$var wire 1 9; InB [13] $end
$var wire 1 :; InB [12] $end
$var wire 1 ;; InB [11] $end
$var wire 1 <; InB [10] $end
$var wire 1 =; InB [9] $end
$var wire 1 >; InB [8] $end
$var wire 1 ?; InB [7] $end
$var wire 1 @; InB [6] $end
$var wire 1 A; InB [5] $end
$var wire 1 B; InB [4] $end
$var wire 1 C; InB [3] $end
$var wire 1 D; InB [2] $end
$var wire 1 E; InB [1] $end
$var wire 1 F; InB [0] $end
$var wire 1 R5 S $end
$var wire 1 G; Out [15] $end
$var wire 1 H; Out [14] $end
$var wire 1 I; Out [13] $end
$var wire 1 J; Out [12] $end
$var wire 1 K; Out [11] $end
$var wire 1 L; Out [10] $end
$var wire 1 M; Out [9] $end
$var wire 1 N; Out [8] $end
$var wire 1 O; Out [7] $end
$var wire 1 P; Out [6] $end
$var wire 1 Q; Out [5] $end
$var wire 1 R; Out [4] $end
$var wire 1 S; Out [3] $end
$var wire 1 T; Out [2] $end
$var wire 1 U; Out [1] $end
$var wire 1 V; Out [0] $end
$upscope $end

$scope module rotate1_mux $end
$var parameter 32 j; NUM_BITS $end
$var wire 1 G; InA [15] $end
$var wire 1 H; InA [14] $end
$var wire 1 I; InA [13] $end
$var wire 1 J; InA [12] $end
$var wire 1 K; InA [11] $end
$var wire 1 L; InA [10] $end
$var wire 1 M; InA [9] $end
$var wire 1 N; InA [8] $end
$var wire 1 O; InA [7] $end
$var wire 1 P; InA [6] $end
$var wire 1 Q; InA [5] $end
$var wire 1 R; InA [4] $end
$var wire 1 S; InA [3] $end
$var wire 1 T; InA [2] $end
$var wire 1 U; InA [1] $end
$var wire 1 V; InA [0] $end
$var wire 1 W; InB [15] $end
$var wire 1 X; InB [14] $end
$var wire 1 Y; InB [13] $end
$var wire 1 Z; InB [12] $end
$var wire 1 [; InB [11] $end
$var wire 1 \; InB [10] $end
$var wire 1 ]; InB [9] $end
$var wire 1 ^; InB [8] $end
$var wire 1 _; InB [7] $end
$var wire 1 `; InB [6] $end
$var wire 1 a; InB [5] $end
$var wire 1 b; InB [4] $end
$var wire 1 c; InB [3] $end
$var wire 1 d; InB [2] $end
$var wire 1 e; InB [1] $end
$var wire 1 f; InB [0] $end
$var wire 1 S5 S $end
$var wire 1 \8 Out [15] $end
$var wire 1 ]8 Out [14] $end
$var wire 1 ^8 Out [13] $end
$var wire 1 _8 Out [12] $end
$var wire 1 `8 Out [11] $end
$var wire 1 a8 Out [10] $end
$var wire 1 b8 Out [9] $end
$var wire 1 c8 Out [8] $end
$var wire 1 d8 Out [7] $end
$var wire 1 e8 Out [6] $end
$var wire 1 f8 Out [5] $end
$var wire 1 g8 Out [4] $end
$var wire 1 h8 Out [3] $end
$var wire 1 i8 Out [2] $end
$var wire 1 j8 Out [1] $end
$var wire 1 k8 Out [0] $end
$upscope $end
$upscope $end

$scope module rr1 $end
$var parameter 32 k; N $end
$var parameter 32 l; C $end
$var wire 1 a. In [15] $end
$var wire 1 b. In [14] $end
$var wire 1 c. In [13] $end
$var wire 1 d. In [12] $end
$var wire 1 e. In [11] $end
$var wire 1 f. In [10] $end
$var wire 1 g. In [9] $end
$var wire 1 h. In [8] $end
$var wire 1 i. In [7] $end
$var wire 1 j. In [6] $end
$var wire 1 k. In [5] $end
$var wire 1 l. In [4] $end
$var wire 1 m. In [3] $end
$var wire 1 n. In [2] $end
$var wire 1 o. In [1] $end
$var wire 1 p. In [0] $end
$var wire 1 P5 Cnt [3] $end
$var wire 1 Q5 Cnt [2] $end
$var wire 1 R5 Cnt [1] $end
$var wire 1 S5 Cnt [0] $end
$var wire 1 l8 Out [15] $end
$var wire 1 m8 Out [14] $end
$var wire 1 n8 Out [13] $end
$var wire 1 o8 Out [12] $end
$var wire 1 p8 Out [11] $end
$var wire 1 q8 Out [10] $end
$var wire 1 r8 Out [9] $end
$var wire 1 s8 Out [8] $end
$var wire 1 t8 Out [7] $end
$var wire 1 u8 Out [6] $end
$var wire 1 v8 Out [5] $end
$var wire 1 w8 Out [4] $end
$var wire 1 x8 Out [3] $end
$var wire 1 y8 Out [2] $end
$var wire 1 z8 Out [1] $end
$var wire 1 {8 Out [0] $end
$var wire 1 m; rightRotate8 [15] $end
$var wire 1 n; rightRotate8 [14] $end
$var wire 1 o; rightRotate8 [13] $end
$var wire 1 p; rightRotate8 [12] $end
$var wire 1 q; rightRotate8 [11] $end
$var wire 1 r; rightRotate8 [10] $end
$var wire 1 s; rightRotate8 [9] $end
$var wire 1 t; rightRotate8 [8] $end
$var wire 1 u; rightRotate8 [7] $end
$var wire 1 v; rightRotate8 [6] $end
$var wire 1 w; rightRotate8 [5] $end
$var wire 1 x; rightRotate8 [4] $end
$var wire 1 y; rightRotate8 [3] $end
$var wire 1 z; rightRotate8 [2] $end
$var wire 1 {; rightRotate8 [1] $end
$var wire 1 |; rightRotate8 [0] $end
$var wire 1 }; rightRotate8_out [15] $end
$var wire 1 ~; rightRotate8_out [14] $end
$var wire 1 !< rightRotate8_out [13] $end
$var wire 1 "< rightRotate8_out [12] $end
$var wire 1 #< rightRotate8_out [11] $end
$var wire 1 $< rightRotate8_out [10] $end
$var wire 1 %< rightRotate8_out [9] $end
$var wire 1 &< rightRotate8_out [8] $end
$var wire 1 '< rightRotate8_out [7] $end
$var wire 1 (< rightRotate8_out [6] $end
$var wire 1 )< rightRotate8_out [5] $end
$var wire 1 *< rightRotate8_out [4] $end
$var wire 1 +< rightRotate8_out [3] $end
$var wire 1 ,< rightRotate8_out [2] $end
$var wire 1 -< rightRotate8_out [1] $end
$var wire 1 .< rightRotate8_out [0] $end
$var wire 1 /< rightRotate4 [15] $end
$var wire 1 0< rightRotate4 [14] $end
$var wire 1 1< rightRotate4 [13] $end
$var wire 1 2< rightRotate4 [12] $end
$var wire 1 3< rightRotate4 [11] $end
$var wire 1 4< rightRotate4 [10] $end
$var wire 1 5< rightRotate4 [9] $end
$var wire 1 6< rightRotate4 [8] $end
$var wire 1 7< rightRotate4 [7] $end
$var wire 1 8< rightRotate4 [6] $end
$var wire 1 9< rightRotate4 [5] $end
$var wire 1 :< rightRotate4 [4] $end
$var wire 1 ;< rightRotate4 [3] $end
$var wire 1 << rightRotate4 [2] $end
$var wire 1 =< rightRotate4 [1] $end
$var wire 1 >< rightRotate4 [0] $end
$var wire 1 ?< rightRotate4_out [15] $end
$var wire 1 @< rightRotate4_out [14] $end
$var wire 1 A< rightRotate4_out [13] $end
$var wire 1 B< rightRotate4_out [12] $end
$var wire 1 C< rightRotate4_out [11] $end
$var wire 1 D< rightRotate4_out [10] $end
$var wire 1 E< rightRotate4_out [9] $end
$var wire 1 F< rightRotate4_out [8] $end
$var wire 1 G< rightRotate4_out [7] $end
$var wire 1 H< rightRotate4_out [6] $end
$var wire 1 I< rightRotate4_out [5] $end
$var wire 1 J< rightRotate4_out [4] $end
$var wire 1 K< rightRotate4_out [3] $end
$var wire 1 L< rightRotate4_out [2] $end
$var wire 1 M< rightRotate4_out [1] $end
$var wire 1 N< rightRotate4_out [0] $end
$var wire 1 O< rightRotate2 [15] $end
$var wire 1 P< rightRotate2 [14] $end
$var wire 1 Q< rightRotate2 [13] $end
$var wire 1 R< rightRotate2 [12] $end
$var wire 1 S< rightRotate2 [11] $end
$var wire 1 T< rightRotate2 [10] $end
$var wire 1 U< rightRotate2 [9] $end
$var wire 1 V< rightRotate2 [8] $end
$var wire 1 W< rightRotate2 [7] $end
$var wire 1 X< rightRotate2 [6] $end
$var wire 1 Y< rightRotate2 [5] $end
$var wire 1 Z< rightRotate2 [4] $end
$var wire 1 [< rightRotate2 [3] $end
$var wire 1 \< rightRotate2 [2] $end
$var wire 1 ]< rightRotate2 [1] $end
$var wire 1 ^< rightRotate2 [0] $end
$var wire 1 _< rightRotate2_out [15] $end
$var wire 1 `< rightRotate2_out [14] $end
$var wire 1 a< rightRotate2_out [13] $end
$var wire 1 b< rightRotate2_out [12] $end
$var wire 1 c< rightRotate2_out [11] $end
$var wire 1 d< rightRotate2_out [10] $end
$var wire 1 e< rightRotate2_out [9] $end
$var wire 1 f< rightRotate2_out [8] $end
$var wire 1 g< rightRotate2_out [7] $end
$var wire 1 h< rightRotate2_out [6] $end
$var wire 1 i< rightRotate2_out [5] $end
$var wire 1 j< rightRotate2_out [4] $end
$var wire 1 k< rightRotate2_out [3] $end
$var wire 1 l< rightRotate2_out [2] $end
$var wire 1 m< rightRotate2_out [1] $end
$var wire 1 n< rightRotate2_out [0] $end
$var wire 1 o< rightRotate1 [15] $end
$var wire 1 p< rightRotate1 [14] $end
$var wire 1 q< rightRotate1 [13] $end
$var wire 1 r< rightRotate1 [12] $end
$var wire 1 s< rightRotate1 [11] $end
$var wire 1 t< rightRotate1 [10] $end
$var wire 1 u< rightRotate1 [9] $end
$var wire 1 v< rightRotate1 [8] $end
$var wire 1 w< rightRotate1 [7] $end
$var wire 1 x< rightRotate1 [6] $end
$var wire 1 y< rightRotate1 [5] $end
$var wire 1 z< rightRotate1 [4] $end
$var wire 1 {< rightRotate1 [3] $end
$var wire 1 |< rightRotate1 [2] $end
$var wire 1 }< rightRotate1 [1] $end
$var wire 1 ~< rightRotate1 [0] $end

$scope module rotate8_mux $end
$var parameter 32 != NUM_BITS $end
$var wire 1 a. InA [15] $end
$var wire 1 b. InA [14] $end
$var wire 1 c. InA [13] $end
$var wire 1 d. InA [12] $end
$var wire 1 e. InA [11] $end
$var wire 1 f. InA [10] $end
$var wire 1 g. InA [9] $end
$var wire 1 h. InA [8] $end
$var wire 1 i. InA [7] $end
$var wire 1 j. InA [6] $end
$var wire 1 k. InA [5] $end
$var wire 1 l. InA [4] $end
$var wire 1 m. InA [3] $end
$var wire 1 n. InA [2] $end
$var wire 1 o. InA [1] $end
$var wire 1 p. InA [0] $end
$var wire 1 m; InB [15] $end
$var wire 1 n; InB [14] $end
$var wire 1 o; InB [13] $end
$var wire 1 p; InB [12] $end
$var wire 1 q; InB [11] $end
$var wire 1 r; InB [10] $end
$var wire 1 s; InB [9] $end
$var wire 1 t; InB [8] $end
$var wire 1 u; InB [7] $end
$var wire 1 v; InB [6] $end
$var wire 1 w; InB [5] $end
$var wire 1 x; InB [4] $end
$var wire 1 y; InB [3] $end
$var wire 1 z; InB [2] $end
$var wire 1 {; InB [1] $end
$var wire 1 |; InB [0] $end
$var wire 1 P5 S $end
$var wire 1 }; Out [15] $end
$var wire 1 ~; Out [14] $end
$var wire 1 !< Out [13] $end
$var wire 1 "< Out [12] $end
$var wire 1 #< Out [11] $end
$var wire 1 $< Out [10] $end
$var wire 1 %< Out [9] $end
$var wire 1 &< Out [8] $end
$var wire 1 '< Out [7] $end
$var wire 1 (< Out [6] $end
$var wire 1 )< Out [5] $end
$var wire 1 *< Out [4] $end
$var wire 1 +< Out [3] $end
$var wire 1 ,< Out [2] $end
$var wire 1 -< Out [1] $end
$var wire 1 .< Out [0] $end
$upscope $end

$scope module rotate4_mux $end
$var parameter 32 "= NUM_BITS $end
$var wire 1 }; InA [15] $end
$var wire 1 ~; InA [14] $end
$var wire 1 !< InA [13] $end
$var wire 1 "< InA [12] $end
$var wire 1 #< InA [11] $end
$var wire 1 $< InA [10] $end
$var wire 1 %< InA [9] $end
$var wire 1 &< InA [8] $end
$var wire 1 '< InA [7] $end
$var wire 1 (< InA [6] $end
$var wire 1 )< InA [5] $end
$var wire 1 *< InA [4] $end
$var wire 1 +< InA [3] $end
$var wire 1 ,< InA [2] $end
$var wire 1 -< InA [1] $end
$var wire 1 .< InA [0] $end
$var wire 1 /< InB [15] $end
$var wire 1 0< InB [14] $end
$var wire 1 1< InB [13] $end
$var wire 1 2< InB [12] $end
$var wire 1 3< InB [11] $end
$var wire 1 4< InB [10] $end
$var wire 1 5< InB [9] $end
$var wire 1 6< InB [8] $end
$var wire 1 7< InB [7] $end
$var wire 1 8< InB [6] $end
$var wire 1 9< InB [5] $end
$var wire 1 :< InB [4] $end
$var wire 1 ;< InB [3] $end
$var wire 1 << InB [2] $end
$var wire 1 =< InB [1] $end
$var wire 1 >< InB [0] $end
$var wire 1 Q5 S $end
$var wire 1 ?< Out [15] $end
$var wire 1 @< Out [14] $end
$var wire 1 A< Out [13] $end
$var wire 1 B< Out [12] $end
$var wire 1 C< Out [11] $end
$var wire 1 D< Out [10] $end
$var wire 1 E< Out [9] $end
$var wire 1 F< Out [8] $end
$var wire 1 G< Out [7] $end
$var wire 1 H< Out [6] $end
$var wire 1 I< Out [5] $end
$var wire 1 J< Out [4] $end
$var wire 1 K< Out [3] $end
$var wire 1 L< Out [2] $end
$var wire 1 M< Out [1] $end
$var wire 1 N< Out [0] $end
$upscope $end

$scope module rotate2_mux $end
$var parameter 32 #= NUM_BITS $end
$var wire 1 ?< InA [15] $end
$var wire 1 @< InA [14] $end
$var wire 1 A< InA [13] $end
$var wire 1 B< InA [12] $end
$var wire 1 C< InA [11] $end
$var wire 1 D< InA [10] $end
$var wire 1 E< InA [9] $end
$var wire 1 F< InA [8] $end
$var wire 1 G< InA [7] $end
$var wire 1 H< InA [6] $end
$var wire 1 I< InA [5] $end
$var wire 1 J< InA [4] $end
$var wire 1 K< InA [3] $end
$var wire 1 L< InA [2] $end
$var wire 1 M< InA [1] $end
$var wire 1 N< InA [0] $end
$var wire 1 O< InB [15] $end
$var wire 1 P< InB [14] $end
$var wire 1 Q< InB [13] $end
$var wire 1 R< InB [12] $end
$var wire 1 S< InB [11] $end
$var wire 1 T< InB [10] $end
$var wire 1 U< InB [9] $end
$var wire 1 V< InB [8] $end
$var wire 1 W< InB [7] $end
$var wire 1 X< InB [6] $end
$var wire 1 Y< InB [5] $end
$var wire 1 Z< InB [4] $end
$var wire 1 [< InB [3] $end
$var wire 1 \< InB [2] $end
$var wire 1 ]< InB [1] $end
$var wire 1 ^< InB [0] $end
$var wire 1 R5 S $end
$var wire 1 _< Out [15] $end
$var wire 1 `< Out [14] $end
$var wire 1 a< Out [13] $end
$var wire 1 b< Out [12] $end
$var wire 1 c< Out [11] $end
$var wire 1 d< Out [10] $end
$var wire 1 e< Out [9] $end
$var wire 1 f< Out [8] $end
$var wire 1 g< Out [7] $end
$var wire 1 h< Out [6] $end
$var wire 1 i< Out [5] $end
$var wire 1 j< Out [4] $end
$var wire 1 k< Out [3] $end
$var wire 1 l< Out [2] $end
$var wire 1 m< Out [1] $end
$var wire 1 n< Out [0] $end
$upscope $end

$scope module rotate1_mux $end
$var parameter 32 $= NUM_BITS $end
$var wire 1 _< InA [15] $end
$var wire 1 `< InA [14] $end
$var wire 1 a< InA [13] $end
$var wire 1 b< InA [12] $end
$var wire 1 c< InA [11] $end
$var wire 1 d< InA [10] $end
$var wire 1 e< InA [9] $end
$var wire 1 f< InA [8] $end
$var wire 1 g< InA [7] $end
$var wire 1 h< InA [6] $end
$var wire 1 i< InA [5] $end
$var wire 1 j< InA [4] $end
$var wire 1 k< InA [3] $end
$var wire 1 l< InA [2] $end
$var wire 1 m< InA [1] $end
$var wire 1 n< InA [0] $end
$var wire 1 o< InB [15] $end
$var wire 1 p< InB [14] $end
$var wire 1 q< InB [13] $end
$var wire 1 r< InB [12] $end
$var wire 1 s< InB [11] $end
$var wire 1 t< InB [10] $end
$var wire 1 u< InB [9] $end
$var wire 1 v< InB [8] $end
$var wire 1 w< InB [7] $end
$var wire 1 x< InB [6] $end
$var wire 1 y< InB [5] $end
$var wire 1 z< InB [4] $end
$var wire 1 {< InB [3] $end
$var wire 1 |< InB [2] $end
$var wire 1 }< InB [1] $end
$var wire 1 ~< InB [0] $end
$var wire 1 S5 S $end
$var wire 1 l8 Out [15] $end
$var wire 1 m8 Out [14] $end
$var wire 1 n8 Out [13] $end
$var wire 1 o8 Out [12] $end
$var wire 1 p8 Out [11] $end
$var wire 1 q8 Out [10] $end
$var wire 1 r8 Out [9] $end
$var wire 1 s8 Out [8] $end
$var wire 1 t8 Out [7] $end
$var wire 1 u8 Out [6] $end
$var wire 1 v8 Out [5] $end
$var wire 1 w8 Out [4] $end
$var wire 1 x8 Out [3] $end
$var wire 1 y8 Out [2] $end
$var wire 1 z8 Out [1] $end
$var wire 1 {8 Out [0] $end
$upscope $end
$upscope $end

$scope module ls1 $end
$var parameter 32 %= N $end
$var parameter 32 &= C $end
$var wire 1 a. In [15] $end
$var wire 1 b. In [14] $end
$var wire 1 c. In [13] $end
$var wire 1 d. In [12] $end
$var wire 1 e. In [11] $end
$var wire 1 f. In [10] $end
$var wire 1 g. In [9] $end
$var wire 1 h. In [8] $end
$var wire 1 i. In [7] $end
$var wire 1 j. In [6] $end
$var wire 1 k. In [5] $end
$var wire 1 l. In [4] $end
$var wire 1 m. In [3] $end
$var wire 1 n. In [2] $end
$var wire 1 o. In [1] $end
$var wire 1 p. In [0] $end
$var wire 1 P5 Cnt [3] $end
$var wire 1 Q5 Cnt [2] $end
$var wire 1 R5 Cnt [1] $end
$var wire 1 S5 Cnt [0] $end
$var wire 1 |8 Out [15] $end
$var wire 1 }8 Out [14] $end
$var wire 1 ~8 Out [13] $end
$var wire 1 !9 Out [12] $end
$var wire 1 "9 Out [11] $end
$var wire 1 #9 Out [10] $end
$var wire 1 $9 Out [9] $end
$var wire 1 %9 Out [8] $end
$var wire 1 &9 Out [7] $end
$var wire 1 '9 Out [6] $end
$var wire 1 (9 Out [5] $end
$var wire 1 )9 Out [4] $end
$var wire 1 *9 Out [3] $end
$var wire 1 +9 Out [2] $end
$var wire 1 ,9 Out [1] $end
$var wire 1 -9 Out [0] $end
$var wire 1 '= leftShift8 [15] $end
$var wire 1 (= leftShift8 [14] $end
$var wire 1 )= leftShift8 [13] $end
$var wire 1 *= leftShift8 [12] $end
$var wire 1 += leftShift8 [11] $end
$var wire 1 ,= leftShift8 [10] $end
$var wire 1 -= leftShift8 [9] $end
$var wire 1 .= leftShift8 [8] $end
$var wire 1 /= leftShift8 [7] $end
$var wire 1 0= leftShift8 [6] $end
$var wire 1 1= leftShift8 [5] $end
$var wire 1 2= leftShift8 [4] $end
$var wire 1 3= leftShift8 [3] $end
$var wire 1 4= leftShift8 [2] $end
$var wire 1 5= leftShift8 [1] $end
$var wire 1 6= leftShift8 [0] $end
$var wire 1 7= leftShift8_out [15] $end
$var wire 1 8= leftShift8_out [14] $end
$var wire 1 9= leftShift8_out [13] $end
$var wire 1 := leftShift8_out [12] $end
$var wire 1 ;= leftShift8_out [11] $end
$var wire 1 <= leftShift8_out [10] $end
$var wire 1 == leftShift8_out [9] $end
$var wire 1 >= leftShift8_out [8] $end
$var wire 1 ?= leftShift8_out [7] $end
$var wire 1 @= leftShift8_out [6] $end
$var wire 1 A= leftShift8_out [5] $end
$var wire 1 B= leftShift8_out [4] $end
$var wire 1 C= leftShift8_out [3] $end
$var wire 1 D= leftShift8_out [2] $end
$var wire 1 E= leftShift8_out [1] $end
$var wire 1 F= leftShift8_out [0] $end
$var wire 1 G= leftShift4 [15] $end
$var wire 1 H= leftShift4 [14] $end
$var wire 1 I= leftShift4 [13] $end
$var wire 1 J= leftShift4 [12] $end
$var wire 1 K= leftShift4 [11] $end
$var wire 1 L= leftShift4 [10] $end
$var wire 1 M= leftShift4 [9] $end
$var wire 1 N= leftShift4 [8] $end
$var wire 1 O= leftShift4 [7] $end
$var wire 1 P= leftShift4 [6] $end
$var wire 1 Q= leftShift4 [5] $end
$var wire 1 R= leftShift4 [4] $end
$var wire 1 S= leftShift4 [3] $end
$var wire 1 T= leftShift4 [2] $end
$var wire 1 U= leftShift4 [1] $end
$var wire 1 V= leftShift4 [0] $end
$var wire 1 W= leftShift4_out [15] $end
$var wire 1 X= leftShift4_out [14] $end
$var wire 1 Y= leftShift4_out [13] $end
$var wire 1 Z= leftShift4_out [12] $end
$var wire 1 [= leftShift4_out [11] $end
$var wire 1 \= leftShift4_out [10] $end
$var wire 1 ]= leftShift4_out [9] $end
$var wire 1 ^= leftShift4_out [8] $end
$var wire 1 _= leftShift4_out [7] $end
$var wire 1 `= leftShift4_out [6] $end
$var wire 1 a= leftShift4_out [5] $end
$var wire 1 b= leftShift4_out [4] $end
$var wire 1 c= leftShift4_out [3] $end
$var wire 1 d= leftShift4_out [2] $end
$var wire 1 e= leftShift4_out [1] $end
$var wire 1 f= leftShift4_out [0] $end
$var wire 1 g= leftShift2 [15] $end
$var wire 1 h= leftShift2 [14] $end
$var wire 1 i= leftShift2 [13] $end
$var wire 1 j= leftShift2 [12] $end
$var wire 1 k= leftShift2 [11] $end
$var wire 1 l= leftShift2 [10] $end
$var wire 1 m= leftShift2 [9] $end
$var wire 1 n= leftShift2 [8] $end
$var wire 1 o= leftShift2 [7] $end
$var wire 1 p= leftShift2 [6] $end
$var wire 1 q= leftShift2 [5] $end
$var wire 1 r= leftShift2 [4] $end
$var wire 1 s= leftShift2 [3] $end
$var wire 1 t= leftShift2 [2] $end
$var wire 1 u= leftShift2 [1] $end
$var wire 1 v= leftShift2 [0] $end
$var wire 1 w= leftShift2_out [15] $end
$var wire 1 x= leftShift2_out [14] $end
$var wire 1 y= leftShift2_out [13] $end
$var wire 1 z= leftShift2_out [12] $end
$var wire 1 {= leftShift2_out [11] $end
$var wire 1 |= leftShift2_out [10] $end
$var wire 1 }= leftShift2_out [9] $end
$var wire 1 ~= leftShift2_out [8] $end
$var wire 1 !> leftShift2_out [7] $end
$var wire 1 "> leftShift2_out [6] $end
$var wire 1 #> leftShift2_out [5] $end
$var wire 1 $> leftShift2_out [4] $end
$var wire 1 %> leftShift2_out [3] $end
$var wire 1 &> leftShift2_out [2] $end
$var wire 1 '> leftShift2_out [1] $end
$var wire 1 (> leftShift2_out [0] $end
$var wire 1 )> leftShift1 [15] $end
$var wire 1 *> leftShift1 [14] $end
$var wire 1 +> leftShift1 [13] $end
$var wire 1 ,> leftShift1 [12] $end
$var wire 1 -> leftShift1 [11] $end
$var wire 1 .> leftShift1 [10] $end
$var wire 1 /> leftShift1 [9] $end
$var wire 1 0> leftShift1 [8] $end
$var wire 1 1> leftShift1 [7] $end
$var wire 1 2> leftShift1 [6] $end
$var wire 1 3> leftShift1 [5] $end
$var wire 1 4> leftShift1 [4] $end
$var wire 1 5> leftShift1 [3] $end
$var wire 1 6> leftShift1 [2] $end
$var wire 1 7> leftShift1 [1] $end
$var wire 1 8> leftShift1 [0] $end

$scope module shiftLeft8_mux $end
$var parameter 32 9> NUM_BITS $end
$var wire 1 a. InA [15] $end
$var wire 1 b. InA [14] $end
$var wire 1 c. InA [13] $end
$var wire 1 d. InA [12] $end
$var wire 1 e. InA [11] $end
$var wire 1 f. InA [10] $end
$var wire 1 g. InA [9] $end
$var wire 1 h. InA [8] $end
$var wire 1 i. InA [7] $end
$var wire 1 j. InA [6] $end
$var wire 1 k. InA [5] $end
$var wire 1 l. InA [4] $end
$var wire 1 m. InA [3] $end
$var wire 1 n. InA [2] $end
$var wire 1 o. InA [1] $end
$var wire 1 p. InA [0] $end
$var wire 1 '= InB [15] $end
$var wire 1 (= InB [14] $end
$var wire 1 )= InB [13] $end
$var wire 1 *= InB [12] $end
$var wire 1 += InB [11] $end
$var wire 1 ,= InB [10] $end
$var wire 1 -= InB [9] $end
$var wire 1 .= InB [8] $end
$var wire 1 /= InB [7] $end
$var wire 1 0= InB [6] $end
$var wire 1 1= InB [5] $end
$var wire 1 2= InB [4] $end
$var wire 1 3= InB [3] $end
$var wire 1 4= InB [2] $end
$var wire 1 5= InB [1] $end
$var wire 1 6= InB [0] $end
$var wire 1 P5 S $end
$var wire 1 7= Out [15] $end
$var wire 1 8= Out [14] $end
$var wire 1 9= Out [13] $end
$var wire 1 := Out [12] $end
$var wire 1 ;= Out [11] $end
$var wire 1 <= Out [10] $end
$var wire 1 == Out [9] $end
$var wire 1 >= Out [8] $end
$var wire 1 ?= Out [7] $end
$var wire 1 @= Out [6] $end
$var wire 1 A= Out [5] $end
$var wire 1 B= Out [4] $end
$var wire 1 C= Out [3] $end
$var wire 1 D= Out [2] $end
$var wire 1 E= Out [1] $end
$var wire 1 F= Out [0] $end
$upscope $end

$scope module shiftLeft4_mux $end
$var parameter 32 :> NUM_BITS $end
$var wire 1 7= InA [15] $end
$var wire 1 8= InA [14] $end
$var wire 1 9= InA [13] $end
$var wire 1 := InA [12] $end
$var wire 1 ;= InA [11] $end
$var wire 1 <= InA [10] $end
$var wire 1 == InA [9] $end
$var wire 1 >= InA [8] $end
$var wire 1 ?= InA [7] $end
$var wire 1 @= InA [6] $end
$var wire 1 A= InA [5] $end
$var wire 1 B= InA [4] $end
$var wire 1 C= InA [3] $end
$var wire 1 D= InA [2] $end
$var wire 1 E= InA [1] $end
$var wire 1 F= InA [0] $end
$var wire 1 G= InB [15] $end
$var wire 1 H= InB [14] $end
$var wire 1 I= InB [13] $end
$var wire 1 J= InB [12] $end
$var wire 1 K= InB [11] $end
$var wire 1 L= InB [10] $end
$var wire 1 M= InB [9] $end
$var wire 1 N= InB [8] $end
$var wire 1 O= InB [7] $end
$var wire 1 P= InB [6] $end
$var wire 1 Q= InB [5] $end
$var wire 1 R= InB [4] $end
$var wire 1 S= InB [3] $end
$var wire 1 T= InB [2] $end
$var wire 1 U= InB [1] $end
$var wire 1 V= InB [0] $end
$var wire 1 Q5 S $end
$var wire 1 W= Out [15] $end
$var wire 1 X= Out [14] $end
$var wire 1 Y= Out [13] $end
$var wire 1 Z= Out [12] $end
$var wire 1 [= Out [11] $end
$var wire 1 \= Out [10] $end
$var wire 1 ]= Out [9] $end
$var wire 1 ^= Out [8] $end
$var wire 1 _= Out [7] $end
$var wire 1 `= Out [6] $end
$var wire 1 a= Out [5] $end
$var wire 1 b= Out [4] $end
$var wire 1 c= Out [3] $end
$var wire 1 d= Out [2] $end
$var wire 1 e= Out [1] $end
$var wire 1 f= Out [0] $end
$upscope $end

$scope module shiftLeft2_mux $end
$var parameter 32 ;> NUM_BITS $end
$var wire 1 W= InA [15] $end
$var wire 1 X= InA [14] $end
$var wire 1 Y= InA [13] $end
$var wire 1 Z= InA [12] $end
$var wire 1 [= InA [11] $end
$var wire 1 \= InA [10] $end
$var wire 1 ]= InA [9] $end
$var wire 1 ^= InA [8] $end
$var wire 1 _= InA [7] $end
$var wire 1 `= InA [6] $end
$var wire 1 a= InA [5] $end
$var wire 1 b= InA [4] $end
$var wire 1 c= InA [3] $end
$var wire 1 d= InA [2] $end
$var wire 1 e= InA [1] $end
$var wire 1 f= InA [0] $end
$var wire 1 g= InB [15] $end
$var wire 1 h= InB [14] $end
$var wire 1 i= InB [13] $end
$var wire 1 j= InB [12] $end
$var wire 1 k= InB [11] $end
$var wire 1 l= InB [10] $end
$var wire 1 m= InB [9] $end
$var wire 1 n= InB [8] $end
$var wire 1 o= InB [7] $end
$var wire 1 p= InB [6] $end
$var wire 1 q= InB [5] $end
$var wire 1 r= InB [4] $end
$var wire 1 s= InB [3] $end
$var wire 1 t= InB [2] $end
$var wire 1 u= InB [1] $end
$var wire 1 v= InB [0] $end
$var wire 1 R5 S $end
$var wire 1 w= Out [15] $end
$var wire 1 x= Out [14] $end
$var wire 1 y= Out [13] $end
$var wire 1 z= Out [12] $end
$var wire 1 {= Out [11] $end
$var wire 1 |= Out [10] $end
$var wire 1 }= Out [9] $end
$var wire 1 ~= Out [8] $end
$var wire 1 !> Out [7] $end
$var wire 1 "> Out [6] $end
$var wire 1 #> Out [5] $end
$var wire 1 $> Out [4] $end
$var wire 1 %> Out [3] $end
$var wire 1 &> Out [2] $end
$var wire 1 '> Out [1] $end
$var wire 1 (> Out [0] $end
$upscope $end

$scope module shiftLeft1_mux $end
$var parameter 32 <> NUM_BITS $end
$var wire 1 w= InA [15] $end
$var wire 1 x= InA [14] $end
$var wire 1 y= InA [13] $end
$var wire 1 z= InA [12] $end
$var wire 1 {= InA [11] $end
$var wire 1 |= InA [10] $end
$var wire 1 }= InA [9] $end
$var wire 1 ~= InA [8] $end
$var wire 1 !> InA [7] $end
$var wire 1 "> InA [6] $end
$var wire 1 #> InA [5] $end
$var wire 1 $> InA [4] $end
$var wire 1 %> InA [3] $end
$var wire 1 &> InA [2] $end
$var wire 1 '> InA [1] $end
$var wire 1 (> InA [0] $end
$var wire 1 )> InB [15] $end
$var wire 1 *> InB [14] $end
$var wire 1 +> InB [13] $end
$var wire 1 ,> InB [12] $end
$var wire 1 -> InB [11] $end
$var wire 1 .> InB [10] $end
$var wire 1 /> InB [9] $end
$var wire 1 0> InB [8] $end
$var wire 1 1> InB [7] $end
$var wire 1 2> InB [6] $end
$var wire 1 3> InB [5] $end
$var wire 1 4> InB [4] $end
$var wire 1 5> InB [3] $end
$var wire 1 6> InB [2] $end
$var wire 1 7> InB [1] $end
$var wire 1 8> InB [0] $end
$var wire 1 S5 S $end
$var wire 1 |8 Out [15] $end
$var wire 1 }8 Out [14] $end
$var wire 1 ~8 Out [13] $end
$var wire 1 !9 Out [12] $end
$var wire 1 "9 Out [11] $end
$var wire 1 #9 Out [10] $end
$var wire 1 $9 Out [9] $end
$var wire 1 %9 Out [8] $end
$var wire 1 &9 Out [7] $end
$var wire 1 '9 Out [6] $end
$var wire 1 (9 Out [5] $end
$var wire 1 )9 Out [4] $end
$var wire 1 *9 Out [3] $end
$var wire 1 +9 Out [2] $end
$var wire 1 ,9 Out [1] $end
$var wire 1 -9 Out [0] $end
$upscope $end
$upscope $end

$scope module rs1 $end
$var parameter 32 => N $end
$var parameter 32 >> C $end
$var wire 1 a. In [15] $end
$var wire 1 b. In [14] $end
$var wire 1 c. In [13] $end
$var wire 1 d. In [12] $end
$var wire 1 e. In [11] $end
$var wire 1 f. In [10] $end
$var wire 1 g. In [9] $end
$var wire 1 h. In [8] $end
$var wire 1 i. In [7] $end
$var wire 1 j. In [6] $end
$var wire 1 k. In [5] $end
$var wire 1 l. In [4] $end
$var wire 1 m. In [3] $end
$var wire 1 n. In [2] $end
$var wire 1 o. In [1] $end
$var wire 1 p. In [0] $end
$var wire 1 P5 Cnt [3] $end
$var wire 1 Q5 Cnt [2] $end
$var wire 1 R5 Cnt [1] $end
$var wire 1 S5 Cnt [0] $end
$var wire 1 .9 Out [15] $end
$var wire 1 /9 Out [14] $end
$var wire 1 09 Out [13] $end
$var wire 1 19 Out [12] $end
$var wire 1 29 Out [11] $end
$var wire 1 39 Out [10] $end
$var wire 1 49 Out [9] $end
$var wire 1 59 Out [8] $end
$var wire 1 69 Out [7] $end
$var wire 1 79 Out [6] $end
$var wire 1 89 Out [5] $end
$var wire 1 99 Out [4] $end
$var wire 1 :9 Out [3] $end
$var wire 1 ;9 Out [2] $end
$var wire 1 <9 Out [1] $end
$var wire 1 =9 Out [0] $end
$var wire 1 ?> rightShift8 [15] $end
$var wire 1 @> rightShift8 [14] $end
$var wire 1 A> rightShift8 [13] $end
$var wire 1 B> rightShift8 [12] $end
$var wire 1 C> rightShift8 [11] $end
$var wire 1 D> rightShift8 [10] $end
$var wire 1 E> rightShift8 [9] $end
$var wire 1 F> rightShift8 [8] $end
$var wire 1 G> rightShift8 [7] $end
$var wire 1 H> rightShift8 [6] $end
$var wire 1 I> rightShift8 [5] $end
$var wire 1 J> rightShift8 [4] $end
$var wire 1 K> rightShift8 [3] $end
$var wire 1 L> rightShift8 [2] $end
$var wire 1 M> rightShift8 [1] $end
$var wire 1 N> rightShift8 [0] $end
$var wire 1 O> rightShift8_out [15] $end
$var wire 1 P> rightShift8_out [14] $end
$var wire 1 Q> rightShift8_out [13] $end
$var wire 1 R> rightShift8_out [12] $end
$var wire 1 S> rightShift8_out [11] $end
$var wire 1 T> rightShift8_out [10] $end
$var wire 1 U> rightShift8_out [9] $end
$var wire 1 V> rightShift8_out [8] $end
$var wire 1 W> rightShift8_out [7] $end
$var wire 1 X> rightShift8_out [6] $end
$var wire 1 Y> rightShift8_out [5] $end
$var wire 1 Z> rightShift8_out [4] $end
$var wire 1 [> rightShift8_out [3] $end
$var wire 1 \> rightShift8_out [2] $end
$var wire 1 ]> rightShift8_out [1] $end
$var wire 1 ^> rightShift8_out [0] $end
$var wire 1 _> rightShift4 [15] $end
$var wire 1 `> rightShift4 [14] $end
$var wire 1 a> rightShift4 [13] $end
$var wire 1 b> rightShift4 [12] $end
$var wire 1 c> rightShift4 [11] $end
$var wire 1 d> rightShift4 [10] $end
$var wire 1 e> rightShift4 [9] $end
$var wire 1 f> rightShift4 [8] $end
$var wire 1 g> rightShift4 [7] $end
$var wire 1 h> rightShift4 [6] $end
$var wire 1 i> rightShift4 [5] $end
$var wire 1 j> rightShift4 [4] $end
$var wire 1 k> rightShift4 [3] $end
$var wire 1 l> rightShift4 [2] $end
$var wire 1 m> rightShift4 [1] $end
$var wire 1 n> rightShift4 [0] $end
$var wire 1 o> rightShift4_out [15] $end
$var wire 1 p> rightShift4_out [14] $end
$var wire 1 q> rightShift4_out [13] $end
$var wire 1 r> rightShift4_out [12] $end
$var wire 1 s> rightShift4_out [11] $end
$var wire 1 t> rightShift4_out [10] $end
$var wire 1 u> rightShift4_out [9] $end
$var wire 1 v> rightShift4_out [8] $end
$var wire 1 w> rightShift4_out [7] $end
$var wire 1 x> rightShift4_out [6] $end
$var wire 1 y> rightShift4_out [5] $end
$var wire 1 z> rightShift4_out [4] $end
$var wire 1 {> rightShift4_out [3] $end
$var wire 1 |> rightShift4_out [2] $end
$var wire 1 }> rightShift4_out [1] $end
$var wire 1 ~> rightShift4_out [0] $end
$var wire 1 !? rightShift2 [15] $end
$var wire 1 "? rightShift2 [14] $end
$var wire 1 #? rightShift2 [13] $end
$var wire 1 $? rightShift2 [12] $end
$var wire 1 %? rightShift2 [11] $end
$var wire 1 &? rightShift2 [10] $end
$var wire 1 '? rightShift2 [9] $end
$var wire 1 (? rightShift2 [8] $end
$var wire 1 )? rightShift2 [7] $end
$var wire 1 *? rightShift2 [6] $end
$var wire 1 +? rightShift2 [5] $end
$var wire 1 ,? rightShift2 [4] $end
$var wire 1 -? rightShift2 [3] $end
$var wire 1 .? rightShift2 [2] $end
$var wire 1 /? rightShift2 [1] $end
$var wire 1 0? rightShift2 [0] $end
$var wire 1 1? rightShift2_out [15] $end
$var wire 1 2? rightShift2_out [14] $end
$var wire 1 3? rightShift2_out [13] $end
$var wire 1 4? rightShift2_out [12] $end
$var wire 1 5? rightShift2_out [11] $end
$var wire 1 6? rightShift2_out [10] $end
$var wire 1 7? rightShift2_out [9] $end
$var wire 1 8? rightShift2_out [8] $end
$var wire 1 9? rightShift2_out [7] $end
$var wire 1 :? rightShift2_out [6] $end
$var wire 1 ;? rightShift2_out [5] $end
$var wire 1 <? rightShift2_out [4] $end
$var wire 1 =? rightShift2_out [3] $end
$var wire 1 >? rightShift2_out [2] $end
$var wire 1 ?? rightShift2_out [1] $end
$var wire 1 @? rightShift2_out [0] $end
$var wire 1 A? rightShift1 [15] $end
$var wire 1 B? rightShift1 [14] $end
$var wire 1 C? rightShift1 [13] $end
$var wire 1 D? rightShift1 [12] $end
$var wire 1 E? rightShift1 [11] $end
$var wire 1 F? rightShift1 [10] $end
$var wire 1 G? rightShift1 [9] $end
$var wire 1 H? rightShift1 [8] $end
$var wire 1 I? rightShift1 [7] $end
$var wire 1 J? rightShift1 [6] $end
$var wire 1 K? rightShift1 [5] $end
$var wire 1 L? rightShift1 [4] $end
$var wire 1 M? rightShift1 [3] $end
$var wire 1 N? rightShift1 [2] $end
$var wire 1 O? rightShift1 [1] $end
$var wire 1 P? rightShift1 [0] $end

$scope module shiftright8_mux $end
$var parameter 32 Q? NUM_BITS $end
$var wire 1 a. InA [15] $end
$var wire 1 b. InA [14] $end
$var wire 1 c. InA [13] $end
$var wire 1 d. InA [12] $end
$var wire 1 e. InA [11] $end
$var wire 1 f. InA [10] $end
$var wire 1 g. InA [9] $end
$var wire 1 h. InA [8] $end
$var wire 1 i. InA [7] $end
$var wire 1 j. InA [6] $end
$var wire 1 k. InA [5] $end
$var wire 1 l. InA [4] $end
$var wire 1 m. InA [3] $end
$var wire 1 n. InA [2] $end
$var wire 1 o. InA [1] $end
$var wire 1 p. InA [0] $end
$var wire 1 ?> InB [15] $end
$var wire 1 @> InB [14] $end
$var wire 1 A> InB [13] $end
$var wire 1 B> InB [12] $end
$var wire 1 C> InB [11] $end
$var wire 1 D> InB [10] $end
$var wire 1 E> InB [9] $end
$var wire 1 F> InB [8] $end
$var wire 1 G> InB [7] $end
$var wire 1 H> InB [6] $end
$var wire 1 I> InB [5] $end
$var wire 1 J> InB [4] $end
$var wire 1 K> InB [3] $end
$var wire 1 L> InB [2] $end
$var wire 1 M> InB [1] $end
$var wire 1 N> InB [0] $end
$var wire 1 P5 S $end
$var wire 1 O> Out [15] $end
$var wire 1 P> Out [14] $end
$var wire 1 Q> Out [13] $end
$var wire 1 R> Out [12] $end
$var wire 1 S> Out [11] $end
$var wire 1 T> Out [10] $end
$var wire 1 U> Out [9] $end
$var wire 1 V> Out [8] $end
$var wire 1 W> Out [7] $end
$var wire 1 X> Out [6] $end
$var wire 1 Y> Out [5] $end
$var wire 1 Z> Out [4] $end
$var wire 1 [> Out [3] $end
$var wire 1 \> Out [2] $end
$var wire 1 ]> Out [1] $end
$var wire 1 ^> Out [0] $end
$upscope $end

$scope module shiftright4_mux $end
$var parameter 32 R? NUM_BITS $end
$var wire 1 O> InA [15] $end
$var wire 1 P> InA [14] $end
$var wire 1 Q> InA [13] $end
$var wire 1 R> InA [12] $end
$var wire 1 S> InA [11] $end
$var wire 1 T> InA [10] $end
$var wire 1 U> InA [9] $end
$var wire 1 V> InA [8] $end
$var wire 1 W> InA [7] $end
$var wire 1 X> InA [6] $end
$var wire 1 Y> InA [5] $end
$var wire 1 Z> InA [4] $end
$var wire 1 [> InA [3] $end
$var wire 1 \> InA [2] $end
$var wire 1 ]> InA [1] $end
$var wire 1 ^> InA [0] $end
$var wire 1 _> InB [15] $end
$var wire 1 `> InB [14] $end
$var wire 1 a> InB [13] $end
$var wire 1 b> InB [12] $end
$var wire 1 c> InB [11] $end
$var wire 1 d> InB [10] $end
$var wire 1 e> InB [9] $end
$var wire 1 f> InB [8] $end
$var wire 1 g> InB [7] $end
$var wire 1 h> InB [6] $end
$var wire 1 i> InB [5] $end
$var wire 1 j> InB [4] $end
$var wire 1 k> InB [3] $end
$var wire 1 l> InB [2] $end
$var wire 1 m> InB [1] $end
$var wire 1 n> InB [0] $end
$var wire 1 Q5 S $end
$var wire 1 o> Out [15] $end
$var wire 1 p> Out [14] $end
$var wire 1 q> Out [13] $end
$var wire 1 r> Out [12] $end
$var wire 1 s> Out [11] $end
$var wire 1 t> Out [10] $end
$var wire 1 u> Out [9] $end
$var wire 1 v> Out [8] $end
$var wire 1 w> Out [7] $end
$var wire 1 x> Out [6] $end
$var wire 1 y> Out [5] $end
$var wire 1 z> Out [4] $end
$var wire 1 {> Out [3] $end
$var wire 1 |> Out [2] $end
$var wire 1 }> Out [1] $end
$var wire 1 ~> Out [0] $end
$upscope $end

$scope module shiftright2_mux $end
$var parameter 32 S? NUM_BITS $end
$var wire 1 o> InA [15] $end
$var wire 1 p> InA [14] $end
$var wire 1 q> InA [13] $end
$var wire 1 r> InA [12] $end
$var wire 1 s> InA [11] $end
$var wire 1 t> InA [10] $end
$var wire 1 u> InA [9] $end
$var wire 1 v> InA [8] $end
$var wire 1 w> InA [7] $end
$var wire 1 x> InA [6] $end
$var wire 1 y> InA [5] $end
$var wire 1 z> InA [4] $end
$var wire 1 {> InA [3] $end
$var wire 1 |> InA [2] $end
$var wire 1 }> InA [1] $end
$var wire 1 ~> InA [0] $end
$var wire 1 !? InB [15] $end
$var wire 1 "? InB [14] $end
$var wire 1 #? InB [13] $end
$var wire 1 $? InB [12] $end
$var wire 1 %? InB [11] $end
$var wire 1 &? InB [10] $end
$var wire 1 '? InB [9] $end
$var wire 1 (? InB [8] $end
$var wire 1 )? InB [7] $end
$var wire 1 *? InB [6] $end
$var wire 1 +? InB [5] $end
$var wire 1 ,? InB [4] $end
$var wire 1 -? InB [3] $end
$var wire 1 .? InB [2] $end
$var wire 1 /? InB [1] $end
$var wire 1 0? InB [0] $end
$var wire 1 R5 S $end
$var wire 1 1? Out [15] $end
$var wire 1 2? Out [14] $end
$var wire 1 3? Out [13] $end
$var wire 1 4? Out [12] $end
$var wire 1 5? Out [11] $end
$var wire 1 6? Out [10] $end
$var wire 1 7? Out [9] $end
$var wire 1 8? Out [8] $end
$var wire 1 9? Out [7] $end
$var wire 1 :? Out [6] $end
$var wire 1 ;? Out [5] $end
$var wire 1 <? Out [4] $end
$var wire 1 =? Out [3] $end
$var wire 1 >? Out [2] $end
$var wire 1 ?? Out [1] $end
$var wire 1 @? Out [0] $end
$upscope $end

$scope module shiftright1_mux $end
$var parameter 32 T? NUM_BITS $end
$var wire 1 1? InA [15] $end
$var wire 1 2? InA [14] $end
$var wire 1 3? InA [13] $end
$var wire 1 4? InA [12] $end
$var wire 1 5? InA [11] $end
$var wire 1 6? InA [10] $end
$var wire 1 7? InA [9] $end
$var wire 1 8? InA [8] $end
$var wire 1 9? InA [7] $end
$var wire 1 :? InA [6] $end
$var wire 1 ;? InA [5] $end
$var wire 1 <? InA [4] $end
$var wire 1 =? InA [3] $end
$var wire 1 >? InA [2] $end
$var wire 1 ?? InA [1] $end
$var wire 1 @? InA [0] $end
$var wire 1 A? InB [15] $end
$var wire 1 B? InB [14] $end
$var wire 1 C? InB [13] $end
$var wire 1 D? InB [12] $end
$var wire 1 E? InB [11] $end
$var wire 1 F? InB [10] $end
$var wire 1 G? InB [9] $end
$var wire 1 H? InB [8] $end
$var wire 1 I? InB [7] $end
$var wire 1 J? InB [6] $end
$var wire 1 K? InB [5] $end
$var wire 1 L? InB [4] $end
$var wire 1 M? InB [3] $end
$var wire 1 N? InB [2] $end
$var wire 1 O? InB [1] $end
$var wire 1 P? InB [0] $end
$var wire 1 S5 S $end
$var wire 1 .9 Out [15] $end
$var wire 1 /9 Out [14] $end
$var wire 1 09 Out [13] $end
$var wire 1 19 Out [12] $end
$var wire 1 29 Out [11] $end
$var wire 1 39 Out [10] $end
$var wire 1 49 Out [9] $end
$var wire 1 59 Out [8] $end
$var wire 1 69 Out [7] $end
$var wire 1 79 Out [6] $end
$var wire 1 89 Out [5] $end
$var wire 1 99 Out [4] $end
$var wire 1 :9 Out [3] $end
$var wire 1 ;9 Out [2] $end
$var wire 1 <9 Out [1] $end
$var wire 1 =9 Out [0] $end
$upscope $end
$upscope $end

$scope module btr $end
$var wire 1 a. In [15] $end
$var wire 1 b. In [14] $end
$var wire 1 c. In [13] $end
$var wire 1 d. In [12] $end
$var wire 1 e. In [11] $end
$var wire 1 f. In [10] $end
$var wire 1 g. In [9] $end
$var wire 1 h. In [8] $end
$var wire 1 i. In [7] $end
$var wire 1 j. In [6] $end
$var wire 1 k. In [5] $end
$var wire 1 l. In [4] $end
$var wire 1 m. In [3] $end
$var wire 1 n. In [2] $end
$var wire 1 o. In [1] $end
$var wire 1 p. In [0] $end
$var wire 1 >9 Out [15] $end
$var wire 1 ?9 Out [14] $end
$var wire 1 @9 Out [13] $end
$var wire 1 A9 Out [12] $end
$var wire 1 B9 Out [11] $end
$var wire 1 C9 Out [10] $end
$var wire 1 D9 Out [9] $end
$var wire 1 E9 Out [8] $end
$var wire 1 F9 Out [7] $end
$var wire 1 G9 Out [6] $end
$var wire 1 H9 Out [5] $end
$var wire 1 I9 Out [4] $end
$var wire 1 J9 Out [3] $end
$var wire 1 K9 Out [2] $end
$var wire 1 L9 Out [1] $end
$var wire 1 M9 Out [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module EX_MEM_Stage $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var wire 1 F. RegWrite_in $end
$var wire 1 50 DMemWrite_in $end
$var wire 1 60 DMemEn_in $end
$var wire 1 70 MemToReg_in $end
$var wire 1 90 DMemDump_in $end
$var wire 1 80 Branching_in $end
$var wire 1 /# Jump_in $end
$var wire 1 0# branchingPCEnable_in $end
$var wire 1 C0 BranchingOrJumping_in $end
$var wire 1 E0 ReadingRs_in $end
$var wire 1 D0 ReadingRt_in $end
$var wire 1 -" aluOutput_in [15] $end
$var wire 1 ." aluOutput_in [14] $end
$var wire 1 /" aluOutput_in [13] $end
$var wire 1 0" aluOutput_in [12] $end
$var wire 1 1" aluOutput_in [11] $end
$var wire 1 2" aluOutput_in [10] $end
$var wire 1 3" aluOutput_in [9] $end
$var wire 1 4" aluOutput_in [8] $end
$var wire 1 5" aluOutput_in [7] $end
$var wire 1 6" aluOutput_in [6] $end
$var wire 1 7" aluOutput_in [5] $end
$var wire 1 8" aluOutput_in [4] $end
$var wire 1 9" aluOutput_in [3] $end
$var wire 1 :" aluOutput_in [2] $end
$var wire 1 ;" aluOutput_in [1] $end
$var wire 1 <" aluOutput_in [0] $end
$var wire 1 q. B_in [15] $end
$var wire 1 r. B_in [14] $end
$var wire 1 s. B_in [13] $end
$var wire 1 t. B_in [12] $end
$var wire 1 u. B_in [11] $end
$var wire 1 v. B_in [10] $end
$var wire 1 w. B_in [9] $end
$var wire 1 x. B_in [8] $end
$var wire 1 y. B_in [7] $end
$var wire 1 z. B_in [6] $end
$var wire 1 {. B_in [5] $end
$var wire 1 |. B_in [4] $end
$var wire 1 }. B_in [3] $end
$var wire 1 ~. B_in [2] $end
$var wire 1 !/ B_in [1] $end
$var wire 1 "/ B_in [0] $end
$var wire 1 ;! updatedPC_in [15] $end
$var wire 1 <! updatedPC_in [14] $end
$var wire 1 =! updatedPC_in [13] $end
$var wire 1 >! updatedPC_in [12] $end
$var wire 1 ?! updatedPC_in [11] $end
$var wire 1 @! updatedPC_in [10] $end
$var wire 1 A! updatedPC_in [9] $end
$var wire 1 B! updatedPC_in [8] $end
$var wire 1 C! updatedPC_in [7] $end
$var wire 1 D! updatedPC_in [6] $end
$var wire 1 E! updatedPC_in [5] $end
$var wire 1 F! updatedPC_in [4] $end
$var wire 1 G! updatedPC_in [3] $end
$var wire 1 H! updatedPC_in [2] $end
$var wire 1 I! updatedPC_in [1] $end
$var wire 1 J! updatedPC_in [0] $end
$var wire 1 Q. nextPC_in [15] $end
$var wire 1 R. nextPC_in [14] $end
$var wire 1 S. nextPC_in [13] $end
$var wire 1 T. nextPC_in [12] $end
$var wire 1 U. nextPC_in [11] $end
$var wire 1 V. nextPC_in [10] $end
$var wire 1 W. nextPC_in [9] $end
$var wire 1 X. nextPC_in [8] $end
$var wire 1 Y. nextPC_in [7] $end
$var wire 1 Z. nextPC_in [6] $end
$var wire 1 [. nextPC_in [5] $end
$var wire 1 \. nextPC_in [4] $end
$var wire 1 ]. nextPC_in [3] $end
$var wire 1 ^. nextPC_in [2] $end
$var wire 1 _. nextPC_in [1] $end
$var wire 1 `. nextPC_in [0] $end
$var wire 1 }" WriteRegister_in [2] $end
$var wire 1 ~" WriteRegister_in [1] $end
$var wire 1 !# WriteRegister_in [0] $end
$var wire 1 "# WriteRegister_out [2] $end
$var wire 1 ## WriteRegister_out [1] $end
$var wire 1 $# WriteRegister_out [0] $end
$var wire 1 V? aluOutput_out [15] $end
$var wire 1 W? aluOutput_out [14] $end
$var wire 1 X? aluOutput_out [13] $end
$var wire 1 Y? aluOutput_out [12] $end
$var wire 1 Z? aluOutput_out [11] $end
$var wire 1 [? aluOutput_out [10] $end
$var wire 1 \? aluOutput_out [9] $end
$var wire 1 ]? aluOutput_out [8] $end
$var wire 1 ^? aluOutput_out [7] $end
$var wire 1 _? aluOutput_out [6] $end
$var wire 1 `? aluOutput_out [5] $end
$var wire 1 a? aluOutput_out [4] $end
$var wire 1 b? aluOutput_out [3] $end
$var wire 1 c? aluOutput_out [2] $end
$var wire 1 d? aluOutput_out [1] $end
$var wire 1 e? aluOutput_out [0] $end
$var wire 1 f? B_out [15] $end
$var wire 1 g? B_out [14] $end
$var wire 1 h? B_out [13] $end
$var wire 1 i? B_out [12] $end
$var wire 1 j? B_out [11] $end
$var wire 1 k? B_out [10] $end
$var wire 1 l? B_out [9] $end
$var wire 1 m? B_out [8] $end
$var wire 1 n? B_out [7] $end
$var wire 1 o? B_out [6] $end
$var wire 1 p? B_out [5] $end
$var wire 1 q? B_out [4] $end
$var wire 1 r? B_out [3] $end
$var wire 1 s? B_out [2] $end
$var wire 1 t? B_out [1] $end
$var wire 1 u? B_out [0] $end
$var wire 1 v? updatedPC_out [15] $end
$var wire 1 w? updatedPC_out [14] $end
$var wire 1 x? updatedPC_out [13] $end
$var wire 1 y? updatedPC_out [12] $end
$var wire 1 z? updatedPC_out [11] $end
$var wire 1 {? updatedPC_out [10] $end
$var wire 1 |? updatedPC_out [9] $end
$var wire 1 }? updatedPC_out [8] $end
$var wire 1 ~? updatedPC_out [7] $end
$var wire 1 !@ updatedPC_out [6] $end
$var wire 1 "@ updatedPC_out [5] $end
$var wire 1 #@ updatedPC_out [4] $end
$var wire 1 $@ updatedPC_out [3] $end
$var wire 1 %@ updatedPC_out [2] $end
$var wire 1 &@ updatedPC_out [1] $end
$var wire 1 '@ updatedPC_out [0] $end
$var wire 1 (@ nextPC_out [15] $end
$var wire 1 )@ nextPC_out [14] $end
$var wire 1 *@ nextPC_out [13] $end
$var wire 1 +@ nextPC_out [12] $end
$var wire 1 ,@ nextPC_out [11] $end
$var wire 1 -@ nextPC_out [10] $end
$var wire 1 .@ nextPC_out [9] $end
$var wire 1 /@ nextPC_out [8] $end
$var wire 1 0@ nextPC_out [7] $end
$var wire 1 1@ nextPC_out [6] $end
$var wire 1 2@ nextPC_out [5] $end
$var wire 1 3@ nextPC_out [4] $end
$var wire 1 4@ nextPC_out [3] $end
$var wire 1 5@ nextPC_out [2] $end
$var wire 1 6@ nextPC_out [1] $end
$var wire 1 7@ nextPC_out [0] $end
$var wire 1 G. RegWrite_out $end
$var wire 1 I. DMemWrite_out $end
$var wire 1 H. DMemEn_out $end
$var wire 1 8@ MemToReg_out $end
$var wire 1 9@ DMemDump_out $end
$var wire 1 :@ Branching_out $end
$var wire 1 ;@ Jump_out $end
$var wire 1 <@ branchingPCEnable_out $end
$var wire 1 =@ BranchingOrJumping_out $end
$var wire 1 >@ ReadingRs_out $end
$var wire 1 ?@ ReadingRt_out $end
$var wire 1 @@ NOP_or_regular $end

$scope module rf_EXMEM_aluOutput_out $end
$var wire 1 V? readData [15] $end
$var wire 1 W? readData [14] $end
$var wire 1 X? readData [13] $end
$var wire 1 Y? readData [12] $end
$var wire 1 Z? readData [11] $end
$var wire 1 [? readData [10] $end
$var wire 1 \? readData [9] $end
$var wire 1 ]? readData [8] $end
$var wire 1 ^? readData [7] $end
$var wire 1 _? readData [6] $end
$var wire 1 `? readData [5] $end
$var wire 1 a? readData [4] $end
$var wire 1 b? readData [3] $end
$var wire 1 c? readData [2] $end
$var wire 1 d? readData [1] $end
$var wire 1 e? readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? writeEnable $end
$var wire 1 -" writeData [15] $end
$var wire 1 ." writeData [14] $end
$var wire 1 /" writeData [13] $end
$var wire 1 0" writeData [12] $end
$var wire 1 1" writeData [11] $end
$var wire 1 2" writeData [10] $end
$var wire 1 3" writeData [9] $end
$var wire 1 4" writeData [8] $end
$var wire 1 5" writeData [7] $end
$var wire 1 6" writeData [6] $end
$var wire 1 7" writeData [5] $end
$var wire 1 8" writeData [4] $end
$var wire 1 9" writeData [3] $end
$var wire 1 :" writeData [2] $end
$var wire 1 ;" writeData [1] $end
$var wire 1 <" writeData [0] $end
$var wire 1 A@ in [15] $end
$var wire 1 B@ in [14] $end
$var wire 1 C@ in [13] $end
$var wire 1 D@ in [12] $end
$var wire 1 E@ in [11] $end
$var wire 1 F@ in [10] $end
$var wire 1 G@ in [9] $end
$var wire 1 H@ in [8] $end
$var wire 1 I@ in [7] $end
$var wire 1 J@ in [6] $end
$var wire 1 K@ in [5] $end
$var wire 1 L@ in [4] $end
$var wire 1 M@ in [3] $end
$var wire 1 N@ in [2] $end
$var wire 1 O@ in [1] $end
$var wire 1 P@ in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 V? q $end
$var wire 1 A@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 Q@ state $end
$var wire 1 R@ in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 W? q $end
$var wire 1 B@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 S@ state $end
$var wire 1 T@ in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 X? q $end
$var wire 1 C@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 U@ state $end
$var wire 1 V@ in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 Y? q $end
$var wire 1 D@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 W@ state $end
$var wire 1 X@ in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 Z? q $end
$var wire 1 E@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 Y@ state $end
$var wire 1 Z@ in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 [? q $end
$var wire 1 F@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 [@ state $end
$var wire 1 \@ in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 \? q $end
$var wire 1 G@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 ]@ state $end
$var wire 1 ^@ in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 ]? q $end
$var wire 1 H@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 _@ state $end
$var wire 1 `@ in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 ^? q $end
$var wire 1 I@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 a@ state $end
$var wire 1 b@ in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 _? q $end
$var wire 1 J@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 c@ state $end
$var wire 1 d@ in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 `? q $end
$var wire 1 K@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 e@ state $end
$var wire 1 f@ in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 a? q $end
$var wire 1 L@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 g@ state $end
$var wire 1 h@ in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 b? q $end
$var wire 1 M@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 i@ state $end
$var wire 1 j@ in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 c? q $end
$var wire 1 N@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 k@ state $end
$var wire 1 l@ in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 d? q $end
$var wire 1 O@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 m@ state $end
$var wire 1 n@ in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 e? q $end
$var wire 1 P@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 o@ state $end
$var wire 1 p@ in $end
$upscope $end
$upscope $end

$scope module rf_EXMEM_B_out $end
$var wire 1 f? readData [15] $end
$var wire 1 g? readData [14] $end
$var wire 1 h? readData [13] $end
$var wire 1 i? readData [12] $end
$var wire 1 j? readData [11] $end
$var wire 1 k? readData [10] $end
$var wire 1 l? readData [9] $end
$var wire 1 m? readData [8] $end
$var wire 1 n? readData [7] $end
$var wire 1 o? readData [6] $end
$var wire 1 p? readData [5] $end
$var wire 1 q? readData [4] $end
$var wire 1 r? readData [3] $end
$var wire 1 s? readData [2] $end
$var wire 1 t? readData [1] $end
$var wire 1 u? readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? writeEnable $end
$var wire 1 q. writeData [15] $end
$var wire 1 r. writeData [14] $end
$var wire 1 s. writeData [13] $end
$var wire 1 t. writeData [12] $end
$var wire 1 u. writeData [11] $end
$var wire 1 v. writeData [10] $end
$var wire 1 w. writeData [9] $end
$var wire 1 x. writeData [8] $end
$var wire 1 y. writeData [7] $end
$var wire 1 z. writeData [6] $end
$var wire 1 {. writeData [5] $end
$var wire 1 |. writeData [4] $end
$var wire 1 }. writeData [3] $end
$var wire 1 ~. writeData [2] $end
$var wire 1 !/ writeData [1] $end
$var wire 1 "/ writeData [0] $end
$var wire 1 q@ in [15] $end
$var wire 1 r@ in [14] $end
$var wire 1 s@ in [13] $end
$var wire 1 t@ in [12] $end
$var wire 1 u@ in [11] $end
$var wire 1 v@ in [10] $end
$var wire 1 w@ in [9] $end
$var wire 1 x@ in [8] $end
$var wire 1 y@ in [7] $end
$var wire 1 z@ in [6] $end
$var wire 1 {@ in [5] $end
$var wire 1 |@ in [4] $end
$var wire 1 }@ in [3] $end
$var wire 1 ~@ in [2] $end
$var wire 1 !A in [1] $end
$var wire 1 "A in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 f? q $end
$var wire 1 q@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 #A state $end
$var wire 1 $A in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 g? q $end
$var wire 1 r@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 %A state $end
$var wire 1 &A in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 h? q $end
$var wire 1 s@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 'A state $end
$var wire 1 (A in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 i? q $end
$var wire 1 t@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 )A state $end
$var wire 1 *A in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 j? q $end
$var wire 1 u@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 +A state $end
$var wire 1 ,A in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 k? q $end
$var wire 1 v@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 -A state $end
$var wire 1 .A in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 l? q $end
$var wire 1 w@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 /A state $end
$var wire 1 0A in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 m? q $end
$var wire 1 x@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 1A state $end
$var wire 1 2A in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 n? q $end
$var wire 1 y@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 3A state $end
$var wire 1 4A in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 o? q $end
$var wire 1 z@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 5A state $end
$var wire 1 6A in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 p? q $end
$var wire 1 {@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 7A state $end
$var wire 1 8A in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 q? q $end
$var wire 1 |@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 9A state $end
$var wire 1 :A in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 r? q $end
$var wire 1 }@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 ;A state $end
$var wire 1 <A in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 s? q $end
$var wire 1 ~@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 =A state $end
$var wire 1 >A in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 t? q $end
$var wire 1 !A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 ?A state $end
$var wire 1 @A in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 u? q $end
$var wire 1 "A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 AA state $end
$var wire 1 BA in $end
$upscope $end
$upscope $end

$scope module rf_EXMEM_updatedPC_out $end
$var wire 1 v? readData [15] $end
$var wire 1 w? readData [14] $end
$var wire 1 x? readData [13] $end
$var wire 1 y? readData [12] $end
$var wire 1 z? readData [11] $end
$var wire 1 {? readData [10] $end
$var wire 1 |? readData [9] $end
$var wire 1 }? readData [8] $end
$var wire 1 ~? readData [7] $end
$var wire 1 !@ readData [6] $end
$var wire 1 "@ readData [5] $end
$var wire 1 #@ readData [4] $end
$var wire 1 $@ readData [3] $end
$var wire 1 %@ readData [2] $end
$var wire 1 &@ readData [1] $end
$var wire 1 '@ readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? writeEnable $end
$var wire 1 ;! writeData [15] $end
$var wire 1 <! writeData [14] $end
$var wire 1 =! writeData [13] $end
$var wire 1 >! writeData [12] $end
$var wire 1 ?! writeData [11] $end
$var wire 1 @! writeData [10] $end
$var wire 1 A! writeData [9] $end
$var wire 1 B! writeData [8] $end
$var wire 1 C! writeData [7] $end
$var wire 1 D! writeData [6] $end
$var wire 1 E! writeData [5] $end
$var wire 1 F! writeData [4] $end
$var wire 1 G! writeData [3] $end
$var wire 1 H! writeData [2] $end
$var wire 1 I! writeData [1] $end
$var wire 1 J! writeData [0] $end
$var wire 1 CA in [15] $end
$var wire 1 DA in [14] $end
$var wire 1 EA in [13] $end
$var wire 1 FA in [12] $end
$var wire 1 GA in [11] $end
$var wire 1 HA in [10] $end
$var wire 1 IA in [9] $end
$var wire 1 JA in [8] $end
$var wire 1 KA in [7] $end
$var wire 1 LA in [6] $end
$var wire 1 MA in [5] $end
$var wire 1 NA in [4] $end
$var wire 1 OA in [3] $end
$var wire 1 PA in [2] $end
$var wire 1 QA in [1] $end
$var wire 1 RA in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 v? q $end
$var wire 1 CA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 SA state $end
$var wire 1 TA in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 w? q $end
$var wire 1 DA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 UA state $end
$var wire 1 VA in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 x? q $end
$var wire 1 EA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 WA state $end
$var wire 1 XA in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 y? q $end
$var wire 1 FA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 YA state $end
$var wire 1 ZA in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 z? q $end
$var wire 1 GA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 [A state $end
$var wire 1 \A in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 {? q $end
$var wire 1 HA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 ]A state $end
$var wire 1 ^A in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 |? q $end
$var wire 1 IA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 _A state $end
$var wire 1 `A in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 }? q $end
$var wire 1 JA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 aA state $end
$var wire 1 bA in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 ~? q $end
$var wire 1 KA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 cA state $end
$var wire 1 dA in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 !@ q $end
$var wire 1 LA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 eA state $end
$var wire 1 fA in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 "@ q $end
$var wire 1 MA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 gA state $end
$var wire 1 hA in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 #@ q $end
$var wire 1 NA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 iA state $end
$var wire 1 jA in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 $@ q $end
$var wire 1 OA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 kA state $end
$var wire 1 lA in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 %@ q $end
$var wire 1 PA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 mA state $end
$var wire 1 nA in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 &@ q $end
$var wire 1 QA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 oA state $end
$var wire 1 pA in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 '@ q $end
$var wire 1 RA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 qA state $end
$var wire 1 rA in $end
$upscope $end
$upscope $end

$scope module rf_EXMEM_nextPC_out $end
$var wire 1 (@ readData [15] $end
$var wire 1 )@ readData [14] $end
$var wire 1 *@ readData [13] $end
$var wire 1 +@ readData [12] $end
$var wire 1 ,@ readData [11] $end
$var wire 1 -@ readData [10] $end
$var wire 1 .@ readData [9] $end
$var wire 1 /@ readData [8] $end
$var wire 1 0@ readData [7] $end
$var wire 1 1@ readData [6] $end
$var wire 1 2@ readData [5] $end
$var wire 1 3@ readData [4] $end
$var wire 1 4@ readData [3] $end
$var wire 1 5@ readData [2] $end
$var wire 1 6@ readData [1] $end
$var wire 1 7@ readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? writeEnable $end
$var wire 1 Q. writeData [15] $end
$var wire 1 R. writeData [14] $end
$var wire 1 S. writeData [13] $end
$var wire 1 T. writeData [12] $end
$var wire 1 U. writeData [11] $end
$var wire 1 V. writeData [10] $end
$var wire 1 W. writeData [9] $end
$var wire 1 X. writeData [8] $end
$var wire 1 Y. writeData [7] $end
$var wire 1 Z. writeData [6] $end
$var wire 1 [. writeData [5] $end
$var wire 1 \. writeData [4] $end
$var wire 1 ]. writeData [3] $end
$var wire 1 ^. writeData [2] $end
$var wire 1 _. writeData [1] $end
$var wire 1 `. writeData [0] $end
$var wire 1 sA in [15] $end
$var wire 1 tA in [14] $end
$var wire 1 uA in [13] $end
$var wire 1 vA in [12] $end
$var wire 1 wA in [11] $end
$var wire 1 xA in [10] $end
$var wire 1 yA in [9] $end
$var wire 1 zA in [8] $end
$var wire 1 {A in [7] $end
$var wire 1 |A in [6] $end
$var wire 1 }A in [5] $end
$var wire 1 ~A in [4] $end
$var wire 1 !B in [3] $end
$var wire 1 "B in [2] $end
$var wire 1 #B in [1] $end
$var wire 1 $B in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 (@ q $end
$var wire 1 sA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 %B state $end
$var wire 1 &B in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 )@ q $end
$var wire 1 tA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 'B state $end
$var wire 1 (B in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 *@ q $end
$var wire 1 uA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 )B state $end
$var wire 1 *B in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 +@ q $end
$var wire 1 vA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 +B state $end
$var wire 1 ,B in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 ,@ q $end
$var wire 1 wA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 -B state $end
$var wire 1 .B in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 -@ q $end
$var wire 1 xA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 /B state $end
$var wire 1 0B in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 .@ q $end
$var wire 1 yA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 1B state $end
$var wire 1 2B in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 /@ q $end
$var wire 1 zA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 3B state $end
$var wire 1 4B in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 0@ q $end
$var wire 1 {A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 5B state $end
$var wire 1 6B in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 1@ q $end
$var wire 1 |A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 7B state $end
$var wire 1 8B in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 2@ q $end
$var wire 1 }A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 9B state $end
$var wire 1 :B in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 3@ q $end
$var wire 1 ~A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 ;B state $end
$var wire 1 <B in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 4@ q $end
$var wire 1 !B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 =B state $end
$var wire 1 >B in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 5@ q $end
$var wire 1 "B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 ?B state $end
$var wire 1 @B in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 6@ q $end
$var wire 1 #B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 AB state $end
$var wire 1 BB in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 7@ q $end
$var wire 1 $B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 CB state $end
$var wire 1 DB in $end
$upscope $end
$upscope $end

$scope module dff_EXMEM_RegWrite_out $end
$var wire 1 G. q $end
$var wire 1 F. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 EB state $end
$var wire 1 FB in $end
$upscope $end

$scope module dff_EXMEM_DMemWrite_out $end
$var wire 1 I. q $end
$var wire 1 50 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 GB state $end
$var wire 1 HB in $end
$upscope $end

$scope module dff_EXMEM_DMemEn_out $end
$var wire 1 H. q $end
$var wire 1 60 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 IB state $end
$var wire 1 JB in $end
$upscope $end

$scope module dff_EXMEM_MemToReg_in_out $end
$var wire 1 8@ q $end
$var wire 1 70 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 KB state $end
$var wire 1 LB in $end
$upscope $end

$scope module dff_EXMEM_DMemDump_out $end
$var wire 1 9@ q $end
$var wire 1 90 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 MB state $end
$var wire 1 NB in $end
$upscope $end

$scope module dff_EXMEM_Branching_out $end
$var wire 1 :@ q $end
$var wire 1 80 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 OB state $end
$var wire 1 PB in $end
$upscope $end

$scope module dff_EXMEM_Jump_out $end
$var wire 1 ;@ q $end
$var wire 1 /# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 QB state $end
$var wire 1 RB in $end
$upscope $end

$scope module dff_EXMEM_branchingPCEnable_out $end
$var wire 1 <@ q $end
$var wire 1 0# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 SB state $end
$var wire 1 TB in $end
$upscope $end

$scope module dff_EXMEM_ReadingRs_out $end
$var wire 1 ?@ q $end
$var wire 1 D0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 UB state $end
$var wire 1 VB in $end
$upscope $end

$scope module dff_EXMEM_ReadingRt_out $end
$var wire 1 ?@ q $end
$var wire 1 D0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 WB state $end
$var wire 1 XB in $end
$upscope $end

$scope module dff_EXMEM_WriteRegister_in_out0 $end
$var wire 1 $# q $end
$var wire 1 !# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 YB state $end
$var wire 1 ZB in $end
$upscope $end

$scope module dff_EXMEM_WriteRegister_in_out1 $end
$var wire 1 ## q $end
$var wire 1 ~" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 [B state $end
$var wire 1 \B in $end
$upscope $end

$scope module dff_EXMEM_WriteRegister_in_out2 $end
$var wire 1 "# q $end
$var wire 1 }" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 ]B state $end
$var wire 1 ^B in $end
$upscope $end

$scope module dff_EXMEM_BorJ_out $end
$var wire 1 =@ q $end
$var wire 1 C0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U? en $end
$var reg 1 _B state $end
$var wire 1 `B in $end
$upscope $end
$upscope $end

$scope module dataMemory $end
$var wire 1 5! clk $end
$var wire 1 9@ dump $end
$var wire 1 7! rst $end
$var wire 1 I. memWrite $end
$var wire 1 H. memRead $end
$var wire 1 V? aluOutput [15] $end
$var wire 1 W? aluOutput [14] $end
$var wire 1 X? aluOutput [13] $end
$var wire 1 Y? aluOutput [12] $end
$var wire 1 Z? aluOutput [11] $end
$var wire 1 [? aluOutput [10] $end
$var wire 1 \? aluOutput [9] $end
$var wire 1 ]? aluOutput [8] $end
$var wire 1 ^? aluOutput [7] $end
$var wire 1 _? aluOutput [6] $end
$var wire 1 `? aluOutput [5] $end
$var wire 1 a? aluOutput [4] $end
$var wire 1 b? aluOutput [3] $end
$var wire 1 c? aluOutput [2] $end
$var wire 1 d? aluOutput [1] $end
$var wire 1 e? aluOutput [0] $end
$var wire 1 f? writeData [15] $end
$var wire 1 g? writeData [14] $end
$var wire 1 h? writeData [13] $end
$var wire 1 i? writeData [12] $end
$var wire 1 j? writeData [11] $end
$var wire 1 k? writeData [10] $end
$var wire 1 l? writeData [9] $end
$var wire 1 m? writeData [8] $end
$var wire 1 n? writeData [7] $end
$var wire 1 o? writeData [6] $end
$var wire 1 p? writeData [5] $end
$var wire 1 q? writeData [4] $end
$var wire 1 r? writeData [3] $end
$var wire 1 s? writeData [2] $end
$var wire 1 t? writeData [1] $end
$var wire 1 u? writeData [0] $end
$var wire 1 k! readData [15] $end
$var wire 1 l! readData [14] $end
$var wire 1 m! readData [13] $end
$var wire 1 n! readData [12] $end
$var wire 1 o! readData [11] $end
$var wire 1 p! readData [10] $end
$var wire 1 q! readData [9] $end
$var wire 1 r! readData [8] $end
$var wire 1 s! readData [7] $end
$var wire 1 t! readData [6] $end
$var wire 1 u! readData [5] $end
$var wire 1 v! readData [4] $end
$var wire 1 w! readData [3] $end
$var wire 1 x! readData [2] $end
$var wire 1 y! readData [1] $end
$var wire 1 z! readData [0] $end
$var wire 1 6# dataMemoryStallOut $end
$var wire 1 aB memReadOrWrite $end
$var wire 1 bB cacheHit $end
$var wire 1 cB dataMemoryDone $end
$var wire 1 dB unalignedMemErr $end

$scope module dataMemoryModule $end
$var wire 1 k! DataOut [15] $end
$var wire 1 l! DataOut [14] $end
$var wire 1 m! DataOut [13] $end
$var wire 1 n! DataOut [12] $end
$var wire 1 o! DataOut [11] $end
$var wire 1 p! DataOut [10] $end
$var wire 1 q! DataOut [9] $end
$var wire 1 r! DataOut [8] $end
$var wire 1 s! DataOut [7] $end
$var wire 1 t! DataOut [6] $end
$var wire 1 u! DataOut [5] $end
$var wire 1 v! DataOut [4] $end
$var wire 1 w! DataOut [3] $end
$var wire 1 x! DataOut [2] $end
$var wire 1 y! DataOut [1] $end
$var wire 1 z! DataOut [0] $end
$var wire 1 cB Done $end
$var wire 1 6# Stall $end
$var wire 1 bB CacheHit $end
$var wire 1 f? DataIn [15] $end
$var wire 1 g? DataIn [14] $end
$var wire 1 h? DataIn [13] $end
$var wire 1 i? DataIn [12] $end
$var wire 1 j? DataIn [11] $end
$var wire 1 k? DataIn [10] $end
$var wire 1 l? DataIn [9] $end
$var wire 1 m? DataIn [8] $end
$var wire 1 n? DataIn [7] $end
$var wire 1 o? DataIn [6] $end
$var wire 1 p? DataIn [5] $end
$var wire 1 q? DataIn [4] $end
$var wire 1 r? DataIn [3] $end
$var wire 1 s? DataIn [2] $end
$var wire 1 t? DataIn [1] $end
$var wire 1 u? DataIn [0] $end
$var wire 1 V? Addr [15] $end
$var wire 1 W? Addr [14] $end
$var wire 1 X? Addr [13] $end
$var wire 1 Y? Addr [12] $end
$var wire 1 Z? Addr [11] $end
$var wire 1 [? Addr [10] $end
$var wire 1 \? Addr [9] $end
$var wire 1 ]? Addr [8] $end
$var wire 1 ^? Addr [7] $end
$var wire 1 _? Addr [6] $end
$var wire 1 `? Addr [5] $end
$var wire 1 a? Addr [4] $end
$var wire 1 b? Addr [3] $end
$var wire 1 c? Addr [2] $end
$var wire 1 d? Addr [1] $end
$var wire 1 e? Addr [0] $end
$var wire 1 I. Wr $end
$var wire 1 H. Rd $end
$var wire 1 9@ createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 dB err $end
$var reg 1 eB loaded $end
$var reg 17 fB largest [16:0] $end
$var reg 32 gB rand_pat [31:0] $end
$var wire 1 hB ready $end
$var integer 32 iB mcd $end
$var integer 32 jB i $end
$var integer 32 kB seed $end
$upscope $end
$upscope $end

$scope module MEM_WB_Stage $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var wire 1 :@ Branching_in $end
$var wire 1 @@ RegWrite_in $end
$var wire 1 =@ BranchingOrJumping_in $end
$var wire 1 8@ MemToReg_in $end
$var wire 1 H. DMemEn_in $end
$var wire 1 ;@ Jump_in $end
$var wire 1 <@ branchingPCEnable_in $end
$var wire 1 9@ DMemDump_in $end
$var wire 1 ?@ ReadingRs_in $end
$var wire 1 ?@ ReadingRt_in $end
$var wire 1 V? aluOutput_in [15] $end
$var wire 1 W? aluOutput_in [14] $end
$var wire 1 X? aluOutput_in [13] $end
$var wire 1 Y? aluOutput_in [12] $end
$var wire 1 Z? aluOutput_in [11] $end
$var wire 1 [? aluOutput_in [10] $end
$var wire 1 \? aluOutput_in [9] $end
$var wire 1 ]? aluOutput_in [8] $end
$var wire 1 ^? aluOutput_in [7] $end
$var wire 1 _? aluOutput_in [6] $end
$var wire 1 `? aluOutput_in [5] $end
$var wire 1 a? aluOutput_in [4] $end
$var wire 1 b? aluOutput_in [3] $end
$var wire 1 c? aluOutput_in [2] $end
$var wire 1 d? aluOutput_in [1] $end
$var wire 1 e? aluOutput_in [0] $end
$var wire 1 k! readData_in [15] $end
$var wire 1 l! readData_in [14] $end
$var wire 1 m! readData_in [13] $end
$var wire 1 n! readData_in [12] $end
$var wire 1 o! readData_in [11] $end
$var wire 1 p! readData_in [10] $end
$var wire 1 q! readData_in [9] $end
$var wire 1 r! readData_in [8] $end
$var wire 1 s! readData_in [7] $end
$var wire 1 t! readData_in [6] $end
$var wire 1 u! readData_in [5] $end
$var wire 1 v! readData_in [4] $end
$var wire 1 w! readData_in [3] $end
$var wire 1 x! readData_in [2] $end
$var wire 1 y! readData_in [1] $end
$var wire 1 z! readData_in [0] $end
$var wire 1 v? updatedPC_in [15] $end
$var wire 1 w? updatedPC_in [14] $end
$var wire 1 x? updatedPC_in [13] $end
$var wire 1 y? updatedPC_in [12] $end
$var wire 1 z? updatedPC_in [11] $end
$var wire 1 {? updatedPC_in [10] $end
$var wire 1 |? updatedPC_in [9] $end
$var wire 1 }? updatedPC_in [8] $end
$var wire 1 ~? updatedPC_in [7] $end
$var wire 1 !@ updatedPC_in [6] $end
$var wire 1 "@ updatedPC_in [5] $end
$var wire 1 #@ updatedPC_in [4] $end
$var wire 1 $@ updatedPC_in [3] $end
$var wire 1 %@ updatedPC_in [2] $end
$var wire 1 &@ updatedPC_in [1] $end
$var wire 1 '@ updatedPC_in [0] $end
$var wire 1 (@ nextPC_in [15] $end
$var wire 1 )@ nextPC_in [14] $end
$var wire 1 *@ nextPC_in [13] $end
$var wire 1 +@ nextPC_in [12] $end
$var wire 1 ,@ nextPC_in [11] $end
$var wire 1 -@ nextPC_in [10] $end
$var wire 1 .@ nextPC_in [9] $end
$var wire 1 /@ nextPC_in [8] $end
$var wire 1 0@ nextPC_in [7] $end
$var wire 1 1@ nextPC_in [6] $end
$var wire 1 2@ nextPC_in [5] $end
$var wire 1 3@ nextPC_in [4] $end
$var wire 1 4@ nextPC_in [3] $end
$var wire 1 5@ nextPC_in [2] $end
$var wire 1 6@ nextPC_in [1] $end
$var wire 1 7@ nextPC_in [0] $end
$var wire 1 "# WriteRegister_in [2] $end
$var wire 1 ## WriteRegister_in [1] $end
$var wire 1 $# WriteRegister_in [0] $end
$var wire 1 %# WriteRegister_out [2] $end
$var wire 1 &# WriteRegister_out [1] $end
$var wire 1 '# WriteRegister_out [0] $end
$var wire 1 mB aluOutput_out [15] $end
$var wire 1 nB aluOutput_out [14] $end
$var wire 1 oB aluOutput_out [13] $end
$var wire 1 pB aluOutput_out [12] $end
$var wire 1 qB aluOutput_out [11] $end
$var wire 1 rB aluOutput_out [10] $end
$var wire 1 sB aluOutput_out [9] $end
$var wire 1 tB aluOutput_out [8] $end
$var wire 1 uB aluOutput_out [7] $end
$var wire 1 vB aluOutput_out [6] $end
$var wire 1 wB aluOutput_out [5] $end
$var wire 1 xB aluOutput_out [4] $end
$var wire 1 yB aluOutput_out [3] $end
$var wire 1 zB aluOutput_out [2] $end
$var wire 1 {B aluOutput_out [1] $end
$var wire 1 |B aluOutput_out [0] $end
$var wire 1 }B readData_out [15] $end
$var wire 1 ~B readData_out [14] $end
$var wire 1 !C readData_out [13] $end
$var wire 1 "C readData_out [12] $end
$var wire 1 #C readData_out [11] $end
$var wire 1 $C readData_out [10] $end
$var wire 1 %C readData_out [9] $end
$var wire 1 &C readData_out [8] $end
$var wire 1 'C readData_out [7] $end
$var wire 1 (C readData_out [6] $end
$var wire 1 )C readData_out [5] $end
$var wire 1 *C readData_out [4] $end
$var wire 1 +C readData_out [3] $end
$var wire 1 ,C readData_out [2] $end
$var wire 1 -C readData_out [1] $end
$var wire 1 .C readData_out [0] $end
$var wire 1 9# updatedPC_out [15] $end
$var wire 1 :# updatedPC_out [14] $end
$var wire 1 ;# updatedPC_out [13] $end
$var wire 1 <# updatedPC_out [12] $end
$var wire 1 =# updatedPC_out [11] $end
$var wire 1 ># updatedPC_out [10] $end
$var wire 1 ?# updatedPC_out [9] $end
$var wire 1 @# updatedPC_out [8] $end
$var wire 1 A# updatedPC_out [7] $end
$var wire 1 B# updatedPC_out [6] $end
$var wire 1 C# updatedPC_out [5] $end
$var wire 1 D# updatedPC_out [4] $end
$var wire 1 E# updatedPC_out [3] $end
$var wire 1 F# updatedPC_out [2] $end
$var wire 1 G# updatedPC_out [1] $end
$var wire 1 H# updatedPC_out [0] $end
$var wire 1 /C nextPC_out [15] $end
$var wire 1 0C nextPC_out [14] $end
$var wire 1 1C nextPC_out [13] $end
$var wire 1 2C nextPC_out [12] $end
$var wire 1 3C nextPC_out [11] $end
$var wire 1 4C nextPC_out [10] $end
$var wire 1 5C nextPC_out [9] $end
$var wire 1 6C nextPC_out [8] $end
$var wire 1 7C nextPC_out [7] $end
$var wire 1 8C nextPC_out [6] $end
$var wire 1 9C nextPC_out [5] $end
$var wire 1 :C nextPC_out [4] $end
$var wire 1 ;C nextPC_out [3] $end
$var wire 1 <C nextPC_out [2] $end
$var wire 1 =C nextPC_out [1] $end
$var wire 1 >C nextPC_out [0] $end
$var wire 1 ?C Branching_out $end
$var wire 1 g& RegWrite_out $end
$var wire 1 @C MemToReg_out $end
$var wire 1 AC BranchingOrJumping_out $end
$var wire 1 BC DMemEn_out $end
$var wire 1 CC Jump_out $end
$var wire 1 I# branchingPCEnable_out $end
$var wire 1 DC DMemDump_out $end
$var wire 1 EC ReadingRs_out $end
$var wire 1 FC ReadingRt_out $end

$scope module rf_MEMWB_aluOutput_out $end
$var wire 1 mB readData [15] $end
$var wire 1 nB readData [14] $end
$var wire 1 oB readData [13] $end
$var wire 1 pB readData [12] $end
$var wire 1 qB readData [11] $end
$var wire 1 rB readData [10] $end
$var wire 1 sB readData [9] $end
$var wire 1 tB readData [8] $end
$var wire 1 uB readData [7] $end
$var wire 1 vB readData [6] $end
$var wire 1 wB readData [5] $end
$var wire 1 xB readData [4] $end
$var wire 1 yB readData [3] $end
$var wire 1 zB readData [2] $end
$var wire 1 {B readData [1] $end
$var wire 1 |B readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB writeEnable $end
$var wire 1 V? writeData [15] $end
$var wire 1 W? writeData [14] $end
$var wire 1 X? writeData [13] $end
$var wire 1 Y? writeData [12] $end
$var wire 1 Z? writeData [11] $end
$var wire 1 [? writeData [10] $end
$var wire 1 \? writeData [9] $end
$var wire 1 ]? writeData [8] $end
$var wire 1 ^? writeData [7] $end
$var wire 1 _? writeData [6] $end
$var wire 1 `? writeData [5] $end
$var wire 1 a? writeData [4] $end
$var wire 1 b? writeData [3] $end
$var wire 1 c? writeData [2] $end
$var wire 1 d? writeData [1] $end
$var wire 1 e? writeData [0] $end
$var wire 1 GC in [15] $end
$var wire 1 HC in [14] $end
$var wire 1 IC in [13] $end
$var wire 1 JC in [12] $end
$var wire 1 KC in [11] $end
$var wire 1 LC in [10] $end
$var wire 1 MC in [9] $end
$var wire 1 NC in [8] $end
$var wire 1 OC in [7] $end
$var wire 1 PC in [6] $end
$var wire 1 QC in [5] $end
$var wire 1 RC in [4] $end
$var wire 1 SC in [3] $end
$var wire 1 TC in [2] $end
$var wire 1 UC in [1] $end
$var wire 1 VC in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 mB q $end
$var wire 1 GC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 WC state $end
$var wire 1 XC in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 nB q $end
$var wire 1 HC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 YC state $end
$var wire 1 ZC in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 oB q $end
$var wire 1 IC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 [C state $end
$var wire 1 \C in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 pB q $end
$var wire 1 JC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 ]C state $end
$var wire 1 ^C in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 qB q $end
$var wire 1 KC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 _C state $end
$var wire 1 `C in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 rB q $end
$var wire 1 LC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 aC state $end
$var wire 1 bC in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 sB q $end
$var wire 1 MC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 cC state $end
$var wire 1 dC in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 tB q $end
$var wire 1 NC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 eC state $end
$var wire 1 fC in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 uB q $end
$var wire 1 OC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 gC state $end
$var wire 1 hC in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 vB q $end
$var wire 1 PC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 iC state $end
$var wire 1 jC in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 wB q $end
$var wire 1 QC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 kC state $end
$var wire 1 lC in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 xB q $end
$var wire 1 RC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 mC state $end
$var wire 1 nC in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 yB q $end
$var wire 1 SC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 oC state $end
$var wire 1 pC in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 zB q $end
$var wire 1 TC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 qC state $end
$var wire 1 rC in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 {B q $end
$var wire 1 UC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 sC state $end
$var wire 1 tC in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 |B q $end
$var wire 1 VC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 uC state $end
$var wire 1 vC in $end
$upscope $end
$upscope $end

$scope module rf_MEMWB_readData_out $end
$var wire 1 }B readData [15] $end
$var wire 1 ~B readData [14] $end
$var wire 1 !C readData [13] $end
$var wire 1 "C readData [12] $end
$var wire 1 #C readData [11] $end
$var wire 1 $C readData [10] $end
$var wire 1 %C readData [9] $end
$var wire 1 &C readData [8] $end
$var wire 1 'C readData [7] $end
$var wire 1 (C readData [6] $end
$var wire 1 )C readData [5] $end
$var wire 1 *C readData [4] $end
$var wire 1 +C readData [3] $end
$var wire 1 ,C readData [2] $end
$var wire 1 -C readData [1] $end
$var wire 1 .C readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB writeEnable $end
$var wire 1 k! writeData [15] $end
$var wire 1 l! writeData [14] $end
$var wire 1 m! writeData [13] $end
$var wire 1 n! writeData [12] $end
$var wire 1 o! writeData [11] $end
$var wire 1 p! writeData [10] $end
$var wire 1 q! writeData [9] $end
$var wire 1 r! writeData [8] $end
$var wire 1 s! writeData [7] $end
$var wire 1 t! writeData [6] $end
$var wire 1 u! writeData [5] $end
$var wire 1 v! writeData [4] $end
$var wire 1 w! writeData [3] $end
$var wire 1 x! writeData [2] $end
$var wire 1 y! writeData [1] $end
$var wire 1 z! writeData [0] $end
$var wire 1 wC in [15] $end
$var wire 1 xC in [14] $end
$var wire 1 yC in [13] $end
$var wire 1 zC in [12] $end
$var wire 1 {C in [11] $end
$var wire 1 |C in [10] $end
$var wire 1 }C in [9] $end
$var wire 1 ~C in [8] $end
$var wire 1 !D in [7] $end
$var wire 1 "D in [6] $end
$var wire 1 #D in [5] $end
$var wire 1 $D in [4] $end
$var wire 1 %D in [3] $end
$var wire 1 &D in [2] $end
$var wire 1 'D in [1] $end
$var wire 1 (D in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 }B q $end
$var wire 1 wC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 )D state $end
$var wire 1 *D in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 ~B q $end
$var wire 1 xC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 +D state $end
$var wire 1 ,D in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 !C q $end
$var wire 1 yC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 -D state $end
$var wire 1 .D in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 "C q $end
$var wire 1 zC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 /D state $end
$var wire 1 0D in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 #C q $end
$var wire 1 {C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 1D state $end
$var wire 1 2D in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 $C q $end
$var wire 1 |C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 3D state $end
$var wire 1 4D in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 %C q $end
$var wire 1 }C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 5D state $end
$var wire 1 6D in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 &C q $end
$var wire 1 ~C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 7D state $end
$var wire 1 8D in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 'C q $end
$var wire 1 !D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 9D state $end
$var wire 1 :D in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 (C q $end
$var wire 1 "D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 ;D state $end
$var wire 1 <D in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 )C q $end
$var wire 1 #D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 =D state $end
$var wire 1 >D in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 *C q $end
$var wire 1 $D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 ?D state $end
$var wire 1 @D in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 +C q $end
$var wire 1 %D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 AD state $end
$var wire 1 BD in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 ,C q $end
$var wire 1 &D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 CD state $end
$var wire 1 DD in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 -C q $end
$var wire 1 'D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 ED state $end
$var wire 1 FD in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 .C q $end
$var wire 1 (D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 GD state $end
$var wire 1 HD in $end
$upscope $end
$upscope $end

$scope module rf_MEMWB_updatedPC_out $end
$var wire 1 9# readData [15] $end
$var wire 1 :# readData [14] $end
$var wire 1 ;# readData [13] $end
$var wire 1 <# readData [12] $end
$var wire 1 =# readData [11] $end
$var wire 1 ># readData [10] $end
$var wire 1 ?# readData [9] $end
$var wire 1 @# readData [8] $end
$var wire 1 A# readData [7] $end
$var wire 1 B# readData [6] $end
$var wire 1 C# readData [5] $end
$var wire 1 D# readData [4] $end
$var wire 1 E# readData [3] $end
$var wire 1 F# readData [2] $end
$var wire 1 G# readData [1] $end
$var wire 1 H# readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB writeEnable $end
$var wire 1 v? writeData [15] $end
$var wire 1 w? writeData [14] $end
$var wire 1 x? writeData [13] $end
$var wire 1 y? writeData [12] $end
$var wire 1 z? writeData [11] $end
$var wire 1 {? writeData [10] $end
$var wire 1 |? writeData [9] $end
$var wire 1 }? writeData [8] $end
$var wire 1 ~? writeData [7] $end
$var wire 1 !@ writeData [6] $end
$var wire 1 "@ writeData [5] $end
$var wire 1 #@ writeData [4] $end
$var wire 1 $@ writeData [3] $end
$var wire 1 %@ writeData [2] $end
$var wire 1 &@ writeData [1] $end
$var wire 1 '@ writeData [0] $end
$var wire 1 ID in [15] $end
$var wire 1 JD in [14] $end
$var wire 1 KD in [13] $end
$var wire 1 LD in [12] $end
$var wire 1 MD in [11] $end
$var wire 1 ND in [10] $end
$var wire 1 OD in [9] $end
$var wire 1 PD in [8] $end
$var wire 1 QD in [7] $end
$var wire 1 RD in [6] $end
$var wire 1 SD in [5] $end
$var wire 1 TD in [4] $end
$var wire 1 UD in [3] $end
$var wire 1 VD in [2] $end
$var wire 1 WD in [1] $end
$var wire 1 XD in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 9# q $end
$var wire 1 ID d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 YD state $end
$var wire 1 ZD in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 :# q $end
$var wire 1 JD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 [D state $end
$var wire 1 \D in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 ;# q $end
$var wire 1 KD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 ]D state $end
$var wire 1 ^D in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 <# q $end
$var wire 1 LD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 _D state $end
$var wire 1 `D in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 =# q $end
$var wire 1 MD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 aD state $end
$var wire 1 bD in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 ># q $end
$var wire 1 ND d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 cD state $end
$var wire 1 dD in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 ?# q $end
$var wire 1 OD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 eD state $end
$var wire 1 fD in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 @# q $end
$var wire 1 PD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 gD state $end
$var wire 1 hD in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 A# q $end
$var wire 1 QD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 iD state $end
$var wire 1 jD in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 B# q $end
$var wire 1 RD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 kD state $end
$var wire 1 lD in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 C# q $end
$var wire 1 SD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 mD state $end
$var wire 1 nD in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 D# q $end
$var wire 1 TD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 oD state $end
$var wire 1 pD in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 E# q $end
$var wire 1 UD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 qD state $end
$var wire 1 rD in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 F# q $end
$var wire 1 VD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 sD state $end
$var wire 1 tD in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 G# q $end
$var wire 1 WD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 uD state $end
$var wire 1 vD in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 H# q $end
$var wire 1 XD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 wD state $end
$var wire 1 xD in $end
$upscope $end
$upscope $end

$scope module rf_MEMWB_nextPC_out $end
$var wire 1 /C readData [15] $end
$var wire 1 0C readData [14] $end
$var wire 1 1C readData [13] $end
$var wire 1 2C readData [12] $end
$var wire 1 3C readData [11] $end
$var wire 1 4C readData [10] $end
$var wire 1 5C readData [9] $end
$var wire 1 6C readData [8] $end
$var wire 1 7C readData [7] $end
$var wire 1 8C readData [6] $end
$var wire 1 9C readData [5] $end
$var wire 1 :C readData [4] $end
$var wire 1 ;C readData [3] $end
$var wire 1 <C readData [2] $end
$var wire 1 =C readData [1] $end
$var wire 1 >C readData [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB writeEnable $end
$var wire 1 (@ writeData [15] $end
$var wire 1 )@ writeData [14] $end
$var wire 1 *@ writeData [13] $end
$var wire 1 +@ writeData [12] $end
$var wire 1 ,@ writeData [11] $end
$var wire 1 -@ writeData [10] $end
$var wire 1 .@ writeData [9] $end
$var wire 1 /@ writeData [8] $end
$var wire 1 0@ writeData [7] $end
$var wire 1 1@ writeData [6] $end
$var wire 1 2@ writeData [5] $end
$var wire 1 3@ writeData [4] $end
$var wire 1 4@ writeData [3] $end
$var wire 1 5@ writeData [2] $end
$var wire 1 6@ writeData [1] $end
$var wire 1 7@ writeData [0] $end
$var wire 1 yD in [15] $end
$var wire 1 zD in [14] $end
$var wire 1 {D in [13] $end
$var wire 1 |D in [12] $end
$var wire 1 }D in [11] $end
$var wire 1 ~D in [10] $end
$var wire 1 !E in [9] $end
$var wire 1 "E in [8] $end
$var wire 1 #E in [7] $end
$var wire 1 $E in [6] $end
$var wire 1 %E in [5] $end
$var wire 1 &E in [4] $end
$var wire 1 'E in [3] $end
$var wire 1 (E in [2] $end
$var wire 1 )E in [1] $end
$var wire 1 *E in [0] $end

$scope module dff_16_bits[15] $end
$var wire 1 /C q $end
$var wire 1 yD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 +E state $end
$var wire 1 ,E in $end
$upscope $end

$scope module dff_16_bits[14] $end
$var wire 1 0C q $end
$var wire 1 zD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 -E state $end
$var wire 1 .E in $end
$upscope $end

$scope module dff_16_bits[13] $end
$var wire 1 1C q $end
$var wire 1 {D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 /E state $end
$var wire 1 0E in $end
$upscope $end

$scope module dff_16_bits[12] $end
$var wire 1 2C q $end
$var wire 1 |D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 1E state $end
$var wire 1 2E in $end
$upscope $end

$scope module dff_16_bits[11] $end
$var wire 1 3C q $end
$var wire 1 }D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 3E state $end
$var wire 1 4E in $end
$upscope $end

$scope module dff_16_bits[10] $end
$var wire 1 4C q $end
$var wire 1 ~D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 5E state $end
$var wire 1 6E in $end
$upscope $end

$scope module dff_16_bits[9] $end
$var wire 1 5C q $end
$var wire 1 !E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 7E state $end
$var wire 1 8E in $end
$upscope $end

$scope module dff_16_bits[8] $end
$var wire 1 6C q $end
$var wire 1 "E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 9E state $end
$var wire 1 :E in $end
$upscope $end

$scope module dff_16_bits[7] $end
$var wire 1 7C q $end
$var wire 1 #E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 ;E state $end
$var wire 1 <E in $end
$upscope $end

$scope module dff_16_bits[6] $end
$var wire 1 8C q $end
$var wire 1 $E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 =E state $end
$var wire 1 >E in $end
$upscope $end

$scope module dff_16_bits[5] $end
$var wire 1 9C q $end
$var wire 1 %E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 ?E state $end
$var wire 1 @E in $end
$upscope $end

$scope module dff_16_bits[4] $end
$var wire 1 :C q $end
$var wire 1 &E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 AE state $end
$var wire 1 BE in $end
$upscope $end

$scope module dff_16_bits[3] $end
$var wire 1 ;C q $end
$var wire 1 'E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 CE state $end
$var wire 1 DE in $end
$upscope $end

$scope module dff_16_bits[2] $end
$var wire 1 <C q $end
$var wire 1 (E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 EE state $end
$var wire 1 FE in $end
$upscope $end

$scope module dff_16_bits[1] $end
$var wire 1 =C q $end
$var wire 1 )E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 GE state $end
$var wire 1 HE in $end
$upscope $end

$scope module dff_16_bits[0] $end
$var wire 1 >C q $end
$var wire 1 *E d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 IE state $end
$var wire 1 JE in $end
$upscope $end
$upscope $end

$scope module dff_MEMWB_Branching_out $end
$var wire 1 ?C q $end
$var wire 1 :@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 KE state $end
$var wire 1 LE in $end
$upscope $end

$scope module dff_MEMWB_RegWrite_out $end
$var wire 1 g& q $end
$var wire 1 @@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 ME state $end
$var wire 1 NE in $end
$upscope $end

$scope module dff_MEMWB_MemToReg_in_out $end
$var wire 1 @C q $end
$var wire 1 8@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 OE state $end
$var wire 1 PE in $end
$upscope $end

$scope module dff_MEMWB_Jump_in_out $end
$var wire 1 CC q $end
$var wire 1 ;@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 QE state $end
$var wire 1 RE in $end
$upscope $end

$scope module dff_MEMWB_DMemEn_out $end
$var wire 1 BC q $end
$var wire 1 H. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 SE state $end
$var wire 1 TE in $end
$upscope $end

$scope module dff_MEMWB_DMemDump_out $end
$var wire 1 DC q $end
$var wire 1 H. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 UE state $end
$var wire 1 VE in $end
$upscope $end

$scope module dff_MEMWB_branchingPCEnable_out $end
$var wire 1 I# q $end
$var wire 1 <@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 WE state $end
$var wire 1 XE in $end
$upscope $end

$scope module dff_MEMWB_ReadingRs_out $end
$var wire 1 EC q $end
$var wire 1 ?@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 YE state $end
$var wire 1 ZE in $end
$upscope $end

$scope module dff_MEMWB_ReadingRt_out $end
$var wire 1 FC q $end
$var wire 1 ?@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 [E state $end
$var wire 1 \E in $end
$upscope $end

$scope module dff_MEMWB_WriteRegister_in_out0 $end
$var wire 1 '# q $end
$var wire 1 $# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 ]E state $end
$var wire 1 ^E in $end
$upscope $end

$scope module dff_MEMWB_WriteRegister_in_out1 $end
$var wire 1 &# q $end
$var wire 1 ## d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 _E state $end
$var wire 1 `E in $end
$upscope $end

$scope module dff_MEMWB_WriteRegister_in_out2 $end
$var wire 1 %# q $end
$var wire 1 "# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 aE state $end
$var wire 1 bE in $end
$upscope $end

$scope module dff_MEMWB_BorJ_out $end
$var wire 1 AC q $end
$var wire 1 =@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 lB en $end
$var reg 1 cE state $end
$var wire 1 dE in $end
$upscope $end
$upscope $end

$scope module instructionWriteback $end
$var wire 1 }B readData [15] $end
$var wire 1 ~B readData [14] $end
$var wire 1 !C readData [13] $end
$var wire 1 "C readData [12] $end
$var wire 1 #C readData [11] $end
$var wire 1 $C readData [10] $end
$var wire 1 %C readData [9] $end
$var wire 1 &C readData [8] $end
$var wire 1 'C readData [7] $end
$var wire 1 (C readData [6] $end
$var wire 1 )C readData [5] $end
$var wire 1 *C readData [4] $end
$var wire 1 +C readData [3] $end
$var wire 1 ,C readData [2] $end
$var wire 1 -C readData [1] $end
$var wire 1 .C readData [0] $end
$var wire 1 mB aluOutput [15] $end
$var wire 1 nB aluOutput [14] $end
$var wire 1 oB aluOutput [13] $end
$var wire 1 pB aluOutput [12] $end
$var wire 1 qB aluOutput [11] $end
$var wire 1 rB aluOutput [10] $end
$var wire 1 sB aluOutput [9] $end
$var wire 1 tB aluOutput [8] $end
$var wire 1 uB aluOutput [7] $end
$var wire 1 vB aluOutput [6] $end
$var wire 1 wB aluOutput [5] $end
$var wire 1 xB aluOutput [4] $end
$var wire 1 yB aluOutput [3] $end
$var wire 1 zB aluOutput [2] $end
$var wire 1 {B aluOutput [1] $end
$var wire 1 |B aluOutput [0] $end
$var wire 1 /C PC_Next [15] $end
$var wire 1 0C PC_Next [14] $end
$var wire 1 1C PC_Next [13] $end
$var wire 1 2C PC_Next [12] $end
$var wire 1 3C PC_Next [11] $end
$var wire 1 4C PC_Next [10] $end
$var wire 1 5C PC_Next [9] $end
$var wire 1 6C PC_Next [8] $end
$var wire 1 7C PC_Next [7] $end
$var wire 1 8C PC_Next [6] $end
$var wire 1 9C PC_Next [5] $end
$var wire 1 :C PC_Next [4] $end
$var wire 1 ;C PC_Next [3] $end
$var wire 1 <C PC_Next [2] $end
$var wire 1 =C PC_Next [1] $end
$var wire 1 >C PC_Next [0] $end
$var wire 1 @C memToReg $end
$var wire 1 CC JAL_en $end
$var wire 1 {! writeData [15] $end
$var wire 1 |! writeData [14] $end
$var wire 1 }! writeData [13] $end
$var wire 1 ~! writeData [12] $end
$var wire 1 !" writeData [11] $end
$var wire 1 "" writeData [10] $end
$var wire 1 #" writeData [9] $end
$var wire 1 $" writeData [8] $end
$var wire 1 %" writeData [7] $end
$var wire 1 &" writeData [6] $end
$var wire 1 '" writeData [5] $end
$var wire 1 (" writeData [4] $end
$var wire 1 )" writeData [3] $end
$var wire 1 *" writeData [2] $end
$var wire 1 +" writeData [1] $end
$var wire 1 ," writeData [0] $end

$scope module mux1 $end
$var parameter 32 eE NUM_BITS $end
$var wire 1 mB InA [15] $end
$var wire 1 nB InA [14] $end
$var wire 1 oB InA [13] $end
$var wire 1 pB InA [12] $end
$var wire 1 qB InA [11] $end
$var wire 1 rB InA [10] $end
$var wire 1 sB InA [9] $end
$var wire 1 tB InA [8] $end
$var wire 1 uB InA [7] $end
$var wire 1 vB InA [6] $end
$var wire 1 wB InA [5] $end
$var wire 1 xB InA [4] $end
$var wire 1 yB InA [3] $end
$var wire 1 zB InA [2] $end
$var wire 1 {B InA [1] $end
$var wire 1 |B InA [0] $end
$var wire 1 }B InB [15] $end
$var wire 1 ~B InB [14] $end
$var wire 1 !C InB [13] $end
$var wire 1 "C InB [12] $end
$var wire 1 #C InB [11] $end
$var wire 1 $C InB [10] $end
$var wire 1 %C InB [9] $end
$var wire 1 &C InB [8] $end
$var wire 1 'C InB [7] $end
$var wire 1 (C InB [6] $end
$var wire 1 )C InB [5] $end
$var wire 1 *C InB [4] $end
$var wire 1 +C InB [3] $end
$var wire 1 ,C InB [2] $end
$var wire 1 -C InB [1] $end
$var wire 1 .C InB [0] $end
$var wire 1 /C InC [15] $end
$var wire 1 0C InC [14] $end
$var wire 1 1C InC [13] $end
$var wire 1 2C InC [12] $end
$var wire 1 3C InC [11] $end
$var wire 1 4C InC [10] $end
$var wire 1 5C InC [9] $end
$var wire 1 6C InC [8] $end
$var wire 1 7C InC [7] $end
$var wire 1 8C InC [6] $end
$var wire 1 9C InC [5] $end
$var wire 1 :C InC [4] $end
$var wire 1 ;C InC [3] $end
$var wire 1 <C InC [2] $end
$var wire 1 =C InC [1] $end
$var wire 1 >C InC [0] $end
$var wire 1 fE InD [15] $end
$var wire 1 gE InD [14] $end
$var wire 1 hE InD [13] $end
$var wire 1 iE InD [12] $end
$var wire 1 jE InD [11] $end
$var wire 1 kE InD [10] $end
$var wire 1 lE InD [9] $end
$var wire 1 mE InD [8] $end
$var wire 1 nE InD [7] $end
$var wire 1 oE InD [6] $end
$var wire 1 pE InD [5] $end
$var wire 1 qE InD [4] $end
$var wire 1 rE InD [3] $end
$var wire 1 sE InD [2] $end
$var wire 1 tE InD [1] $end
$var wire 1 uE InD [0] $end
$var wire 1 CC S [1] $end
$var wire 1 @C S [0] $end
$var wire 1 {! Out [15] $end
$var wire 1 |! Out [14] $end
$var wire 1 }! Out [13] $end
$var wire 1 ~! Out [12] $end
$var wire 1 !" Out [11] $end
$var wire 1 "" Out [10] $end
$var wire 1 #" Out [9] $end
$var wire 1 $" Out [8] $end
$var wire 1 %" Out [7] $end
$var wire 1 &" Out [6] $end
$var wire 1 '" Out [5] $end
$var wire 1 (" Out [4] $end
$var wire 1 )" Out [3] $end
$var wire 1 *" Out [2] $end
$var wire 1 +" Out [1] $end
$var wire 1 ," Out [0] $end
$var wire 1 vE A_B_Out [15] $end
$var wire 1 wE A_B_Out [14] $end
$var wire 1 xE A_B_Out [13] $end
$var wire 1 yE A_B_Out [12] $end
$var wire 1 zE A_B_Out [11] $end
$var wire 1 {E A_B_Out [10] $end
$var wire 1 |E A_B_Out [9] $end
$var wire 1 }E A_B_Out [8] $end
$var wire 1 ~E A_B_Out [7] $end
$var wire 1 !F A_B_Out [6] $end
$var wire 1 "F A_B_Out [5] $end
$var wire 1 #F A_B_Out [4] $end
$var wire 1 $F A_B_Out [3] $end
$var wire 1 %F A_B_Out [2] $end
$var wire 1 &F A_B_Out [1] $end
$var wire 1 'F A_B_Out [0] $end
$var wire 1 (F C_D_Out [15] $end
$var wire 1 )F C_D_Out [14] $end
$var wire 1 *F C_D_Out [13] $end
$var wire 1 +F C_D_Out [12] $end
$var wire 1 ,F C_D_Out [11] $end
$var wire 1 -F C_D_Out [10] $end
$var wire 1 .F C_D_Out [9] $end
$var wire 1 /F C_D_Out [8] $end
$var wire 1 0F C_D_Out [7] $end
$var wire 1 1F C_D_Out [6] $end
$var wire 1 2F C_D_Out [5] $end
$var wire 1 3F C_D_Out [4] $end
$var wire 1 4F C_D_Out [3] $end
$var wire 1 5F C_D_Out [2] $end
$var wire 1 6F C_D_Out [1] $end
$var wire 1 7F C_D_Out [0] $end

$scope module A_B_mux $end
$var parameter 32 8F NUM_BITS $end
$var wire 1 mB InA [15] $end
$var wire 1 nB InA [14] $end
$var wire 1 oB InA [13] $end
$var wire 1 pB InA [12] $end
$var wire 1 qB InA [11] $end
$var wire 1 rB InA [10] $end
$var wire 1 sB InA [9] $end
$var wire 1 tB InA [8] $end
$var wire 1 uB InA [7] $end
$var wire 1 vB InA [6] $end
$var wire 1 wB InA [5] $end
$var wire 1 xB InA [4] $end
$var wire 1 yB InA [3] $end
$var wire 1 zB InA [2] $end
$var wire 1 {B InA [1] $end
$var wire 1 |B InA [0] $end
$var wire 1 }B InB [15] $end
$var wire 1 ~B InB [14] $end
$var wire 1 !C InB [13] $end
$var wire 1 "C InB [12] $end
$var wire 1 #C InB [11] $end
$var wire 1 $C InB [10] $end
$var wire 1 %C InB [9] $end
$var wire 1 &C InB [8] $end
$var wire 1 'C InB [7] $end
$var wire 1 (C InB [6] $end
$var wire 1 )C InB [5] $end
$var wire 1 *C InB [4] $end
$var wire 1 +C InB [3] $end
$var wire 1 ,C InB [2] $end
$var wire 1 -C InB [1] $end
$var wire 1 .C InB [0] $end
$var wire 1 @C S $end
$var wire 1 vE Out [15] $end
$var wire 1 wE Out [14] $end
$var wire 1 xE Out [13] $end
$var wire 1 yE Out [12] $end
$var wire 1 zE Out [11] $end
$var wire 1 {E Out [10] $end
$var wire 1 |E Out [9] $end
$var wire 1 }E Out [8] $end
$var wire 1 ~E Out [7] $end
$var wire 1 !F Out [6] $end
$var wire 1 "F Out [5] $end
$var wire 1 #F Out [4] $end
$var wire 1 $F Out [3] $end
$var wire 1 %F Out [2] $end
$var wire 1 &F Out [1] $end
$var wire 1 'F Out [0] $end
$upscope $end

$scope module C_D_mux $end
$var parameter 32 9F NUM_BITS $end
$var wire 1 /C InA [15] $end
$var wire 1 0C InA [14] $end
$var wire 1 1C InA [13] $end
$var wire 1 2C InA [12] $end
$var wire 1 3C InA [11] $end
$var wire 1 4C InA [10] $end
$var wire 1 5C InA [9] $end
$var wire 1 6C InA [8] $end
$var wire 1 7C InA [7] $end
$var wire 1 8C InA [6] $end
$var wire 1 9C InA [5] $end
$var wire 1 :C InA [4] $end
$var wire 1 ;C InA [3] $end
$var wire 1 <C InA [2] $end
$var wire 1 =C InA [1] $end
$var wire 1 >C InA [0] $end
$var wire 1 fE InB [15] $end
$var wire 1 gE InB [14] $end
$var wire 1 hE InB [13] $end
$var wire 1 iE InB [12] $end
$var wire 1 jE InB [11] $end
$var wire 1 kE InB [10] $end
$var wire 1 lE InB [9] $end
$var wire 1 mE InB [8] $end
$var wire 1 nE InB [7] $end
$var wire 1 oE InB [6] $end
$var wire 1 pE InB [5] $end
$var wire 1 qE InB [4] $end
$var wire 1 rE InB [3] $end
$var wire 1 sE InB [2] $end
$var wire 1 tE InB [1] $end
$var wire 1 uE InB [0] $end
$var wire 1 @C S $end
$var wire 1 (F Out [15] $end
$var wire 1 )F Out [14] $end
$var wire 1 *F Out [13] $end
$var wire 1 +F Out [12] $end
$var wire 1 ,F Out [11] $end
$var wire 1 -F Out [10] $end
$var wire 1 .F Out [9] $end
$var wire 1 /F Out [8] $end
$var wire 1 0F Out [7] $end
$var wire 1 1F Out [6] $end
$var wire 1 2F Out [5] $end
$var wire 1 3F Out [4] $end
$var wire 1 4F Out [3] $end
$var wire 1 5F Out [2] $end
$var wire 1 6F Out [1] $end
$var wire 1 7F Out [0] $end
$upscope $end

$scope module finalMux $end
$var parameter 32 :F NUM_BITS $end
$var wire 1 vE InA [15] $end
$var wire 1 wE InA [14] $end
$var wire 1 xE InA [13] $end
$var wire 1 yE InA [12] $end
$var wire 1 zE InA [11] $end
$var wire 1 {E InA [10] $end
$var wire 1 |E InA [9] $end
$var wire 1 }E InA [8] $end
$var wire 1 ~E InA [7] $end
$var wire 1 !F InA [6] $end
$var wire 1 "F InA [5] $end
$var wire 1 #F InA [4] $end
$var wire 1 $F InA [3] $end
$var wire 1 %F InA